GDB(1)                       GNU Development Tools                      GDB(1)



NNAAMMEE
       gdb - The GNU Debugger

SSYYNNOOPPSSIISS
       gdb [--hheellpp] [--nnhh] [--nnxx] [--qq] [--bbaattcchh] [--ccdd==_d_i_r] [--ff] [--bb _b_p_s]
           [--ttttyy==_d_e_v] [--ss _s_y_m_f_i_l_e] [--ee _p_r_o_g] [--ssee _p_r_o_g] [--cc _c_o_r_e] [--pp _p_r_o_c_I_D]
           [--xx _c_m_d_s] [--dd _d_i_r] [_p_r_o_g|_p_r_o_g _p_r_o_c_I_D|_p_r_o_g _c_o_r_e]

DDEESSCCRRIIPPTTIIOONN
       The  purpose  of  a debugger such as GDB is to allow you to see what is
       going on "inside" another program while it executes -- or what  another
       program was doing at the moment it crashed.

       GDB  can  do four main kinds of things (plus other things in support of
       these) to help you catch bugs in the act:

       +o   Start your program,  specifying  anything  that  might  affect  its
           behavior.

       +o   Make your program stop on specified conditions.

       +o   Examine what has happened, when your program has stopped.

       +o   Change  things in your program, so you can experiment with correct-
           ing the effects of one bug and go on to learn about another.

       You can use GDB to debug programs written in C,  C@t{++},  Fortran  and
       Modula-2.

       GDB  is  invoked  with the shell command "gdb".  Once started, it reads
       commands from the terminal until you tell it to exit with the GDB  com-
       mand "quit".  You can get online help from GDB itself by using the com-
       mand "help".

       You can run "gdb" with no arguments or options; but the most usual  way
       to start GDB is with one argument or two, specifying an executable pro-
       gram as the argument:

               gdb program

       You can also start with both an executable  program  and  a  core  file
       specified:

               gdb program core

       You  can,  instead,  specify  a process ID as a second argument, if you
       want to debug a running process:

               gdb program 1234
               gdb -p 1234

       would attach GDB to process 1234 (unless you also  have  a  file  named
       _1_2_3_4;  GDB  does  check for a core file first).  With option --pp you can
       omit the _p_r_o_g_r_a_m filename.

       Here are some of the most frequently needed GDB commands:

       bbrreeaakk [[_f_i_l_e::]]_f_u_n_c_t_i_o_n
           Set a breakpoint at _f_u_n_c_t_i_o_n (in _f_i_l_e).

       rruunn [[_a_r_g_l_i_s_t]]
           Start your program (with _a_r_g_l_i_s_t, if specified).

       bbtt  Backtrace: display the program stack.

       pprriinntt _e_x_p_r
           Display the value of an expression.

       cc   Continue running your program (after stopping,  e.g.  at  a  break-
           point).

       nneexxtt
           Execute  next program line (after stopping); step _o_v_e_r any function
           calls in the line.

       eeddiitt [[_f_i_l_e::]]_f_u_n_c_t_i_o_n
           look at the program line where it is presently stopped.

       lliisstt [[_f_i_l_e::]]_f_u_n_c_t_i_o_n
           type the text of the  program  in  the  vicinity  of  where  it  is
           presently stopped.

       sstteepp
           Execute  next program line (after stopping); step _i_n_t_o any function
           calls in the line.

       hheellpp [[_n_a_m_e]]
           Show information about GDB command  _n_a_m_e,  or  general  information
           about using GDB.

       qquuiitt
           Exit from GDB.

       For full details on GDB, see _U_s_i_n_g _G_D_B_: _A _G_u_i_d_e _t_o _t_h_e _G_N_U _S_o_u_r_c_e_-_L_e_v_e_l
       _D_e_b_u_g_g_e_r, by Richard M. Stallman and Roland H. Pesch.  The same text is
       available online as the "gdb" entry in the "info" program.

OOPPTTIIOONNSS
       Any  arguments  other  than options specify an executable file and core
       file (or process ID); that is, the first argument encountered  with  no
       associated  option  flag is equivalent to a --ssee option, and the second,
       if any, is equivalent to a --cc option if it's the name of a file.   Many
       options  have both long and short forms; both are shown here.  The long
       forms are also recognized if you truncate them, so long  as  enough  of
       the  option is present to be unambiguous.  (If you prefer, you can flag
       option arguments with ++ rather than --, though we  illustrate  the  more
       usual convention.)

       All  the  options  and command line arguments you give are processed in
       sequential order.  The order makes a difference when the --xx  option  is
       used.

       --hheellpp
       --hh  List all options, with brief explanations.

       --ssyymmbboollss==_f_i_l_e
       --ss _f_i_l_e
           Read symbol table from file _f_i_l_e.

       --wwrriittee
           Enable writing into executable and core files.

       --eexxeecc==_f_i_l_e
       --ee _f_i_l_e
           Use  file  _f_i_l_e as the executable file to execute when appropriate,
           and for examining pure data in conjunction with a core dump.

       --ssee==_f_i_l_e
           Read symbol table from file _f_i_l_e and use it as the executable file.

       --ccoorree==_f_i_l_e
       --cc _f_i_l_e
           Use file _f_i_l_e as a core dump to examine.

       --ccoommmmaanndd==_f_i_l_e
       --xx _f_i_l_e
           Execute GDB commands from file _f_i_l_e.

       --eexx _c_o_m_m_a_n_d
           Execute given GDB _c_o_m_m_a_n_d.

       --ddiirreeccttoorryy==_d_i_r_e_c_t_o_r_y
       --dd _d_i_r_e_c_t_o_r_y
           Add _d_i_r_e_c_t_o_r_y to the path to search for source files.

       --nnhh Do not execute commands from _~_/_._g_d_b_i_n_i_t.

       --nnxx
       --nn  Do not execute commands from any _._g_d_b_i_n_i_t initialization files.

       --qquuiieett
       --qq  "Quiet".  Do not print the  introductory  and  copyright  messages.
           These messages are also suppressed in batch mode.

       --bbaattcchh
           Run  in  batch  mode.   Exit with status 0 after processing all the
           command files specified with --xx (and _._g_d_b_i_n_i_t, if  not  inhibited).
           Exit  with  nonzero  status if an error occurs in executing the GDB
           commands in the command files.

           Batch mode may be useful for running GDB as a filter,  for  example
           to download and run a program on another computer; in order to make
           this more useful, the message

                   Program exited normally.

           (which is ordinarily issued whenever a program  running  under  GDB
           control terminates) is not issued when running in batch mode.

       --ccdd==_d_i_r_e_c_t_o_r_y
           Run  GDB  using  _d_i_r_e_c_t_o_r_y as its working directory, instead of the
           current directory.

       --ffuullllnnaammee
       --ff  Emacs sets this option when it runs GDB as a subprocess.  It  tells
           GDB  to  output  the  full file name and line number in a standard,
           recognizable fashion each time a stack frame  is  displayed  (which
           includes  each  time  the program stops).  This recognizable format
           looks like two \\003322 characters, followed by  the  file  name,  line
           number  and  character position separated by colons, and a newline.
           The Emacs-to-GDB interface program uses the two \\003322 characters  as
           a signal to display the source code for the frame.

       --bb _b_p_s
           Set  the  line  speed  (baud rate or bits per second) of any serial
           interface used by GDB for remote debugging.

       --ttttyy==_d_e_v_i_c_e
           Run using _d_e_v_i_c_e for your program's standard input and output.

SSEEEE AALLSSOO
       The full documentation for GDB is maintained as a Texinfo  manual.   If
       the "info" and "gdb" programs and GDB's Texinfo documentation are prop-
       erly installed at your site, the command

               info gdb

       should give you access to the complete manual.

       _U_s_i_n_g _G_D_B_: _A _G_u_i_d_e _t_o _t_h_e _G_N_U _S_o_u_r_c_e_-_L_e_v_e_l _D_e_b_u_g_g_e_r, Richard M.  Stall-
       man and Roland H. Pesch, July 1991.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1988-2017 Free Software Foundation, Inc.

       Permission  is  granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version  1.3  or
       any  later  version published by the Free Software Foundation; with the
       Invariant Sections being "Free Software" and "Free Software Needs  Free
       Documentation",  with  the  Front-Cover Texts being "A GNU Manual," and
       with the Back-Cover Texts as in (a) below.

       (a) The FSF's Back-Cover Text is: "You are free to copy and modify this
       GNU  Manual.  Buying copies from GNU Press supports the FSF in develop-
       ing GNU and promoting software freedom."



gdb-8.0.1                         2018-05-23                            GDB(1)
