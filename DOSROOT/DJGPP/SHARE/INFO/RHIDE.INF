This is rhide.inf, produced by makeinfo version 4.7 from rhide.txi.

INFO-DIR-SECTION Integrated Environment
START-INFO-DIR-ENTRY
* RHIDE: (rhide).   Documentation about RHIDE, an IDE for DJGPP or GNU/Linux.
END-INFO-DIR-ENTRY


File: rhide.inf,  Node: Top,  Prev: (dir),  Up: (dir)

 RHIDE
******

* Menu:

* Introduction::
* General information about how RHIDE works::
* Description of the pull-down menus::
* Detailed description of some parts of RHIDE::
* Debugging with RHIDE::
* Debugging with RHGDB::
* Some FAQs::
* Index::
* Index of key commands::


File: rhide.inf,  Node: Introduction,  Next: General information about how RHIDE works,  Prev: Top,  Up: Top

1 Introduction
**************

* Menu:

* Copying::
* Installing RHIDE::
* What is RHIDE?::
* Requirements::
* Getting started::
* The program GPR2MAK::
* The program GPREXP::
* First steps with RHIDE::
* Environment variables::


File: rhide.inf,  Node: Copying,  Next: Installing RHIDE,  Prev: Introduction,  Up: Introduction

1.1 Copying
===========

RHIDE is copyright by Robert Ho"hne.  Parts of RHIDE are copyright by
other people as noted in the source files.

  This program is free software; you can redistribute it and/or modify   it
under the terms of the GNU General Public License as published by   the
Free Software Foundation; either version 2 of the License, or   (at your
option) any later version.

  This program is distributed in the hope that it will be useful,   but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the   GNU General
Public License for more details.

  You should have received a copy of the GNU General Public License   along
with this program; if not, write to the Free Software   Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

additional permission:

 As a special additional permission, the library librhuti which is  in the
source tree of the RHIDE sources in the librhuti/  subdirectory can be
distributed alone freely without any  restrictions.  It is not limited to
use under the terms of the GPL  or LGPL.  For more information see the
file COPYING.RHU in that  subdirectory.

Non-binding request

If you distribute RHIDE together with other products it would be nice, if
you could give me a note about it so I'll be informed. Of course you can
send me a copy of the distribution medium but this is not required.

For contacting the author send electronic mail to

<robert.hoehne@gmx.net>

or paper mail to

Robert Ho"hne
Am Berg 3
D - 09573 Dittmannsdorf
Germany


File: rhide.inf,  Node: Installing RHIDE,  Next: What is RHIDE?,  Prev: Copying,  Up: Introduction

1.2 Installing RHIDE
====================

There are two archives

`rhide??b.zip'
     This contains the executables and the documentation for RHIDE running
     on DJGPP

`rhide-?.?-1.i386.rpm'
     This is a RPM package with the binaries of RHIDE for GNU/Linux.
     (currently they are built on SuSE 8.0)

`rhide??s.zip'
     This contains the sources of RHIDE for DJGPP.

`rhide-?.?-1.src.rpm'
     This is a RPM package with the sources of RHIDE for GNU/Linux.


NOTE: The sources for the GNU/Linux and DJGPP versions are of course in
its core the same, there are only differences in the directory structure
and maybe in some preconfigured files. But in general both archives can be
used on both systems (after some cosmetic changes).

where `??' in the above filenames stand for the digits of the actual
version of RHIDE which is as of writing this version 1.5 which leads to
`15'.

These archives can be found at
The RHIDE home page (http://www.rhide.com)
or at any ftp site, which mirrors DJGPP. On that DJGPP mirrors are of
course only the DJGPP archives available.

RHIDE is now also hosted on sourceforge, from where you can download also
the latest versions.
RHIDE on sourceforge (http://sourceforge.net/projects/rhide)
To install these archives, unzip them in the DJGPP-root directory, like
any other DJGPP package.

To install the GNU/Linux RPM packages, use your favorite install program
(most Linux distributions allow to install RPM packages) or install it
with the Redhat package manager itself.


File: rhide.inf,  Node: What is RHIDE?,  Next: Requirements,  Prev: Installing RHIDE,  Up: Introduction

1.3 What is RHIDE?
==================

What is RHIDE? RHIDE is an Integrated Development Environment for
compiling C- or C++-files (GNU-Assembler source files also supported) in
an environment, which has an integrated editor where you can edit your
source files and a project management, where you can define, which files
are needed to build a program or a library.

For what stands the name RHIDE? This has nothing mystic in it. It comes
simply from my initials RH and IDE (Integrated Development Environment).

RHIDE works like the IDE from Borland, which comes with Turbo C++ 3.1 and
is written with the Turbo Vision library, which I have ported to use with
DJGPP. Features of this IDE are:
   - Syntax highlighting is now supported and you can customize all colors
     on your desktop.

   - You can redirect the stdout and stderr from your program to a window
     in the IDE.

   - You can generate a makefile for your project, so you can build the
     program also without the IDE.

   - Most of the commandline options of GCC can be customized.

   - You can also build a library instead of an executable.

   - When saving a file to disk, the modification time of this file will
     be set to the time of the last modification in the editor.

   - You can interrupt external programs (the compilers or your program)
     by pressing <Ctrl+C>  or <Ctrl+Break>  which are ignored by the IDE.
     That means also, that you cannot interrupt the IDE by pressing these
     keys. If you want to enable this, compile the IDE without the
     `-DNO_BREAK'-flag.

   - The integrated debugger. You can debug your program within RHIDE by
     executing each source line of your code and evaluating/modifying
     variables and expressions.

   - You can define another compiler to compile your source files.


In addition to RHIDE I have included a stand-alone debugger (called
`rhgdb.exe'), which is GDB 5.0 with a Turbo Vision user interface.


File: rhide.inf,  Node: Requirements,  Next: Getting started,  Prev: What is RHIDE?,  Up: Introduction

1.4 Requirements
================

RHIDE works under and is compiled with DJGPP V2.  To compile your programs
you need a working GCC-configuration, that means, GCC must be found in your
path. Because DJGPP works only under DPMI you need a DPMI-Server.  If you
run it under Windows 3.1(1)/95, you have DPMI. Under MS-DOS you need
either a memory-manager, which give you DPMI-services (I think QEMM is it,
EMM386 has no DPMI-support), or you use CWSDPMI, the free DPMI-server from
Charles W. Sandmann, which you can find on SimTel-ftp-sites. I use it and
it works fine for me.

Running RHIDE under Windows NT or Windows 2000 should work, since I have
W2000 and developing there.

The builtin editor uses a simple heuristic to check, if a file is in UNIX
or DOS text format. It checks the first 1024 Bytes, and if there is a lf
without a cr, all lf's will be translated to cr/lf's. This is done at
first only in memory. But if you save your file to disk, it will be saved
in DOS text format.

RHIDE will work correctly only with DJGPP version 2.03 or higher and please
if you are running under W2000 (or XP) get always the latest DJGPP, since
there are many efforts to make DJGPP working on these systems.


File: rhide.inf,  Node: Getting started,  Next: The program GPR2MAK,  Prev: Requirements,  Up: Introduction

1.5 Getting started
===================

To run RHIDE type
     rhide [options] ['file-name']
or
     rhide [options] 'project-name' [options]
Here stands 'file-name', for a file, which you want to open at start up.
If it has no suffix it is assumed to be a 'project-name'.

'project-name' stands for a name of your project. If you don't type it,
RHIDE searches the current directory for a project file. If there exists
only one, it will be opened. If there exist more than one or none, RHIDE
will not open a project, you have to do it manually.  *note Open project::.

Possible options are for debugging RHIDE itself *note Debugging RHIDE::.
If no project was open, you will see an empty desktop.  At the top-line of
the screen you can see the menu. This is activated by pressing <F10>  or
by clicking with the mouse at this line.  Alternatively you can press
<Alt> plus the highlighted character of a pull-down menu, e.g. to activate
the _File_ menu, press `Alt+F'. At the bottom is the status line with some
hotkeys and their functions displayed.

Other options are:

`-H'
     Do not install the console switch handler, which saves/restores the
     modified keyboard layout. This options works only when running under
     GNU/Linux.

`-S'
     Tells RHIDE to use only 16bit access to the video memory under DJGPP,
     because some video cards cannot handle the 32bit access.

`-E'
     Dump all variables known to RHIDE (the builtins and the real
     environment variables) to `stderr' end exit.

`-C'
     Disable the handling of SIGINT

`-y'
     Use long filenames (only under Windows 95)

`-n'
     Do not use long filenames (only under Windows 95)

`-c'
     Do not convert the case of any file name

`-h'
     Show a short help about all the possible options.

`-b'
     Use BIOS calls for setting and resetting the behavior of the 7th bit
     in a color attribute (blinking or 16 background colors) instead of
     direct outputs to the VGA registers.

`-p'
     Normally RHIDE converts all the num-pad keys to the equivalent keys
     on the other keyboard (of course also by checking the <NumLock> key).
     With this switch you can disable this.

`-G n'
     Select which method is used for swapping the display. Currently there
     are two, little different functions implemented.  If you have
     problems with display swapping when in graphics mode, try to use
     another method and see if that helps.

`-K'
     Tell RHIDE, to use real BIOS calls for it's keyboard input. This is
     needed sometimes, when you have installed some special keyboard
     drivers.

`-M'
     This tells RHIDE to not to install the mouse callback function for
     getting the mouse events. Instead of this RHIDE calls the mouse BIOS
     functions for getting any event of the mouse. This option should be
     used mainly when running under Windows NT (but there I select this
     now automatically by default)


At the upper right corner of the screen you can see the free
virtual/physical memory (where M stands for Megabytes, K for Kilobytes and
B for Bytes), if enabled *note Preferences::.

If you try to open a project, which does not exist, RHIDE will create a
new one. For the default setting in the newly created project, RHIDE will
look first in some directories if there exists an options file for RHIDE
called `rh_opt.gpr'. If this file is found, the options from that file are
used for the new project, otherwise the in RHIDE hardcoded defaults are
used.

* Menu:

* Supported languages::
* Debugging RHIDE::


File: rhide.inf,  Node: Supported languages,  Next: Debugging RHIDE,  Prev: Getting started,  Up: Getting started

1.5.1 Supported languages
-------------------------

There is also support for multiple languages. For this RHIDE uses the GNU
gettext library. With this lib it is possible to support multiple
languages without changing any code of RHIDE, when adding a new language.

There are two ways for selecting the language. Either you set the
environment variable LANGUAGE to the language you want or give it as a
commandline argument to RHIDE. The normal way is by setting LANGUAGE. If
you have installed RHIDE as described in the `readme', you should specify
the language with a two character shortcut. Because of my limited time,
the translations to are not synronized with RHIDE.

When you want to specify the language on the commandline, use the following
syntax:
     rhide -L LANGUAGE
where LANGUAGE represents the language code.

If you do not specify any language, English is assumed.

Because it was not possible to get all the translations at the time when
RHIDE was ready, I included only the message files (that are the files
with the `.mo' suffix) as they are ready in the binary archive. That means
that it is possible that you will see some strings in English instead of
your language.


File: rhide.inf,  Node: Debugging RHIDE,  Prev: Supported languages,  Up: Getting started

1.5.2 Debugging RHIDE
---------------------

I have added some commandline options to debug the IDE itself. These
options are the following:

`-dt'
     Do not remove the temporary files which the IDE creates. The names of
     these files will be printed to stderr.

`-dc'
     Print to `stderr' the commands which the IDE executes.

`-dd'
     Print to `stderr' how the IDE checks the dependencies.

`-df'
     Print to `stderr' how the IDE searches for files.

`-ds'
     Print to `stderr' how the IDE expands the specs.

`-da'
     Turns on all of the above


You can also combine these options like `-dct', which is the same as `-dc
-dt'.

To examine this debugging information, it is the best to use the redir
command, to redirect the stderr to a file like
     redir -e err rhide -da project
which will redirect stderr to the file `err'.

Under GNU/Linux use the following command:
     rhide -da project 2>err

Each of the letters above (after `-d') can be prefixed by a `-' or a `+'
to explicitely turn the flag on or off.  For instance `-dc' and `-d+c' are
the same and `-da-c' selects all debugging options except the `-dc' switch.

If you want to supply certain switches for RHIDE as a default, you may put
them into the environment variable `$(RHIDEOPT)'.  The contents of this
variable is used before the the real commandline is parsed.  That means
you can overwrite the switches from the environment variable.


File: rhide.inf,  Node: The program GPR2MAK,  Next: The program GPREXP,  Prev: Getting started,  Up: Introduction

1.6 The program GPR2MAK
=======================

This program can be used to create a makefile from your project-file.  It
does exactly the same as the function which is selectable from the RHIDE
menu *note Write Makefile::.

In RHIDE you have only the possibility to say, if in the generated
makefile all dependencies should be included or not. With `gpr2mak' you
can tell also to create recursively all the needed makefiles. This makes
sense only if you have included other projects in your project.

Here are the possible commandline options for `gpr2mak'.
`-d'
     Include all dependencies in the makefile

`-d-'
     Include only the needed dependencies to create the final program or
     library.

`-r'
     Call `gpr2mak' recursively, if there are other projects part of the
     project.

`-r-'
     Do not call `gpr2mak' recursively.

`-o OUTFILE'
     Use `OUTFILE' instead of the project name (with the suffix `.mak') as
     the created makefile. If you want to write the makefile to `stdout',
     use `-' as `OUTFILE'.


And the complete syntax for calling `gpr2mak' is also:

     gpr2mak [-d[-]] [-r[-]] [-o OUTFILE] project-file

If you give no options, (the project-file must be given), `gpr2mak'
assumes the flags `-d- -r-' as default.


File: rhide.inf,  Node: The program GPREXP,  Next: First steps with RHIDE,  Prev: The program GPR2MAK,  Up: Introduction

1.7 The program GPREXP
======================

The main reason for this program was the need for me to have project files
which should work on different computers and also on different systems
(like DJGPP and GNU/Linux). The task for this program is to convert as
most as possible absolute filenames stored in the project file to use
variables so the project can be used by simply changing some variables
outside RHIDE.

GPREXP replaces all directories, which are used also in the dialogs like
the directory customizations for include file searches, by the variables
if they are known there.


File: rhide.inf,  Node: First steps with RHIDE,  Next: Environment variables,  Prev: The program GPREXP,  Up: Introduction

1.8 First steps with RHIDE
==========================

Here I will give you some instructions for the first steps to get contact
with RHIDE.

* Menu:

* What are these so called projects::
* Creating your first project::


File: rhide.inf,  Node: What are these so called projects,  Next: Creating your first project,  Prev: First steps with RHIDE,  Up: First steps with RHIDE

1.8.1 What are these so called projects
---------------------------------------

A project for RHIDE is a file, which contains all the needed information
required to build a program or library from one or more source files. Also
all the other options which belong to the look and feel of your desktop
are stored there.

In general RHIDE creates for each project two files. One for the project
itself (it has the suffix `.gpr') and one for the desktop related things
(it has the suffix `.gdt').

To create a new project either run rhide with a not existing project name
as argument or open within RHIDE a project by selecting a name which is
not existent.


File: rhide.inf,  Node: Creating your first project,  Prev: What are these so called projects,  Up: First steps with RHIDE

1.8.2 Creating your first project
---------------------------------

For the next instructions I will assume, that you want to create a project
for the standard "Hello world" program in the current directory. Create now
the new project by running

     rhide hello

and you will see an empty desktop and one window opened, the project
window.  This window will show you that there is no file defined for your
project.  If the project window is selected, (it has a double frame), then
hit there <Ins> and you will be prompted for adding an item to your
project.

Type in the input line now `hello.c' and hit <ENTER>. Now hit <ESC> to
leave the dialog. You will see now, that the project window contains a
line with `hello.c'.

Now hit <ENTER> on that filename and you will get an empty editor window
named `hello.c' prepended by the current directory. In this editor window
you can type now the program:

#include <stdio.h>

int main()
{
  printf("Hello world!\n");
  exit(0);
}

Now you can select from the Run-menu the Run entry (or use the hotkey
`Ctrl+F9') and RHIDE will do all the necessary steps to compile, link and
execute the program.

If everything was correct (no typing errors) or some other error, you will
get a message box where RHIDE tells you, that the program exited with an
exit code of 0. (This is the value, which you have specified in your
program above in the `exit(0);' statement) This box you can close with
<ENTER> or <ESC>.

To see the output of the program, you can switch now to the user screen
with `Alt+F5' or from the menu (Windows/User screen).  To return back to
RHIDE hit any key.


File: rhide.inf,  Node: Environment variables,  Prev: First steps with RHIDE,  Up: Introduction

1.9 Environment variables
=========================

RHIDE uses many environment variables for it's configuration and behavior.
This includes also some standard variables, which are used by the in RHIDE
linked libraries. These are:

$(LOCALEDIR)
     This should point to the directory, where your locale files are
     stored. If it is not set, RHIDE tries to get the system default
     value, which is for GNU/Linux `/usr/share/locale' and for DJGPP
     `$(DJDIR)/share/locale'.

$(INFOPATH)
     This is a pathlist of directories, where your INFO files are stored.
     If not set, RHIDE tries the standard directory, which should for
     GNU/Linux `/usr/info' and for DJGPP `$(DJDIR)/info'.

$(RHIDEOPT)
     This variable can be used, to define global RHIDE commandline
     options. The value of this variable is used, as if the contents are
     given on commandline before any of the real commandline options.
     Which means, they can be overwritten on the commandline.

$(ESCDELAY)
     This variable is used _ONLY_ in the GNU/Linux version, where it
     defines the delay after pressing <ESC> to wait for another keypress
     to simulate an <Alt> keycode. The value is given in milliseconds and
     defaults to 1000.

$(LANGUAGE)
     This variable is used to specify the language, in which RHIDE should
     communicate with you. The contents of this variable should be the ISO
     2-character code of your country.

$(RHIDE_SHARE)
     With this variable you can tell RHIDE where it should look at first
     for it's configuration files.


* Menu:

* Setting environment variables for RHIDE::
* Where to store the environment file::


File: rhide.inf,  Node: Setting environment variables for RHIDE,  Next: Where to store the environment file,  Prev: Environment variables,  Up: Environment variables

1.9.1 Setting environment variables for RHIDE
---------------------------------------------

There are some different ways for setting environment variables for RHIDE.
One of them is to set them like any other environment variable on your
system. But this means that these variables are visible also by all the
other programs.

When using the DJGPP version, you can set them in your `djgpp.env' file
either at the beginning as global variables for any DJGPP program or in a
special section `[RHIDE]' only for RHIDE. Please read the doc about the
format of the `djgpp.env' file for more information.

Derived from the technique used on DJGPP for setting environment variables
which are visible only for DJGPP programs, I have added in RHIDE a similar
thing. RHIDE can read environment variables also from a file called
`rhide.env'.

The syntax of this file is very simple. Each line has one of the following
syntax:
VARIABLE=CONTENTS
     Which means, that the environment variable `VARIABLE' should become
     the contents `CONTENTS' where `CONTENTS' can be also a variable,
     which is expanded at runtime.

include OTHER_ENV_FILE
     Such a line tells RHIDE to read in at that point the file
     `OTHER_ENV_FILE' as environment file. The name `OTHER_ENV_FILE' can
     be also an environment variable, which is expanded before reading the
     file.

     The word `include' may optionally also start with a dash `-', to be
     compatible with GNU make.

# comments
     A line, which begins with a `#' means, that this line is ignored.  It
     can be used for you to write there some comments about that file.

export VARIABLE=CONTENTS
     This is the same syntax as without the `export' at the beginning of
     the line but it tells RHIDE to place the variable also in the
     environmen so also other programs (called by RHIDE) can see this
     variable.


RHIDE is very powerful in handling the environment variables. Most of it
is taken from the behavior of GNU make. On this great things depend, that
a variable name can consist also of other variables, which are computed
when the variable should be expanded.

In general, you can use the `rhide.env' files very similar to makefiles
for GNU make if you think there only about the variables and functions
from GNU make.

As an example of this, you can take a look on the RHIDE sources in the
`rhide.env' files. There I'm using, for instance, the RHIDE builtin
variable $(RHIDE_OS) to define the libraries, which are linked in RHIDE
depending on the operating system where RHIDE is built.

An other example is distributed with RHIDE in it's binary archives as
`rhide_.env' which is commented and should be in a directory
`.../share/rhide/' where the `...' stand for a different directory on
different OS's. (on DJGPP it is %DJDIR% and on GNU/Linux it is /usr/local )

Here is a part of the environment file `rhide.var' in the main RHIDE
source directory (which is included by `rhide.env' with
include $(RHIDESRC)/rhide.var

RHIDE_OS_LIBS_Linux=ncurses gpm m
RHIDE_OS_LIBS_DJGPP_idegc.exe=dbg
RHIDE_OS_LIBS_DJGPP=$(RHIDE_OS_LIBS_DJGPP_$(MAIN_TARGET))
RHIDE_OS_LIBS=$(RHIDE_OS_LIBS_$(RHIDE_OS))

The RHIDE builtin linker spec *note Builtin compiler specs:: includes also
$(RHIDE_OS_LIBS) when linking. Since RHIDE can be built on DJGPP and
GNU/Linux and on these different operating systems I have to link
different libraries.

Description of the above: When linking on DJGPP the file `idegc.exe'
(which is RHIDE) I have to include (in addition to all the other
libraries) `libdbg.a', which contains all the DJGPP specific debugging
functions. This is done at runtime by expanding RHIDE_OS_LIBS. Here are
the steps, how RHIDE expands the variable RHIDE_OS_LIBS:

$(RHIDE_OS_LIBS)                      ->  $(RHIDE_OS_LIBS_$(RHIDE_OS))
$(RHIDE_OS_LIBS_$(RHIDE_OS))          ->  $(RHIDE_OS_LIBS_DJGPP)
$(RHIDE_OS_LIBS_DJGPP)                ->  $(RHIDE_OS_LIBS_DJGPP_$(MAIN_TARGET))
$(RHIDE_OS_LIBS_DJGPP_$(MAIN_TARGET)) ->  $(RHIDE_OS_LIBS_DJGPP_idegc.exe)
$(RHIDE_OS_LIBS_DJGPP_idegc.exe       ->  dbg

In a similar way it expands on GNU/Linux to

$(RHIDE_OS_LIBS) -> ncurses gpm m


File: rhide.inf,  Node: Where to store the environment file,  Prev: Setting environment variables for RHIDE,  Up: Environment variables

1.9.2 Where to store the environment file
-----------------------------------------

RHIDE searches some known directories for the file `rhide.env' (and of
course also other there defined included files).

At first it searches for a global file in `/usr/local/share/rhide' (on
GNU/Linux) or `$(DJDIR)/share/rhide'. Then it searches in `$(HOME)' and at
last in the current directory.

RHIDE does not only a search, it also loads the file, if it was found in
any of the above mentioned directories. That means, if in all these
directories `rhide.env' exists, it is loaded. This has the effect, that
you can define some global defaults which can be overwritten with a
`rhide.env' in the current or your home directory.

If you need a sample usage of `rhide.env', please take a look at the RHIDE
sources.


File: rhide.inf,  Node: General information about how RHIDE works,  Next: Description of the pull-down menus,  Prev: Introduction,  Up: Top

2 General information about how RHIDE works
*******************************************

In this section I will give you some comments about the concept of RHIDE.
RHIDE works with the GNU compilers. As a result of this, most of the
options are fixed and they are mostly also specific only for this
compiler. If I speak about compilers, I mean GCC, which calls the right
compilers for you.  (`cpp' for preprocessing your input files, `cc1' for
compiling C programs, `cc1plus' for compiling C++ programs and `as' for
compiling assembler files and so on)

Selecting the right compiler for a specific file is done by RHIDE in the
same way as GCC does it. It looks for the extension of the file and
determines the language of this file.

* Menu:

* Known suffixes::
* Syntax of arguments::
* Running under Windows 95::
* Running under OS/2::
* Running under Windows NT::
* Running under GNU/Linux::
* General use of RHIDE::


File: rhide.inf,  Node: Known suffixes,  Next: Syntax of arguments,  Prev: General information about how RHIDE works,  Up: General information about how RHIDE works

2.1 Known suffixes
==================

The list of the known suffixes is taken from GCC. Remember the fact, that
GCC and RHIDE check the suffixes in a case sensitive way especially when
running under Windows 95 *note Running under Windows 95::.

   * Valid suffixes for C source files are
    `.c'
          Normal C source file

    `.i'
          C source file, which doesn't need the preprocessor


   * Valid suffixes for C++ source files are
    `.cc'
    `.cpp'
    `.cxx'
    `.C'
          Normal C++ source file

    `.ii'
          C++ source file, which doesn't need the preprocessor


   * Valid suffixes for Objective C source files
    `.m'
          Normal Objective C source file


   * Valid suffixes for Pascal source files
    `.p'
    `.pas'
          Normal Pascal source file


   * Valid suffixes for object files
    `.o'
          Normal object file

    `'
          any other suffix, which has no predefined meaning


   * Valid suffixes for libraries
    `.a'
          Normal library file


   * Valid suffixes for executable files
    `.exe'
          Normal executable file for MS-DOS

    `.'
          No suffix means the raw COFF image of an executable file. These
          can be handled only by programs, which know about this format.
          (DJGPP programs know this)


   * Valid suffixes for include files
    `.h'
          Normal include files

    `.hpp'
          Some people told me, that this suffix should also be treated as
          a valid suffix for header files, so I applied it.

    `'
          Theoretically there is no restriction for such a suffix, but
          RHIDE searches and finds only files with the above suffixes in
          the specified directories *note Include directories::.


   * Valid suffixes for Assembler source files
    `.s'
          Normal Assembler source file

    `.S'
          Assembler source file, which must be preprocessed by `cpp'. If
          you have such files, there is a problem, when long filenames are
          not enabled (default in MS-DOS), because RHIDE converts all
          filenames in this situation to lower case. But you can add to
          the local options for this item *note Local options:: the
          commandline argument -X ASSEMBLER-WITH-CPP, to tell `GCC' to
          preprocess this file first before assembling it.


   * Valid suffixes for Fortran source files
    `.f'
    `.for'
          Normal Fortran source files

    `.F'
    `.fpp'
          Fortran source files which need not to be run through `cpp'.

   * Valid suffixes for ADA source files
    `.adb'
          Normal ADA source file

    `.ads'
          ADA specs file

   * Valid suffixes for NASM
    `.nsm'

    `.asm'
          Normal NASM source files.



File: rhide.inf,  Node: Syntax of arguments,  Next: Running under Windows 95,  Prev: Known suffixes,  Up: General information about how RHIDE works

2.2 Syntax of arguments
=======================

In RHIDE you can specify some arguments to other programs. These arguments
must be a space separated list of strings. If you want to have one or more
spaces as part of an argument, you have to enclose the whole argument in
single or double quotes.


File: rhide.inf,  Node: Running under Windows 95,  Next: Running under OS/2,  Prev: Syntax of arguments,  Up: General information about how RHIDE works

2.3 Running under Windows 95
============================

With DJGPP 2.01 were many bugs fixed, which caused problems under Windows
95 with the long (and case sensitive) filenames. Now all filenames are
shown in lower case, except they contain characters with different case.
That means, all normal 8+3 DOS filenames, which are normally reported in
Windows 95 in upper cases, are automatically converted to lower case. For
more information about filename conversion look at the libc reference.

If you really need the filenames exactly as they are reported by the OS,
you can use the -C switch *note Getting started::.

You can also run more than one instance of RHIDE at once, in several
DOS-boxes, because RHIDE creates and uses its own temp directory every
time it starts to disable conflicts, when running multiple compilers at
the same time. This is done by creating a directory in the directory
pointed at by the environment variables %TMPDIR%, %TEMP% or %TMP%, in that
order, until one of them exists. If none of them exists, the current
directory is assumed. Then RHIDE puts the value of this directory into the
environment variable %TMPDIR%. After leaving RHIDE this directory will be
removed, if it is empty.


File: rhide.inf,  Node: Running under OS/2,  Next: Running under Windows NT,  Prev: Running under Windows 95,  Up: General information about how RHIDE works

2.4 Running under OS/2
======================

Because I have no access to OS/2, I cannot say anything about it. But some
people said that they run RHIDE under OS/2 successfully, but there must be
the exclusive mouse access to the DOS window disabled.


File: rhide.inf,  Node: Running under Windows NT,  Next: Running under GNU/Linux,  Prev: Running under OS/2,  Up: General information about how RHIDE works

2.5 Running under Windows NT
============================

I haven't access to NT so I cannot say something about running RHIDE on
this OS.


File: rhide.inf,  Node: Running under GNU/Linux,  Next: General use of RHIDE,  Prev: Running under Windows NT,  Up: General information about how RHIDE works

2.6 Running under GNU/Linux
===========================

Since RHIDE is now available also for GNU/Linux here some hints. In general
you will get the best results when you have installed RHIDE as a setuid
root program. I know, this might be a security problem but I have tried to
make it as secure as possible. After getting acces to the screen and the
keyboard RHIDE will switch back to your normal rights and does not use
root rights any more. It does not write any data or modify any file on
disk with root rights (except you are running as root of course).

The reason for this is the rudimentary support for fast access to the
screen and the totally hided acces to the keyboard in the Linux kernel.
Additionally when you want to use the dual monitor debugging feature of
RHIDE this is also needed, because RHIDE needs in that case access to the
ports of your monochrome video card.

Running RHIDE under X-Window is not full supported (but it is possible).
There are several reasons for this. The first is, that RHIDE uses in that
case only terminal functions for input and output. That means it depends
completetly on your terminfo database and these are (at least for me) in
some cases totally wrong. You can see this mostly that RHIDE does not
handle correct the keyboard. Other programs which use ncurses know this
also and have there own hardcaded patches but I do not want to do so.

To fix the keyboard conflicts when running in a xterm, I distribute little
modified terminfo file `/usr/local/share/rhide/xterm-rhide' which you can
place in `/usr/lib/terminfo/x' or when you have no root access you can
place it also in `$HOME/.terminfo/x'.  And then to use this file simply
set the environment variable to this new terminal with
  export TERM=xterm-rhide
before running RHIDE in the xterm.

An other alternative is to run RHIDE in a rxvt terminal but there you have
to set also explicitely the TERM variable, because it is set mostly to
xterm-color.
  export TERM=rxvt


File: rhide.inf,  Node: General use of RHIDE,  Prev: Running under GNU/Linux,  Up: General information about how RHIDE works

2.7 General use of RHIDE
========================

* Menu:

* Creating a program::
* Creating a library::
* Saving/Loading the options::


File: rhide.inf,  Node: Creating a program,  Next: Creating a library,  Prev: General use of RHIDE,  Up: General use of RHIDE

2.7.1 Creating a program
------------------------

For creating a program, RHIDE allows you to define multiple source files
which should be compiled and linked to your final program. This is done by
creating a project. In this project you insert your source files (and not
all the include files).

After a source file (which is inserted in your project) compiled at least
once, RHIDE knows about all dependencies of this file, so this file will
be compiled again only, if one of the include files have changed.

* Menu:

* Creating a program without a project::


File: rhide.inf,  Node: Creating a program without a project,  Prev: Creating a program,  Up: Creating a program

2.7.1.1 Creating a program without a project
............................................

Because of many requests of users I made RHIDE to work also without using
a project. This may be good, if you have a single file, but if your
program should be build from more than one file I suggest you to use a
project.

If you have only one editor window opened, the name of the resulting
program is taken from the name of the source file by removing the suffix
and on DJGPP appending `.exe'.

If you have more than one files opened, I saw no other way for determining
the name of the produced program, than naming it `aout' (on DJGPP
`aout.exe').


File: rhide.inf,  Node: Creating a library,  Next: Saving/Loading the options,  Prev: Creating a program,  Up: General use of RHIDE

2.7.2 Creating a library
------------------------

You can also create libraries (a collection of object files, which can be
linked with other programs) with RHIDE. The way for doing this is very
simple. Because RHIDE knows about the meaning of file suffixes, you can
change the name of the main target *note Main targetname:: to have a suffix
`.a' and that's all. Now RHIDE will run `ar' instead of linking.


File: rhide.inf,  Node: Saving/Loading the options,  Prev: Creating a library,  Up: General use of RHIDE

2.7.3 Saving/Loading the options
--------------------------------

RHIDE supports two different ways for saving the options which you have
customized.

The first one (which I prefer) is the use of the so called default
project. This is the project `rhide.gpr' and must be located in the same
directory where `rhide.exe' is. To create or modify this default project
change to that directory (normally %DJDIR%/bin) and type there

     rhide rhide

Now change any options you want and exit RHIDE. From now on these options
are used for any newly created project or when running RHIDE without a
project.

The second way is to save your options to a project file *note Save
options:: or to load them from any existing project file *note Load
options::.


File: rhide.inf,  Node: Description of the pull-down menus,  Next: Detailed description of some parts of RHIDE,  Prev: General information about how RHIDE works,  Up: Top

3 Description of the pull-down menus
************************************

This chapter describes the pull-down menus and all their sub-menus.  The
main menu bar, the topmost line of the screen, is selected with the hotkey
<F10>  or by clicking with the mouse at this line. You can walk through
the menu with the cursor keys and a menu entry is selected with <ENTER>  or
by clicking with the mouse on it.

* Menu:

* System menu::
* File::
* Edit::
* Search::
* RUN::
* Compile menu::
* Debug::
* PROJECT::
* Options::
* Windows::
* Help submenu::


File: rhide.inf,  Node: System menu,  Next: File,  Prev: Description of the pull-down menus,  Up: Description of the pull-down menus

3.1 System menu
===============

This menu has its name only that one can speak about it. The symbol for
this menu is the leftmost symbol in the menu bar.  <Alt+SPACE> selects
this menu.

* Menu:

* About::
* Bug report::
* FSDB::
* GREP::
* GDB::
* Refresh Desktop::
* Calculator::
* Puzzle::
* Calender::
* ASCII table::


File: rhide.inf,  Node: About,  Next: Bug report,  Prev: System menu,  Up: System menu

3.1.1 About
-----------

This brings up a window with information about the author and the version
of RHIDE.


File: rhide.inf,  Node: Bug report,  Next: FSDB,  Prev: About,  Up: System menu

3.1.2 Bug report
----------------

This menu entry opens an editor with some important information which
should be part of a bug report and where you can describe the problem.


File: rhide.inf,  Node: FSDB,  Next: GREP,  Prev: Bug report,  Up: System menu

3.1.3 FSDB
----------

With this menu item you can call the FSDB debugger, which comes with
DJGPP. But remember, this runs the debugger as an external program and it
is not integrated in RHIDE.


File: rhide.inf,  Node: GREP,  Next: GDB,  Prev: FSDB,  Up: System menu

3.1.4 GREP
----------

This is a very useful function. You can type the arguments for grep in the
input line, which will be shown, and after this the program grep is
called. The messages from grep are redirected to the message window *note
Message window::.


File: rhide.inf,  Node: GDB,  Next: Refresh Desktop,  Prev: GREP,  Up: System menu

3.1.5 GDB
---------

This is analog to the call of FSDB *note FSDB::.


File: rhide.inf,  Node: Refresh Desktop,  Next: Calculator,  Prev: GDB,  Up: System menu

3.1.6 Refresh Desktop
---------------------

This function is sometimes useful, if you had run your program and it
wrote some things to the screen (for redirecting `stdout' and `stderr'
from your program to a window in RHIDE *note Preferences::.)


File: rhide.inf,  Node: Calculator,  Next: Puzzle,  Prev: Refresh Desktop,  Up: System menu

3.1.7 Calculator
----------------

This brings up a dialog, where you can do some calculations. This dialog
is similar to the evaluate dialog *note Evaluate/Modify::, but it uses not
the feature of GDB, but it is a separate calculator.  For more information
see *Note Documentation for the editor: (setedit)Calculator.

There can be used also some of the standard functions like `log', `sin'
and so on and it can convert also integer values between different bases
(`hex', `oct', `dec').


File: rhide.inf,  Node: Puzzle,  Next: Calender,  Prev: Calculator,  Up: System menu

3.1.8 Puzzle
------------

This will open a small window, where you can play a little puzzle game.
The "stones" are moved with the cursor keys or by clicking with the mouse
on it.


File: rhide.inf,  Node: Calender,  Next: ASCII table,  Prev: Puzzle,  Up: System menu

3.1.9 Calender
--------------

This will open a little calender. With the cursor keys <Up> and <Down> you
can switch to the next/previous month or click with the mouse on the small
symbols in the upper corners.


File: rhide.inf,  Node: ASCII table,  Prev: Calender,  Up: System menu

3.1.10 ASCII table
------------------

This will open a window with all the ASCII characters. Move around with
the cursor keys or press any key to select any wanted character.  In the
bottom line you will see the the character and the value of it (decimal
and hexadecimal). The decimal value can be used to create that character
for instance in the editor by holding the <Alt> key down and typing the
value on the numeric key pad.


File: rhide.inf,  Node: File,  Next: Edit,  Prev: System menu,  Up: Description of the pull-down menus

3.2 File
========

In this menu you can find functions, which deal with files, like open,
close, save and so on.

* Menu:

* Open::
* New::
* Save::
* Save as::
* Save all::
* DOS Shell::
* Exit::


File: rhide.inf,  Node: Open,  Next: New,  Prev: File,  Up: File

3.2.1 Open
----------

Brings up the file-open dialog, where you can select a file to open
(hotkey <F3> ). This dialog contains an input line for the filename, a
list of filenames, an information window and the buttons for opening and
canceling.

In the filename input line you can type directly the file, which you want
to open or you can type any mask to list only some files. The default mask
is `*.cc', but you can change this to anything and your last typed mask is
stored as the default mask for the next use. There is also a history of
your previous typed inputs available. This is selected when you hit the
down key or click at the small symbol at the end of the input line with
your mouse.

The list of filenames shows all the files that correspond to the mask.  If
this list is selected you can choose a file with the cursor keys, or you
can type the first letters of the filename you want, and the bar is
located at the first file, which has these letters as the first
characters. To open the file simply press <ENTER> or double click with the
mouse on it.

Below the list of filenames there is a small window with information about
the selected file (complete path, size, modification time).

To leave the dialog without opening a file press <ESC> .


File: rhide.inf,  Node: New,  Next: Save,  Prev: Open,  Up: File

3.2.2 New
---------

This is the menu entry for creating a new file to edit. This file gets the
title 'Untitled'. If you save or close it, you will be prompted for a new
name of this file by opening the file-open dialog.


File: rhide.inf,  Node: Save,  Next: Save as,  Prev: New,  Up: File

3.2.3 Save
----------

Save the file in the current editor-window to disk. If the name of the
current file is 'Untitled' you will be prompted for a new name. <F2> is
the hotkey for this function.  The modification of the file on disk is set
to the time of the last modification of this file and not to the time when
saving to disk.

If the file was not modified, it is not saved!!


File: rhide.inf,  Node: Save as,  Next: Save all,  Prev: Save,  Up: File

3.2.4 Save as
-------------

Save the file in the current editor-window to disk under a different name,
for which you will be prompted. For choosing the new name the file-open
dialog will be opened.


File: rhide.inf,  Node: Save all,  Next: DOS Shell,  Prev: Save as,  Up: File

3.2.5 Save all
--------------

Save all the editor files to disk. If they are not modified, they will not
be saved.


File: rhide.inf,  Node: DOS Shell,  Next: Exit,  Prev: Save all,  Up: File

3.2.6 DOS Shell
---------------

This executes a DOS-Shell. This is done by calling the program, which is
set in the environment variable COMSPEC. If this variable does not exist,
the program `c:/command.com' is executed.  To return to the IDE type
`exit' at the DOS-prompt. Before calling DOS, the program does a _Save
all_ *note Save all:: automatically.


File: rhide.inf,  Node: Exit,  Prev: DOS Shell,  Up: File

3.2.7 Exit
----------

Here you can quit the IDE. If there are any unsaved editor-files, you will
be prompted for saving them. (<Alt+X> is the hotkey.)


File: rhide.inf,  Node: Edit,  Next: Search,  Prev: File,  Up: Description of the pull-down menus

3.3 Edit
========

In this menu you can activate functions, which are related to the
integrated editor. Most of them have a hotkey.

* Menu:

* Undo::
* Redo::
* Cut::
* Copy::
* Paste::
* Show Clipboard::
* Clear::
* Copy to Windows clipboard::
* Paste from Windows clipboard::
* Expand all tabs::
* Compact text::
* Macro::


File: rhide.inf,  Node: Undo,  Next: Redo,  Prev: Edit,  Up: Edit

3.3.1 Undo
----------

This undoes your last change in the current editor-window.  <Alt+Backspace> is
the hotkey for this function.


File: rhide.inf,  Node: Redo,  Next: Cut,  Prev: Undo,  Up: Edit

3.3.2 Redo
----------

This does the reverse to undo *note Undo::. That means, it is the undo of
the undo.


File: rhide.inf,  Node: Cut,  Next: Copy,  Prev: Redo,  Up: Edit

3.3.3 Cut
---------

This _moves_ the selected text in the current editor-window to the
clipboard. (<Shift+Del> is the hotkey.)


File: rhide.inf,  Node: Copy,  Next: Paste,  Prev: Cut,  Up: Edit

3.3.4 Copy
----------

This _copys_ the selected text in the current editor-window to the
clipboard. (<Ctrl+Ins> is the hotkey.)


File: rhide.inf,  Node: Paste,  Next: Show Clipboard,  Prev: Copy,  Up: Edit

3.3.5 Paste
-----------

This inserts the selected text in the clipboard in the current
editor-window at the current cursor-position. (<Shift+Ins> is the hotkey.)


File: rhide.inf,  Node: Show Clipboard,  Next: Clear,  Prev: Paste,  Up: Edit

3.3.6 Show Clipboard
--------------------

This brings up an editor-window with the contents of the clipboard. The
contents of the clipboard will be lost, if you exit the IDE.


File: rhide.inf,  Node: Clear,  Next: Copy to Windows clipboard,  Prev: Show Clipboard,  Up: Edit

3.3.7 Clear
-----------

This erases the selected text in the current editor-window.


File: rhide.inf,  Node: Copy to Windows clipboard,  Next: Paste from Windows clipboard,  Prev: Clear,  Up: Edit

3.3.8 Copy to Windows clipboard
-------------------------------

This is the same function as *Note Copy::, but it uses the Windows
clipboard and works only, when running under Windows.


File: rhide.inf,  Node: Paste from Windows clipboard,  Next: Expand all tabs,  Prev: Copy to Windows clipboard,  Up: Edit

3.3.9 Paste from Windows clipboard
----------------------------------

This is the same function as *Note Paste::, but it uses the Windows
clipboard and works only, when running under Windows.


File: rhide.inf,  Node: Expand all tabs,  Next: Compact text,  Prev: Paste from Windows clipboard,  Up: Edit

3.3.10 Expand all tabs
----------------------

When selecting this menu entry, all real tabs (all characters with the
code `0x9') are expanded to as many spaces as defined as the tabsize *note
Preferences::.


File: rhide.inf,  Node: Compact text,  Next: Macro,  Prev: Expand all tabs,  Up: Edit

3.3.11 Compact text
-------------------

This function is the reverse to *Note Expand all tabs::. That means, RHIDE
tries to make as many as possible spaces (count is taken from the defined
tabsize) to real tabs.


File: rhide.inf,  Node: Macro,  Prev: Compact text,  Up: Edit

3.3.12 Macro
------------

Here is a submenu for handling macros. Currently there is only one
recordable macro available and it is NOT stored anywhere. That means it is
lost when you leave RHIDE and restart it. There is another way of using
macros *note Defining macros::.

* Menu:

* Record::
* Stop::
* Play::


File: rhide.inf,  Node: Record,  Next: Stop,  Prev: Macro,  Up: Macro

3.3.12.1 Record
...............

After selecting this function, all your keystrokes are recorded to
reproduce them later.

(<Shift+F10> is the hotkey.)


File: rhide.inf,  Node: Stop,  Next: Play,  Prev: Record,  Up: Macro

3.3.12.2 Stop
.............

This stops the recording of a macro.

(<Alt+F10> is the hotkey.)


File: rhide.inf,  Node: Play,  Prev: Stop,  Up: Macro

3.3.12.3 Play
.............

This executes the recorded macro.

(<Ctrl+F10> is the hotkey.)


File: rhide.inf,  Node: Search,  Next: RUN,  Prev: Edit,  Up: Description of the pull-down menus

3.4 Search
==========

Menu for searching and replacing strings in the editor-window. These
functions have also hotkeys.

* Menu:

* Find::
* Replace::
* Search again::
* Goto line::
* Jump to function::
* Next message::
* Previous message::


File: rhide.inf,  Node: Find,  Next: Replace,  Prev: Search,  Up: Search

3.4.1 Find
----------

Find a string in the current editor-window. You can type the string for
searching in an input line and you can also select, if the search is case
sensitive or not and to search for whole words only or not.

(<Ctrl+Q+F> is the hotkey.)


File: rhide.inf,  Node: Replace,  Next: Search again,  Prev: Find,  Up: Search

3.4.2 Replace
-------------

Find and replace a string in the current editor-window. This works in the
same way like searching text, but additionally you can give a string, with
which the found text will be replaced.

(<Ctrl+Q+A> is the hotkey.)


File: rhide.inf,  Node: Search again,  Next: Goto line,  Prev: Replace,  Up: Search

3.4.3 Search again
------------------

This function repeats the last search or replace operation.

(<Ctrl+L> is the hotkey,)


File: rhide.inf,  Node: Goto line,  Next: Jump to function,  Prev: Search again,  Up: Search

3.4.4 Goto line
---------------

After prompting for a line number (with range checking), the cursor will
be located at this line.

(<Ctrl+J> is the hotkey.)


File: rhide.inf,  Node: Jump to function,  Next: Next message,  Prev: Goto line,  Up: Search

3.4.5 Jump to function
----------------------

With this feature you can easily jump to the source line of a function to
edit or see it. This is only a heuristic by parsing your source file and
does not take the information from the debugging symbols.

After selecting it you will get a dialog, from where you can select the
function to which you want to jump.

(<Alt+F2> is the hotkey.)


File: rhide.inf,  Node: Next message,  Next: Previous message,  Prev: Jump to function,  Up: Search

3.4.6 Next message
------------------

This selects the next message in the message window *note Message window::,
but only, if there is a next message available.

(<Alt+F8> is the hotkey.)


File: rhide.inf,  Node: Previous message,  Prev: Next message,  Up: Search

3.4.7 Previous message
----------------------

This selects the previous message in the message window *note Message
window::, but only, if there is a previous message available.

(<Alt+F7> is the hotkey.)


File: rhide.inf,  Node: RUN,  Next: Compile menu,  Prev: Search,  Up: Description of the pull-down menus

3.5 Run
=======

In this menu you find the functions for running your program.

* Menu:

* Run::
* Step over::
* Trace into::
* Go to cursor::
* Program reset::
* Arguments::


File: rhide.inf,  Node: Run,  Next: Step over,  Prev: RUN,  Up: RUN

3.5.1 Run
---------

If your project-target is an executable, this will be run after doing a
*Note Make::. <Ctrl+F9> is the hotkey. If the build was not successful,
the program will not be started. The debugging functions are only
available if `-g' was used for compiling *note Syntax of arguments::.


File: rhide.inf,  Node: Step over,  Next: Trace into,  Prev: Run,  Up: RUN

3.5.2 Step over
---------------

This executes the code for exactly one source line. If there is a function
call at the current line this function is executed at once without
stepping through this function.

When using the <Shift>-key, RHIDE will NOT switch to the user screen when
executing the debuggee.

(hotkey <F8> or hotkey <Shift+F8> may be used.)


File: rhide.inf,  Node: Trace into,  Next: Go to cursor,  Prev: Step over,  Up: RUN

3.5.3 Trace into
----------------

This is the same as *Note Step over::, except when there is a function
call at the current line and for this function debugging information is
available, RHIDE steps into this function.

When using the <Shift>-key, RHIDE will NOT switch to the user screen when
executing the debuggee.

(hotkey <F7> or hotkey <Shift+F7> may be used.)


File: rhide.inf,  Node: Go to cursor,  Next: Program reset,  Prev: Trace into,  Up: RUN

3.5.4 Go to cursor
------------------

This will execute your program until the execution comes to the line,
where the cursor is. If the program is stopped at any other place by a
breakpoint the program will stop there and not at the cursor position.

When using the <Shift>-key, RHIDE will NOT switch to the user screen when
executing the debuggee.

(hotkey <F4> or hotkey <Shift+F4> may be used.)


File: rhide.inf,  Node: Program reset,  Next: Arguments,  Prev: Go to cursor,  Up: RUN

3.5.5 Program reset
-------------------

This 'kills' your debuggee at the current execution point without
executing any other code of your program

(<Ctrl+F2> is the hotkey.)

* Menu:

* Main function::


File: rhide.inf,  Node: Main function,  Prev: Program reset,  Up: Program reset

3.5.5.1 Main function
.....................

Here you can define the name of the `main' function of your program. This
is needed at least when debugging programs, (like written with GNU Pascal
or GNU Fortran), where the function of your main program is not `main'.

But you can use this also to debug your program at locations, which are
executed normally before `main' is called (for instance the global
constructors).


File: rhide.inf,  Node: Arguments,  Prev: Program reset,  Up: RUN

3.5.6 Arguments
---------------

Here you can type the arguments, which will be passed to your program when
you do a _run_ *note Run:: and *note Syntax of arguments::.


File: rhide.inf,  Node: Compile menu,  Next: Debug,  Prev: RUN,  Up: Description of the pull-down menus

3.6 Compile menu
================

Here are the functions to translate your source files and for updating your
project.

* Menu:

* Compile::
* Make::
* Link::
* Build all::


File: rhide.inf,  Node: Compile,  Next: Make,  Prev: Compile menu,  Up: Compile menu

3.6.1 Compile
-------------

Compile the file in the current editor-window or the selected entry in the
project-window if you are there. The IDE chooses automatically the correct
compiler, depending on the suffix of the file *note Known suffixes::.

(<Alt+F9> is the hotkey.)


File: rhide.inf,  Node: Make,  Next: Link,  Prev: Compile,  Up: Compile menu

3.6.2 Make
----------

This makes your project up to date. It works like MAKE on commandline with
a makefile. <F9> is the hotkey. The dependencies are checked for each item
of the project. These dependencies are automatically generated, if you
compile a file within the IDE.


File: rhide.inf,  Node: Link,  Next: Build all,  Prev: Make,  Up: Compile menu

3.6.3 Link
----------

This function has two different results depending on the type of your
project. If your project is an executable *note Known suffixes::, the
linker is started. But if it is a library, all the object files are taken
to build a library.


File: rhide.inf,  Node: Build all,  Prev: Link,  Up: Compile menu

3.6.4 Build all
---------------

This builds the project completely new with compiling and linking all of
the project-items.


File: rhide.inf,  Node: Debug,  Next: PROJECT,  Prev: Compile menu,  Up: Description of the pull-down menus

3.7 Debug
=========

This menu contains the functions for debugging your program. Most of them
have hotkeys and they are described in more detail later *note Debugging
with RHIDE::.

* Menu:

* Set/Reset Breakpoint::
* Evaluate/Modify::
* Watch an expression::
* Breakpoints::
* Disassembler window::
* Call stack::
* List of Functions::


File: rhide.inf,  Node: Set/Reset Breakpoint,  Next: Evaluate/Modify,  Prev: Debug,  Up: Debug

3.7.1 Set/Reset Breakpoint
--------------------------

*Note Setting a breakpoint::.

(<Ctrl+F8> is the hotkey.)


File: rhide.inf,  Node: Evaluate/Modify,  Next: Watch an expression,  Prev: Set/Reset Breakpoint,  Up: Debug

3.7.2 Evaluate/Modify
---------------------

*Note Evaluating the contents of variables::.

(<Ctrl+F4> is the hotkey.)


File: rhide.inf,  Node: Watch an expression,  Next: Breakpoints,  Prev: Evaluate/Modify,  Up: Debug

3.7.3 Watch an expression
-------------------------

*Note Watching the contents of variables::.

(<Ctrl+F7> is the hotkey.)


File: rhide.inf,  Node: Breakpoints,  Next: Disassembler window,  Prev: Watch an expression,  Up: Debug

3.7.4 Breakpoints
-----------------

*Note Modifying and setting a breakpoint::.


File: rhide.inf,  Node: Disassembler window,  Next: Call stack,  Prev: Breakpoints,  Up: Debug

3.7.5 Disassembler window
-------------------------

This opens a window, where you can see assembler instructions.  When you
are running the debugger, you will see the instructions at the current
execution point of your program.

You can step *note Step over:: or trace *note Trace into:: here in the
same way like in an editor window and you can also debug code, which has no
debugging information.

Additionally you can scroll here also forwards or backwards but scrolling
backwards is very hard to implememnt and so you will get when scrolling
backwards most of the time wrong output. Sorry for this, but until I find
more time to implement this better you have to live with it.


File: rhide.inf,  Node: Call stack,  Next: List of Functions,  Prev: Disassembler window,  Up: Debug

3.7.6 Call stack
----------------

This shows a window with a list of functions, from which the current
execution point in the debugged program is called. If you hit <Enter> on a
function which has line number debugging information, you will go to the
source line which is shown in the window.

(<Ctrl+F3> is the hotkey.)


File: rhide.inf,  Node: List of Functions,  Prev: Call stack,  Up: Debug

3.7.7 List of Functions
-----------------------

This asks first for a regular expression to list only those functions of
your program, which match that expression. The syntax for such a regular
expression is a little bit different from the wildcards you are probably
knowing from MS-DOS.

If you want to get a list of all functions you should enter either nothing
(the default), or ".*", or "?*" (both without the double quotes).  The
expression "*" does NOT mean all function. In fact, your entry will be
interpreted as a regular expression.

After you have typed the expression and pressed <Enter>, you will get a
list of functions that match the regular expression and for which
debugging information is available.

This list is sorted by the name of the function and has three parts:

NAME | RETURN VALUE | FILE

You can walk through the list with the cursor keys or the mouse. If you hit
<Enter> or double click a function, you will go the the source code of
that function.


File: rhide.inf,  Node: PROJECT,  Next: Options,  Prev: Debug,  Up: Description of the pull-down menus

3.8 Project
===========

Here you can add or remove items to or from your project

* Menu:

* Open project::
* Close project::
* Add item::
* Delete item::
* Local options::
* Includes::
* Main targetname::
* Primary file::
* Clear dependencies::
* Delete rebuildable files::
* Write Makefile::


File: rhide.inf,  Node: Open project,  Next: Close project,  Prev: PROJECT,  Up: PROJECT

3.8.1 Open project
------------------

Here is the point to open a project. After selecting this menu item, the
file open dialog is opened to select a project. You can type the name of
the project or select one from the list.

If you open a project in another directory than the current, RHIDE will
change the current directory to this directory and then the project will
be opened.

If you type here a name of a project which does not exist, a new one is
created.

If no project was opened and you create a new project, all open desktop
files remain open, but they are not added to the project.  If a project
was opened, it will be automatically closed before the new project is
opened.


File: rhide.inf,  Node: Close project,  Next: Add item,  Prev: Open project,  Up: PROJECT

3.8.2 Close project
-------------------

This closes the currently opened project and closes all files, which are
on the desktop.


File: rhide.inf,  Node: Add item,  Next: Delete item,  Prev: Close project,  Up: PROJECT

3.8.3 Add item
--------------

A dialog will be opened, from where you can choose your file to add to
your project. If you are in the project window *note Project window:: you
can use the <Ins> key to activate this function within the project window.

Currently it is impossible to use relative or absolute paths as part of a
project item. If you have your files in several directories, you have to
setup either the search path for source files or you have to create for
each directory a library that can be included in your project.


File: rhide.inf,  Node: Delete item,  Next: Local options,  Prev: Add item,  Up: PROJECT

3.8.4 Delete item
-----------------

This will remove the selected item in the project-window from your
project. If you are in the project window *note Project window:: you can
use the <Del> key to activate this function.


File: rhide.inf,  Node: Local options,  Next: Includes,  Prev: Delete item,  Up: PROJECT

3.8.5 Local options
-------------------

Here you can give the selected project-item options for compiling, which
will be in effect only for this item. If you are in the project window
*note Project window:: you can use <Ctrl+O> to activate this function.
The options you give here are passed to GCC only, when compiling this file.
For more details see *note Local options for a project item::.


File: rhide.inf,  Node: Includes,  Next: Main targetname,  Prev: Local options,  Up: PROJECT

3.8.6 Includes
--------------

This shows the dependencies for the selected item in the project window.
You can use the hotkey <Ctrl+I> in the project window.  *note Project
window::


File: rhide.inf,  Node: Main targetname,  Next: Primary file,  Prev: Includes,  Up: PROJECT

3.8.7 Main targetname
---------------------

Here you can change the name of your main target. The main target is either
an executable file or a library. RHIDE selects the type of the main target
from the suffix of this name. If it has no suffix or the suffix `.exe', an
executable will be built. If it has the suffix `.a', a library will be
created.

Remember when you give it no suffix, both, the COFF image and the `.exe'
file will created. If it has the `.exe' suffix, only the `.exe' file is
created.


File: rhide.inf,  Node: Primary file,  Next: Clear dependencies,  Prev: Main targetname,  Up: PROJECT

3.8.8 Primary file
------------------

Here you can give the primary source file, when you want to use the
'automake' feature of GPC. If you type a source name here, RHIDE assumes
that your program is written in Pascal and does NOT check any dependencies
of the project, because this is done automatically by GPC with the
`--automake' option.

If you don't want to use the 'automake' feature of GPC, even when building
a Pascal program, give here an empty name, which is the default.


File: rhide.inf,  Node: Clear dependencies,  Next: Delete rebuildable files,  Prev: Primary file,  Up: PROJECT

3.8.9 Clear dependencies
------------------------

This function removes all internal stored dependencies. The files are not
removed. This is useful when you want to create a makefile *note Write
Makefile:: and you do not want to include all the absolute filenames for
the dependencies (mostly the include files).

This function is a relict from earlier versions of RHIDE, but I have not
disabled it.


File: rhide.inf,  Node: Delete rebuildable files,  Next: Write Makefile,  Prev: Clear dependencies,  Up: PROJECT

3.8.10 Delete rebuildable files
-------------------------------

This function includes the function of clearing the dependencies *note
Clear dependencies:: and removes in addition to it all the files, which
can be rebuild within RHIDE.


File: rhide.inf,  Node: Write Makefile,  Prev: Delete rebuildable files,  Up: PROJECT

3.8.11 Write Makefile
---------------------

Here you can create a makefile that contains all the rules to build the
project from the command line without starting RHIDE. For this you need
the GNU make, because the generated makefile uses the features of GNU make
very extensively.

If you have used environment variables in your search paths *note
Directories::, these are not expanded in the generated makefile.  But all
variables you used will be defined at the beginning of the makefile with
their current value.


File: rhide.inf,  Node: Options,  Next: Windows,  Prev: PROJECT,  Up: Description of the pull-down menus

3.9 Options
===========

This menu contains many submenus for anything you can customize.

* Menu:

* Directories::
* C/C++-Compiler::
* Libraries::
* Linker options::
* Compiler options::
* Environment::
* Save options::
* Load options::


File: rhide.inf,  Node: Directories,  Next: C/C++-Compiler,  Prev: Options,  Up: Options

3.9.1 Directories
-----------------

Here you can define all of the paths, where RHIDE and the compilers finds
the needed files and where to store some files.

All the paths you can define in the several entries have the form of a
semicolon separated list of directories, just like your environment
variable %PATH%. You can use forward slashes and back slashes, but they
are all converted to forward slashes by RHIDE. You can also use
environment variables as part of your paths. The syntax of such a variable
is that of a GNU makefile. If you want to use the variable `%DJDIR%', you
must type `$(DJDIR)'.

* Menu:

* Include directories::
* Library directories::
* Object directories::
* Sources directories::
* Standard headers::


File: rhide.inf,  Node: Include directories,  Next: Library directories,  Prev: Directories,  Up: Directories

3.9.1.1 Include directories
...........................

Place here a list of directories, where gcc (and RHIDE) should search for
header files which you use via #include ... and which are not in the
default directories (like %DJDIR%/include) If you want to use for instance
allegro, put here the directory, where allegro.h is.

This is the list of directories, where GCC looks for include files and
RHIDE searches in this directory (after looking in the current directory)
for header files.


File: rhide.inf,  Node: Library directories,  Next: Object directories,  Prev: Include directories,  Up: Directories

3.9.1.2 Library directories
...........................

This is the list of directories, where GCC looks for libraries when
linking.  RHIDE searches in this directories (after looking in the current
directory) for libraries, if you have included them directly as a project
item.


File: rhide.inf,  Node: Object directories,  Next: Sources directories,  Prev: Library directories,  Up: Directories

3.9.1.3 Object directories
..........................

This is the list of directories where RHIDE looks for object files.  If
you type here only one directory this has also the effect that the object
files, which are compiled, are stored in this directory.


File: rhide.inf,  Node: Sources directories,  Next: Standard headers,  Prev: Object directories,  Up: Directories

3.9.1.4 Sources directories
...........................

This is the list of directories, where RHIDE looks for the source files
(after looking in the current directory).

It enables you also one feature (like I use it mostly at any time), to
have the sources in one directory tree and the objects and executables in
a total different directory. Simply Go to any directory, create there your
project and then add the needed files to your project. Finally specify the
path to your sources here and RHIDE will find them.


File: rhide.inf,  Node: Standard headers,  Prev: Sources directories,  Up: Directories

3.9.1.5 Standard headers
........................

Define here a space separated list of directories where your standard
headers are. Header files found in these directories are not added to the
list of dependencies which is automatically generated when compiling a
C/C++ source file.


File: rhide.inf,  Node: C/C++-Compiler,  Next: Libraries,  Prev: Directories,  Up: Options

3.9.2 C/C++-Compiler
--------------------

In this submenu you can change most flags, which have to do when compiling
C or C++ files or better for the options of all the currently supported
compilers.

* Menu:

* Warnings::
* Optimizations::
* Debugging::
* C options::
* CXX options::
* Pascal options::
* Fortran options::
* How to toggle these flags::


File: rhide.inf,  Node: Warnings,  Next: Optimizations,  Prev: C/C++-Compiler,  Up: C/C++-Compiler

3.9.2.1 Warnings
................

This opens a dialog where you can enable or disable most of the flags for
generating or suppressing warnings when you compile a C or C++ file.
*note How to toggle these flags::

For a detailed description of the available flags see *Note Warning
Options: (gcc)Warning Options.


File: rhide.inf,  Node: Optimizations,  Next: Debugging,  Prev: Warnings,  Up: C/C++-Compiler

3.9.2.2 Optimizations
.....................

This opens a dialog where you can customize how the compiler optimizes
your code.  *note How to toggle these flags::

For a detailed description of the available flags see *Note Optimize
Options: (gcc)Optimize Options.


File: rhide.inf,  Node: Debugging,  Next: C options,  Prev: Optimizations,  Up: C/C++-Compiler

3.9.2.3 Debugging
.................

This opens a dialog where you can customize the amount of debugging
information the compiler should include in object files.  *note How to
toggle these flags::

For a detailed description of the available flags see *Note Debugging
Options: (gcc)Debugging Options.


File: rhide.inf,  Node: C options,  Next: CXX options,  Prev: Debugging,  Up: C/C++-Compiler

3.9.2.4 C options
.................

This opens a dialog where you can select flags that are only passed to GCC
when compiling C files.  *note How to toggle these flags::

For a detailed description of the available flags see *Note C Dialect
Options: (gcc)C Dialect Options.


File: rhide.inf,  Node: CXX options,  Next: Pascal options,  Prev: C options,  Up: C/C++-Compiler

3.9.2.5 CXX options
...................

This opens a dialog where you can select flags which are only passed to
GCC when compiling C++ files.  *note How to toggle these flags::

For a detailed description of the available flags see *Note C++ Dialect
Options: (gcc)C++ Dialect Options.


File: rhide.inf,  Node: Pascal options,  Next: Fortran options,  Prev: CXX options,  Up: C/C++-Compiler

3.9.2.6 Pascal options
......................

This opens a dialog where you can select flags which are only passed to
GPC when compiling Pascal files.  *note How to toggle these flags::

For a detailed description of the available flags see *Note Pascal Dialect
Options: (gpc)Pascal Dialect Options.


File: rhide.inf,  Node: Fortran options,  Next: How to toggle these flags,  Prev: Pascal options,  Up: C/C++-Compiler

3.9.2.7 Fortran options
.......................

This opens a dialog where you can select flags which are only passed to
g77 when compiling Fortran files.  *note How to toggle these flags::

For a detailed description of the available flags see *Note Fortran
Dialect Options: (g77)Fortran Dialect Options.


File: rhide.inf,  Node: How to toggle these flags,  Prev: Fortran options,  Up: C/C++-Compiler

3.9.2.8 How to toggle these flags
.................................

The options in the dialogs for Warnings, Debugging, C-flags and CXX-Flags
are selected with the cursor-keys or the mouse and are activated or
deactivated by pressing <SPACE> or by double-clicking with the mouse at
the first field of the option. If an option can take an additional value
or string, an inputbox will be opened, and you can type them there. If the
additional value is optional, you can leave this input-box by pressing
<ESC> or activating the _Cancel_ button and no value, or the previous one
will be appended to this option.


File: rhide.inf,  Node: Libraries,  Next: Linker options,  Prev: C/C++-Compiler,  Up: Options

3.9.3 Libraries
---------------

Here you can tell the linker which libraries will be linked in your
program. At this time the number of additional libraries is limited to 16.
If you need more, you have to type them manually *note Linker options::

In the input-fields of the dialog you only have to type the part of your
library name after `lib' and before `.a'. Example: If your library is
`libtv.a' put only `tv' there. You can switch between the input lines for
the libraries using <Tab> or <Down Arrow> (next field) or <Shift+Tab> or
<Up Arrow> (previous field). If you have typed your libraries you can
activate or disable them by switching the checkbox before the name on or
off. This is done by pressing <Alt> and the corresponding digit or letter
of the checkbox at the same time or by clicking with the mouse.

Normally RHIDE checks the types of your source-files and automatically
adds some standard libraries, corresponding to these source-files.  These
are for C++ files the library `libiostream.a' and for Objective C files
the `libobjc.a' library.  If you want to disable this, deactivate the _Use
standard libraries_ checkbox. This adds also the commandline option
-NOSTDLIB to GCC, that means, you must give the linker explicitly all of
the standard libraries, which you need. This includes the `libgcc.a' and
`libc.a' libraries.


File: rhide.inf,  Node: Linker options,  Next: Compiler options,  Prev: Libraries,  Up: Options

3.9.4 Linker options
--------------------

Here you can enter a space separated list of options that will be passed
to GCC when linking your program.  *note Syntax of arguments::

*Note Syntax of arguments::.


File: rhide.inf,  Node: Compiler options,  Next: Environment,  Prev: Linker options,  Up: Options

3.9.5 Compiler options
----------------------

Here you can enter a space separated list of additional options that will
be passed to GCC every time it is called.  *note Syntax of arguments::

*Note Syntax of arguments::.


File: rhide.inf,  Node: Environment,  Next: Save options,  Prev: Compiler options,  Up: Options

3.9.6 Environment
-----------------

* Menu:

* Colors::
* Editor options::
* Preferences::
* Mouse options::
* Reserved words::
* Pascal reserved words::
* C-Flags::
* CXX-Flags::
* Pascal-Flags::
* Fortran-Flags::
* Warning-Flags::
* Debugging-Flags::
* Optimization-Flags::
* User words::


File: rhide.inf,  Node: Colors,  Next: Editor options,  Prev: Environment,  Up: Environment

3.9.6.1 Colors
..............

Here you can customize all of the colors of the IDE.


File: rhide.inf,  Node: Editor options,  Next: Preferences,  Prev: Colors,  Up: Environment

3.9.6.2 Editor options
......................

* Menu:

* autoindent::
* Use tabs::
* Persistent blocks::
* Intelligent C indenting::
* Column cursor::
* Row cursor::
* Match pair highlight::
* Do not move the cursor on paste::
* Transparent Blocks::
* Optimal fill::
* Tabsize::


File: rhide.inf,  Node: autoindent,  Next: Use tabs,  Prev: Editor options,  Up: Editor options

 autoindent
...........

When this is enabled, the editor automatically indents the next line by
referring to the previous line if you press enter.

For more information see *Note Documentation for the editor:
(setedit)Autoindent.

*Note Editor options::.


File: rhide.inf,  Node: Use tabs,  Next: Persistent blocks,  Prev: autoindent,  Up: Editor options

 Use tabs
.........

When this is enabled, the character `\t' is inserted into the text if you
press the <Tab>-key. Otherwise the number of spaces (defined by tabsize)
is inserted.

For more information see *Note Documentation for the editor: (setedit)Real
Tabs.

*Note Editor options::.


File: rhide.inf,  Node: Persistent blocks,  Next: Intelligent C indenting,  Prev: Use tabs,  Up: Editor options

 Persistent blocks
..................

Normally, RHIDE uses persistent blocks. This means the selected area will
not get unselected if you press a key. If you like the behavior of earlier
versions of RHIDE, disable this option.

For more information see *Note Documentation for the editor:
(setedit)Persistent Blocks.

*Note Editor options::.


File: rhide.inf,  Node: Intelligent C indenting,  Next: Column cursor,  Prev: Persistent blocks,  Up: Editor options

 Intelligent C indenting
........................

This option enables the so called 'C intelligent indenting', which is an
heuristic for indenting after special key words like `if' or `while' more
than the normal autoindenting. This works only if AUTOINDENT is enabled.

For more information see *Note Documentation for the editor:
(setedit)Intelligent C indent.

*Note Editor options::.


File: rhide.inf,  Node: Column cursor,  Next: Row cursor,  Prev: Intelligent C indenting,  Up: Editor options

 Column cursor
..............

This is a special feature of the builtin editor. If you enable this option
you will see a vertical special color highlighted column across the whole
editor window at the cursor column.

For more information see *Note Documentation for the editor:
(setedit)Column cursor.

*Note Editor options::.


File: rhide.inf,  Node: Row cursor,  Next: Match pair highlight,  Prev: Column cursor,  Up: Editor options

 Row cursor
...........

This is a special feature of the builtin editor. If you enable this option
you will see a horizontal special color highlighted row across the whole
editor window at the cursor row.

For more information see *Note Documentation for the editor: (setedit)Row
cursor.

*Note Editor options::.


File: rhide.inf,  Node: Match pair highlight,  Next: Do not move the cursor on paste,  Prev: Row cursor,  Up: Editor options

 Match pair highlight
.....................

If this option is enabled, you will see at any time you type a bracket,
brace or parenthesis the matching highlighted or a message, that there was
no matching found.

For more information see *Note Documentation for the editor:
(setedit)Match pair highlight.

*Note Editor options::.


File: rhide.inf,  Node: Do not move the cursor on paste,  Next: Transparent Blocks,  Prev: Match pair highlight,  Up: Editor options

 Do not move the cursor on paste
................................

Enable this option, when you want to leave the cursor at it's current
position when you paste some text.

*Note Editor options::.


File: rhide.inf,  Node: Transparent Blocks,  Next: Optimal fill,  Prev: Do not move the cursor on paste,  Up: Editor options

 Transparent Blocks
...................

When this option is enabled, the syntax highlight is still shown in
selected blocks.

*Note Editor options::.


File: rhide.inf,  Node: Optimal fill,  Next: Tabsize,  Prev: Transparent Blocks,  Up: Editor options

 Optimal fill
.............

When enabling this option the editor fills the gaps in your text with an
optimal value of spaces and tabs.

*Note Editor options::.


File: rhide.inf,  Node: Tabsize,  Prev: Optimal fill,  Up: Editor options

 Tabsize
........

Additionally you can select here the tabbing size for the editor. This
value is used as the global setting for all editor windows which will be
opened after setting this value. The currently opened windows will use
also this setting.

*Note Editor options::.


File: rhide.inf,  Node: Preferences,  Next: Mouse options,  Prev: Editor options,  Up: Environment

3.9.6.3 Preferences
...................

Here you can customize some basic options for the work of the IDE. A
dialog will be opened where you can turn on or off the following options:

* Menu:

* all dependencies in makefile::
* create backup files::
* syntax highlighting::
* Use dual display::
* redirect stderr::
* redirect stdout::
* show process information::
* show free memory::
* No file caching::
* 16 background colors::
* Show GDB commands::
* Use no shadows::
* Save text palette::
* Save project only when closing::
* Show user screen after exit::
* Only #include "..." in dependencies::
* Directories in project items::
* Show disassembler window when needed::
* Use RCS::
* Screen mode::
* Closed windows::


File: rhide.inf,  Node: all dependencies in makefile,  Next: create backup files,  Prev: Preferences,  Up: Preferences

 all dependencies in makefile
.............................

When this is enabled, all internally stored dependencies for a project
item are written to the makefile *note Write Makefile::. You should
disable this option, if you want to give another user the makefile of your
project, and (s)he has a different directory structure.

*Note Preferences::.


File: rhide.inf,  Node: create backup files,  Next: syntax highlighting,  Prev: all dependencies in makefile,  Up: Preferences

 create backup files
....................

Create backup files when saving. When it is enabled, RHIDE creates a backup
of the file to save under the same name as the editing file, but the suffix
is replaced with `.bak'

*Note Preferences::.


File: rhide.inf,  Node: syntax highlighting,  Next: Use dual display,  Prev: create backup files,  Up: Preferences

 syntax highlighting
....................

Turn the Syntax highlight on or off. RHIDE automatically checks the suffix
of the editing file to determine the correct syntax highlighting.
Currently this is supported only for C, C++, and Pascal source files.  All
other files are not specially highlighted.

*Note Preferences::.


File: rhide.inf,  Node: Use dual display,  Next: redirect stderr,  Prev: syntax highlighting,  Up: Preferences

 Use dual display
.................

Here is an very powerful option. If you have installed on your computer a
secondary display (monochrome monitor) in addition to your VGA monitor,
RHIDE can (when this option is enabled) switch to the second monitor for
it's output and you can see your program on the normal monitor.

If this option is enabled and you have not a secondary monitor installed,
RHIDE will detect this and does not switch to it.

*Note Preferences::.


File: rhide.inf,  Node: redirect stderr,  Next: redirect stdout,  Prev: Use dual display,  Up: Preferences

 redirect stderr
................

Turn this on, if you want to redirect the output to stderr of your program
to a window in the IDE. This is also needed, if you want to use the
builtin analyzing of a call frame traceback, when your program crashes.

*Note Preferences::.


File: rhide.inf,  Node: redirect stdout,  Next: show process information,  Prev: redirect stderr,  Up: Preferences

 redirect stdout
................

Turn this option on, if you want to redirect the output to stdout from
your program to a window in the IDE.

*Note Preferences::.


File: rhide.inf,  Node: show process information,  Next: show free memory,  Prev: redirect stdout,  Up: Preferences

 show process information
.........................

Turn this option on if you want to see which files are checked, when you
do a make *note Make::, and to see the commandlines how the compilers are
started by RHIDE.

*Note Preferences::.


File: rhide.inf,  Node: show free memory,  Next: No file caching,  Prev: show process information,  Up: Preferences

 show free memory
.................

Turn this option on to show in the upper right corner of the screen a
readout of the free memory of your system.  This shows both, the virtual
and the physical free memory.

*Note Preferences::.


File: rhide.inf,  Node: No file caching,  Next: 16 background colors,  Prev: show free memory,  Up: Preferences

 No file caching
................

If this option is enabled, RHIDE does not use the internal caching of
information about searching files and modification times. Use this only if
you have problems with the automatic checking of dependencies, because
this slows down RHIDE.

*Note Preferences::.


File: rhide.inf,  Node: 16 background colors,  Next: Show GDB commands,  Prev: No file caching,  Up: Preferences

 16 background colors
.....................

On EGA/VGA video cards it is possible to use 16 background colors instead
of normal 8. This is done by telling the video card how to interpret the
highest bit of the color attribute. If you enable this, you can use up to
16 background colors, otherwise there are only 8 colors for the background
available. To get blinking foreground colors, you must use a little trick.
Enable at first this option here. Then change the color attribute to
highlight background color you want and then reset the '16 background
colors' option.

*Note Preferences::.


File: rhide.inf,  Node: Show GDB commands,  Next: Use no shadows,  Prev: 16 background colors,  Up: Preferences

 Show GDB commands
..................

When this option is enabled you can see in the GDB output window which
commands are sent to the builtin GDB from RHIDE.

*Note Preferences::.


File: rhide.inf,  Node: Use no shadows,  Next: Save text palette,  Prev: Show GDB commands,  Up: Preferences

 Use no shadows
...............

When this option is enabled RHIDE uses no shadows at all for the windows
and dialogs and so on.

*Note Preferences::.


File: rhide.inf,  Node: Save text palette,  Next: Save project only when closing,  Prev: Use no shadows,  Up: Preferences

 Save text palette
..................

When you debug a program, which modifies the palette when in text mode,
you should enable this option.


File: rhide.inf,  Node: Save project only when closing,  Next: Show user screen after exit,  Prev: Save text palette,  Up: Preferences

 Save project only when closing
...............................

Enable this option only, when you get a system crash after starting your
program and because of the use of disk cache the project, which RHIDE
automatically saves before your program is run, is corrupted.


File: rhide.inf,  Node: Show user screen after exit,  Next: Only #include "..." in dependencies,  Prev: Save project only when closing,  Up: Preferences

 Show user screen after exit
............................

When this option is enabled, RHIDE waits for a keypress after exiting your
program. It is in general the same like pressing <Alt+F5> after exiting
the user program.


File: rhide.inf,  Node: Only #include "..." in dependencies,  Next: Directories in project items,  Prev: Show user screen after exit,  Up: Preferences

 Only #include "..." in dependencies
....................................

Here you can tell RHIDE to add only header files to the list of
dependencies for a project item which are included via

#include "..."


File: rhide.inf,  Node: Directories in project items,  Next: Show disassembler window when needed,  Prev: Only #include "..." in dependencies,  Up: Preferences

 Directories in project items
.............................

When this option is enabled, RHIDE will allow you to include project items
which are not in the current directory or any of the directories specified
in the path for source files *note Sources directories::. If the item is
relative to any of these default searched directories only the relative
subdirectory will be part of the item.

An other side effect is, that the resutling object file will be placed
also in the same directory relative to the default output directory.


File: rhide.inf,  Node: Show disassembler window when needed,  Next: Use RCS,  Prev: Directories in project items,  Up: Preferences

 Show disassembler window when needed
.....................................

When you select this option RHIDE will open always the disassembler window
when the execution stops at a location for which there is no line number
debugging information available. Default the window can be opened only by
explicit request.

This allows you also to debug functions or code from other libraries or
the startup code.


File: rhide.inf,  Node: Use RCS,  Next: Screen mode,  Prev: Show disassembler window when needed,  Up: Preferences

 Use RCS
........

Only when this option is enabled, RHIDE will use the builtin knowledge
about RCS *note RCS and RHIDE::.


File: rhide.inf,  Node: Screen mode,  Next: Closed windows,  Prev: Use RCS,  Up: Preferences

 Screen mode
............

Here you can select the video mode. If you want to use a video mode other
than the ones shown, you have to select the USER MODE mode and type the
value of this mode (see in the reference of your video card) as a decimal
or hexadecimal (preceeded by `0x') number. But you can use only textmodes
(modes with starting video ram address at `0xB800:0000'. For the numbers
of the videomodes refer to the documentation of your video card.  If you
type an invalid videomode (RHIDE checks it), the 80x25-Mode will
automatically selected.

I have tested all available text modes with my et4000-card, and they work.
For some modes, (mostly every high resolution text mode) the mouse cursor
is shown by my own routine.  That means that you can use the mouse also in
the high resolution text modes.

*Note Preferences::.


File: rhide.inf,  Node: Closed windows,  Prev: Screen mode,  Up: Preferences

 Closed windows
...............

Define here the number of closed windows which RHIDE should remember.  If
you want to disable this, give here a number 0 and when RHIDE should
remember any closed window give here -1.


File: rhide.inf,  Node: Mouse options,  Next: Reserved words,  Prev: Preferences,  Up: Environment

3.9.6.4 Mouse options
.....................

Here you can customize a little bit the speed of the double click interval
and you can also tell RHIDE to reverse the mouse buttons.


File: rhide.inf,  Node: Reserved words,  Next: Pascal reserved words,  Prev: Mouse options,  Up: Environment

3.9.6.5 Reserved words
......................

This opens a dialog, where you can modify the list of reserved words the
editor knows. If you choose the _Default_ button in this dialog, the
default reserved words are generated and any previous words are lost.


File: rhide.inf,  Node: Pascal reserved words,  Next: C-Flags,  Prev: Reserved words,  Up: Environment

3.9.6.6 Pascal reserved words
.............................

This opens a dialog, where you can modify the list of reserved words for
Pascal the editor knows. If you choose the _Default_ button in this
dialog, the default reserved words are generated and any previous words
are lost.


File: rhide.inf,  Node: C-Flags,  Next: CXX-Flags,  Prev: Pascal reserved words,  Up: Environment

3.9.6.7 C-Flags
...............

Here you can modify the list of C options, which you can turn on or off
*note C options::.

*Note How to change the list of flags::.


File: rhide.inf,  Node: CXX-Flags,  Next: Pascal-Flags,  Prev: C-Flags,  Up: Environment

3.9.6.8 CXX-Flags
.................

Here you can modify the list of CXX options, which you can turn on or off
*note CXX options::.

*Note How to change the list of flags::.


File: rhide.inf,  Node: Pascal-Flags,  Next: Fortran-Flags,  Prev: CXX-Flags,  Up: Environment

3.9.6.9 Pascal-Flags
....................

Here you can modify the list of Pascal options, which you can turn on or
off *note Pascal options::.

*Note How to change the list of flags::.


File: rhide.inf,  Node: Fortran-Flags,  Next: Warning-Flags,  Prev: Pascal-Flags,  Up: Environment

3.9.6.10 Fortran-Flags
......................

Here you can modify the list of Fortran options, which you can turn on or
off *note Fortran options::.

*Note How to change the list of flags::.


File: rhide.inf,  Node: Warning-Flags,  Next: Debugging-Flags,  Prev: Fortran-Flags,  Up: Environment

3.9.6.11 Warning-Flags
......................

Here you can modify the list of Warning-Flags, which you can turn on or off
*note Warnings::.

*Note How to change the list of flags::.


File: rhide.inf,  Node: Debugging-Flags,  Next: Optimization-Flags,  Prev: Warning-Flags,  Up: Environment

3.9.6.12 Debugging-Flags
........................

Here you can modify the list of Debugging-Flags, which you can turn on or
off *note Debugging::.

*Note How to change the list of flags::.


File: rhide.inf,  Node: Optimization-Flags,  Next: User words,  Prev: Debugging-Flags,  Up: Environment

3.9.6.13 Optimization-Flags
...........................

Here you can modify the list of Optimization-Flags, which you can turn on
or off *note Optimizations::.

*note How to change the list of flags::.


File: rhide.inf,  Node: User words,  Prev: Optimization-Flags,  Up: Environment

3.9.6.14 User words
...................

Here you can define your own list of words, which can be specially
highlighted, when syntax highlighting is enabled *note Preferences::.

* Menu:

* How to change the list of flags::


File: rhide.inf,  Node: How to change the list of flags,  Prev: User words,  Up: User words

 How to change the list of flags
................................

The syntax of the strings, which you can modify or add with the last
menu-entries is any string followed by an optional modifier with the
following meaning:

`%d'
     if you activate this option, you _must_ enter an integer there

`%d?'
     if you activate this option, you _can_ enter an integer there

`%c'
     if you activate this option, you _must_ enter a character there

`%c?'
     if you activate this option, you _can_ enter a character there

`%s'
     if you activate this option, you _must_ enter a string there

`%s?'
     if you activate this option, you _can_ enter a string there

`%s(STRING)'
     if you activate this option, you _must_ enter a string, which
     contains only characters defined by the string STRING, there

`%s?(STRING)'
     if you activate this option, you _can_ enter a string, which contains
     only characters defined by the string STRING, there


As an example: the string for the `-O' option is defined as `-O%d?' and
the `-d' option *note Debugging:: is defined as
 `-d%s(MNDyrxjsLtfcSlgRJdkamp)'
which means, the string after `-d' must be a combination of the characters
in
 `MNDyrxjsLtfcSlgRJdkamp'
If you leave the dialogs for modifying the flag lists with the _OK_ button
or if you activate the _Default_ button, all flags are disabled


File: rhide.inf,  Node: Save options,  Next: Load options,  Prev: Environment,  Up: Options

3.9.7 Save options
------------------

Here you can save all the options you currently customized to a file.
RHIDE restricts this to saving them only to a file with the `.gpr' suffix
(and `.gdt' for the desktop file).


File: rhide.inf,  Node: Load options,  Prev: Save options,  Up: Options

3.9.8 Load options
------------------

Here you can load the options from any existing project file.


File: rhide.inf,  Node: Windows,  Next: Help submenu,  Prev: Options,  Up: Description of the pull-down menus

3.10 Windows
============

In this menu you get the functions for arranging, resizing and switching
between the windows on the desktop:

* Menu:

* Size/move::
* Zoom::
* Tile::
* Cascade::
* Next::
* Previous::
* Close::
* List::
* Project::
* UserScreen::


File: rhide.inf,  Node: Size/move,  Next: Zoom,  Prev: Windows,  Up: Windows

3.10.1 Size/move
----------------

With this function you can resize and/or move the current window. After
selecting this, the frame of the current window will be drawn light-green
and you can move it with the cursor-keys. To resize it, press <Shift+> cursor-keys.
To exit the moving/resizing function, press <ESC> or <ENTER>.
Alternatively you can use the mouse.  For moving, click on the top of the
window and hold the left button down. Now you can move the window by
moving the mouse. To resize it, click on lower right corner of the window,
hold the button down and resize the window by moving the mouse. (This
function has the hotkey <Ctrl+F5> )


File: rhide.inf,  Node: Zoom,  Next: Tile,  Prev: Size/move,  Up: Windows

3.10.2 Zoom
-----------

This brings up the window to maximal size or to previous size.  (hotkey
<F5> or click with the mouse at the symbol on the right upper corner of
the window)


File: rhide.inf,  Node: Tile,  Next: Cascade,  Prev: Zoom,  Up: Windows

3.10.3 Tile
-----------

This arranges all the editor-windows on the desktop, to see them all
simultaneously.


File: rhide.inf,  Node: Cascade,  Next: Next,  Prev: Tile,  Up: Windows

3.10.4 Cascade
--------------

This arranges all the editor-windows on the desktop, to see the contents
of the current editor-window and the top-frame of all the others.


File: rhide.inf,  Node: Next,  Next: Previous,  Prev: Cascade,  Up: Windows

3.10.5 Next
-----------

Hotkey <F6> switches to the next window on the desktop.


File: rhide.inf,  Node: Previous,  Next: Close,  Prev: Next,  Up: Windows

3.10.6 Previous
---------------

Hotkey <Shift+F6> switches to the previous window on the desktop.


File: rhide.inf,  Node: Close,  Next: List,  Prev: Previous,  Up: Windows

3.10.7 Close
------------

This closes the current window. If it is an editor-window and its contents
were modified, you will be prompted to save it. Hotkey <Alt+F3> or click
with the mouse on the upper-left symbol of the frame.


File: rhide.inf,  Node: List,  Next: Project,  Prev: Close,  Up: Windows

3.10.8 List
-----------

Hotkey <Alt+0> brings up a list of all windows that are currently on the
desktop. You can select one of them and press <ENTER> to switch to it.
With <Del> you can close the selected window.


File: rhide.inf,  Node: Project,  Next: UserScreen,  Prev: List,  Up: Windows

3.10.9 Project
--------------

With this function you can select the project window *note Project
window::. If it was closed, it will be opened.


File: rhide.inf,  Node: UserScreen,  Prev: Project,  Up: Windows

3.10.10 UserScreen
------------------

Hotkey <Alt+F5> shows the contents of the DOS-Screen.  To leave this
function, do any event. That means, press any key, or click with the mouse.


File: rhide.inf,  Node: Help submenu,  Prev: Windows,  Up: Description of the pull-down menus

3.11 Help
=========

In this menu you have access to many predefined help entries in the big
help system.

* Menu:

* Help::
* RHIDE Help index::
* Syntax help submenu::
* Index for syntax help::
* libc reference::
* Help about help::


File: rhide.inf,  Node: Help,  Next: RHIDE Help index,  Prev: Help submenu,  Up: Help submenu

3.11.1 Help
-----------

This opens the INFO viewer. Many thanks at this point to Salvador Eduardo
Tropea (SET). He wrote the very good INFO viewer for use with RHIDE. This
was also the most important reason for me to write the documentation in
Texinfo, because you have now an online help available with the produced
INFO file `rhide.info'.

Pressing <F1> invokes the help system from everywhere.  For help on using
the INFO viewer, press <F1> within the help window.  But the above things
work only if you have correctly installed the INFO files that come with
RHIDE.

If you have installed the binary archive of RHIDE as described in the
`readme.bin', the INFO files are in `%DJDIR%/info'. If you have not
modified your `djgpp.env' file, this directory is searched for the INFO
files.

But you can put the INFO files in any directory you want, if you add this
directory to the %INFOPATH% variable in your `djgpp.env' file in the
section for `info'.


File: rhide.inf,  Node: RHIDE Help index,  Next: Syntax help submenu,  Prev: Help,  Up: Help submenu

3.11.2 RHIDE Help index
-----------------------

This brings up the help window with the main index for getting help for
RHIDE.


File: rhide.inf,  Node: Syntax help submenu,  Next: Index for syntax help,  Prev: RHIDE Help index,  Up: Help submenu

3.11.3 Syntax help submenu
--------------------------

In this submenu you can set the files to be searched for getting syntax
help and you can also customize the options, how this is done.

* Menu:

* Syntax help::
* Files to search::
* Options for searching::


File: rhide.inf,  Node: Syntax help,  Next: Files to search,  Prev: Syntax help submenu,  Up: Syntax help submenu

3.11.3.1 Syntax help
....................

If you are in an editor window, and you press <Ctrl+F1> , you get help
about the function under or before the cursor.  But only if this function
is documented in the files you have given to be searched for *note Files
to search::.  If there was no help found you will be informed.  This
feature can be used also by clicking with the right mouse button on the
word.


File: rhide.inf,  Node: Files to search,  Next: Options for searching,  Prev: Syntax help,  Up: Syntax help submenu

3.11.3.2 Files to search
........................

Give here a space separated list of files (if you give no suffix, the
standard suffixes are tried) which should be scanned for getting help for
a word.


File: rhide.inf,  Node: Options for searching,  Prev: Files to search,  Up: Syntax help submenu

3.11.3.3 Options for searching
..............................

Here you can give some options, how the syntax help should work. The
following search methods are selectable and other options. For all the
search methods it is possible to get more than one matching topic. If that
is true, you will find a list, from which you can select the wanted topic.

* Menu:

* Exact::
* Substring::
* Fuzzy::
* Search options::
* Fuzzy value::


File: rhide.inf,  Node: Exact,  Next: Substring,  Prev: Options for searching,  Up: Options for searching

 Exact
......

When this is selected, you will get syntax help only, if in the selected
files a topic with that exact name was found.


File: rhide.inf,  Node: Substring,  Next: Fuzzy,  Prev: Exact,  Up: Options for searching

 Substring
..........

When this is selected, you will get syntax help, when the word is a
substring of any of the nodes in the files to be searched for syntax help.


File: rhide.inf,  Node: Fuzzy,  Next: Search options,  Prev: Substring,  Up: Options for searching

 Fuzzy
......

This method uses a "Fuzzy search" for getting syntax help. That means it
looks also for nodes, which are similar to the word for which you want to
get syntax help.


File: rhide.inf,  Node: Search options,  Next: Fuzzy value,  Prev: Fuzzy,  Up: Options for searching

 Search options
...............

These are several options for the textual search:
`Case sensitive'
     When this is selected, the textual search is case sensitive.



File: rhide.inf,  Node: Fuzzy value,  Prev: Search options,  Up: Options for searching

Here you can set the bound for the fuzzy search. The range is from 1 to
1000 where 1 means that mostly every string matches any other string and
1000 means the exact match.


File: rhide.inf,  Node: Index for syntax help,  Next: libc reference,  Prev: Syntax help submenu,  Up: Help submenu

3.11.4 Index for syntax help
----------------------------

Here you can get a list of all available topics for the syntax help, from
where you can choose one (<Enter>, <Space> or double click).


File: rhide.inf,  Node: libc reference,  Next: Help about help,  Prev: Index for syntax help,  Up: Help submenu

3.11.5 libc reference
---------------------

This is a separate menu entry to open the libc reference, because this is
used very often when writing C programs.


File: rhide.inf,  Node: Help about help,  Prev: libc reference,  Up: Help submenu

3.11.6 Help about help
----------------------

This brings up a help-window for instructions and available keystrokes
when using the integrated INFO viewer.  (see *Note Top: (infview)Top.)


File: rhide.inf,  Node: Detailed description of some parts of RHIDE,  Next: Debugging with RHIDE,  Prev: Description of the pull-down menus,  Up: Top

4 Detailed description of some parts of RHIDE
*********************************************

* Menu:

* Selecting a window::
* How the editor works::
* Some hints and problems::
* Project window::
* Builtin compiler specs::
* Builtin variables::
* Change the defaults of RHIDE::
* Message window::
* Syntax highlighting::
* Checking the dependencies::
* What is Turbo Vision::
* How the dialogs work::
* Defining macros::
* The INFO Viewer::
* RCS and RHIDE::


File: rhide.inf,  Node: Selecting a window,  Next: How the editor works,  Prev: Detailed description of some parts of RHIDE,  Up: Detailed description of some parts of RHIDE

4.1 Selecting a window
======================

To select a window you can do the following. If the window has a number,
this is right on the top-frame, you can select this window by pressing
<Alt> and this number (but only if the number is a single digit).  Or you
click anywhere in the window or on the frame of the window with your mouse.


File: rhide.inf,  Node: How the editor works,  Next: Some hints and problems,  Prev: Selecting a window,  Up: Detailed description of some parts of RHIDE

4.2 How the editor works
========================

This section should describe the work of the editor. But because the editor
is now so complex and, not my own work, there is now separate documentation
with more detailed and better description see *Note Documentation for the
editor: (setedit)Top.  But you can read also more from my doc, which
describes the most common (for me) usage of the editor.

Here I describe most of the editor commands. If there is a key command like
`Ctrl+Q+Y', press <Ctrl> and <Q> simultaneously and after this press <Y>.

I strongly recommend not to use the technique by holding down the <Ctrl>
key when pressing the second key in such key combinations, because for
instance when you press `Ctrl+K' and then `Ctrl+C' you will be prompted if
you want to interrupt RHIDE (because you pressed the interrupt key). But
if you really want to use this methode, you should use the `-C'
commandline switch when starting RHIDE to disable the handling of
`SIGINIT'.

* Menu:

* Erasing commands::
* Cursor moving commands::
* Text selecting and searching commands::
* Block commands::
* Other commands::


File: rhide.inf,  Node: Erasing commands,  Next: Cursor moving commands,  Prev: How the editor works,  Up: How the editor works

4.2.1 Erasing commands
----------------------

   * <Ctrl+G> or <Del> erases the character under the cursor or the
     selected text.

   * <Ctrl+H> or <Backspace> erases the character before the cursor or the
     selected text.

   * <Ctrl+Y> erases the current line.

   * <Ctrl+Q+Y> erases from the cursor to the end of the line.

   * <Ctrl+Q+H> erases from the cursor to the beginning of the line.

   * <Ctrl+T> erases from the cursor to the beginning of the next word on
     this line.

   * <Ctrl+Backspace> erases from the cursor to the beginning of the
     previous word.


File: rhide.inf,  Node: Cursor moving commands,  Next: Text selecting and searching commands,  Prev: Erasing commands,  Up: How the editor works

4.2.2 Cursor moving commands
----------------------------

   * <Ctrl+S> or <Arrow left> moves the cursor one character left.

   * <Ctrl+D> or <Arrow right> moves the cursor one character right.

   * <Ctrl+E> or <Arrow up> moves the cursor one line up.

   * <Ctrl+X> or <Arrow down> moves the cursor one line down.

   * <Ctrl+A> moves the cursor one word left.

   * <Ctrl+F> moves the cursor one word right.

   * <Ctrl+C> or <Page down> moves the cursor one page down.

   * <Ctrl+R> or <Page up> moves the cursor one page up.

   * <Ctrl+Q+D> or <End> moves the cursor to the end of the line.

   * <Ctrl+Q+S> or <Home> moves the cursor to the beginning of the line.

   * <Ctrl+Q+R> or <Ctrl+PgUp> or `Ctrl+Home' moves the cursor to the
     beginning of the file.

   * <Ctrl+Q+C> or <Ctrl+PgDown> or `Ctrl+End' moves the cursor to the end
     of the file.


File: rhide.inf,  Node: Text selecting and searching commands,  Next: Block commands,  Prev: Cursor moving commands,  Up: How the editor works

4.2.3 Text selecting and searching commands
-------------------------------------------

   * <Shift> cursor keys select the text as the cursor moves.

   * <Ctrl+Ins> or <Ctrl+K+K> copy the selected text to the clipboard.

   * <Shift+Del> or <Ctrl+K+Y> move the selected text to the clipboard.

   * <Shift+Ins> or <Ctrl+K+C> copy the selected text from the clipboard
     to the current cursor position.

   * <Ctrl+Del> delete the selected text.

   * <Ctrl+Q+A> open the replace dialog.

   * <Ctrl+Q+F> open the find dialog.

   * <Ctrl+L> repeat the last replace or find operation.

   * <Ctrl+K+H> unselect all.


File: rhide.inf,  Node: Block commands,  Next: Other commands,  Prev: Text selecting and searching commands,  Up: How the editor works

4.2.4 Block commands
--------------------

   * <Ctrl+K+B> sets the start of the selected block.

   * <Ctrl+K+K> sets the end of the selected block.

   * <Ctrl+K+I> indents the selected block by inserting a space at the
     beginning of each line inside the block.

   * <Ctrl+K+U> unindents the selected block by erasing one character from
     the beginning of each line inside the block, which starts with a tab
     or space.

   * <Ctrl+K+M> converts all alpha characters inside the selected block to
     upper case.

   * <Ctrl+K+O> converts all alpha characters inside the selected block to
     lower case.

   * <Ctrl+K+V> moves the selected block to the current cursor position.

   * <Ctrl+K+Tab> indents the selected block by using the last non
     selected line as reference for indenting.

   * <Ctrl+K+Shift+Tab> unindents the selected block by using the last
     non-selected line as reference for unindenting.

   * <Ctrl+K+R> inserts the contents of a file at the current cursor
     position.

   * <Ctrl+K+W> writes the selected block to a file.


File: rhide.inf,  Node: Other commands,  Prev: Block commands,  Up: How the editor works

4.2.5 Other commands
--------------------

   * <Ctrl+V> Toggle insert-/overwrite-mode.

   * <Ctrl+O> Toggle auto-indent-mode on/off.

   * <Ctrl+J> Goto line ... (Will be prompted for.)

   * <Ctrl+K+?> ?, a digit (<0> - <9>). Set a marker in the text (up to
     ten different markers).

   * <Ctrl+Q+?> ?, a digit (<0> - <9>). Jump to a marker, which you have
     previously set.

   * <Shift+Space> Executes a macro, which can be defined externally by
     analyzing the last two characters before the cursor *note Defining
     macros::.

If you have set some markers, they will be stored, so you can use them
later when restarting RHIDE.


File: rhide.inf,  Node: Some hints and problems,  Next: Project window,  Prev: How the editor works,  Up: Detailed description of some parts of RHIDE

4.3 Some hints and problems
===========================

To compile only a single file, you don't need to include it in a project.
You only have to open it and do a compile. If a file is in your project,
you can compile it, if you are in its editor-window or if you are in the
project-window and this file is selected.

Warnings and errors from compiling a file are listed in the message-window.
If there are warnings or errors, you can jump to the corresponding source
by hitting <ENTER> on this message. If this file wasn't already opened, it
will be opened.

* Menu:

* Problems with automatic dependencies::


File: rhide.inf,  Node: Problems with automatic dependencies,  Prev: Some hints and problems,  Up: Some hints and problems

4.3.1 Problems with automatic dependencies
------------------------------------------

Most checking of the dependencies works correctly, but there are some few
situations, where this checking gets confused. The first results in the
fact that I implemented a cache function for getting the modification time
of files, that means, most files are 'stat'ed only once, after starting
RHIDE. But if someone modifies one of the files, which are in the cache,
(this can be another program, when you run RHIDE in a multitasking
environment, such as Windows) or if you run your project and it modifies
some of these files, the internal cache is after this not up to date.

Here is another situation. Your source files are not in the current
directory. You have opened a source file for editing and successfully
built your project. Now you leave RHIDE, because you want to debug your
program with `FSDB', you copy the source file (in this case it is the
file, which you have opened in the IDE) to the current directory. Now you
debug it and there are some errors. You restart RHIDE to make the changes
in the file. The previously opened file will be opened automatically and
you edit it. If you do now a _Make_, RHIDE tells you, that your project is
up to date, because it searches for source files at first in the current
directory, and there is the unmodified file.

In this chapter I will give you for some special parts a more detailed
description of what they do.


File: rhide.inf,  Node: Project window,  Next: Builtin compiler specs,  Prev: Some hints and problems,  Up: Detailed description of some parts of RHIDE

4.4 Project window
==================

The project window shows you every file, which you have included in your
project. Most time you work with RHIDE this window should be visible, but
you can also close it *note Close::.

* Menu:

* Items of your project::
* Open a project item::
* Dependencies of project item::
* Local options for a project item::


File: rhide.inf,  Node: Items of your project,  Next: Open a project item,  Prev: Project window,  Up: Project window

4.4.1 Items of your project
---------------------------

The items in the project window, and therefore also in your project, are
sorted in alphabetical order. This has the effect of faster finding an
item and you can also move the selecting bar to a specified item by typing
the name of this item.

Normally, the alphabetic order of the project items causes no problems
because the linker searches at first _every_ object file for unresolved
symbols before any library. The statement, the the GNU linker is a one pass
linker makes sense only for libraries, because they are checked only once
for unresolved references. That means, if you include libraries in your
project you must know about the order, where this library is put on the
command line when linking your program.

If you have problems with that order, or if you really want to have one
object file (or library) before some others, you must rename them, to get
the right position from the name.


File: rhide.inf,  Node: Open a project item,  Next: Dependencies of project item,  Prev: Items of your project,  Up: Project window

4.4.2 Open a project item
-------------------------

To open an editor window with the selected item press either <ENTER> or
<SPACE>. If there was already a window with this file opened on the
desktop, this window will be selected.  This works only if the selected
item has a known suffix *note Known suffixes::. If the selected item is a
project file, that project will be opened with the side effect that if you
close this project, the previous one will be reopened.


File: rhide.inf,  Node: Dependencies of project item,  Next: Local options for a project item,  Prev: Open a project item,  Up: Project window

4.4.3 Dependencies of project item
----------------------------------

If you have compiled a file already in RHIDE, you bring up a list with all
dependencies of that file. In this list the files are show by their
basename followed by the directory and they are also sorted in alphabetical
order. From here you can also open an editor window with the selected
dependency by pressing <SPACE> or <ENTER> on that item.


File: rhide.inf,  Node: Local options for a project item,  Prev: Dependencies of project item,  Up: Project window

4.4.4 Local options for a project item
--------------------------------------

You can change many options for a project item, which are in effect only
for this file. To do this, hit <Ctrl+O> on the selected item and a dialog
is shown, where you can change the options.

At this time you can change the following options.

* Menu:

* Local commandline options::
* exclude from link::
* rebuild seldom::
* Name of the output file::
* Compiler type::
* User defined compiler::
* Error checking::
* Error program::


File: rhide.inf,  Node: Local commandline options,  Next: exclude from link,  Prev: Local options for a project item,  Up: Local options for a project item

 Local commandline options
..........................

Here you can give some additional defines or any other commandline
options, when compiling this item.


File: rhide.inf,  Node: exclude from link,  Next: rebuild seldom,  Prev: Local commandline options,  Up: Local options for a project item

 exclude from link
..................

This is a switch to tell RHIDE, that this file should not be linked with
your program, but it is compiled and it is checked to determine if your
program is up to date.


File: rhide.inf,  Node: rebuild seldom,  Next: Name of the output file,  Prev: exclude from link,  Up: Local options for a project item

 rebuild seldom
...............

When you select this option the item is compiled only if it does not
already exist. For most project items this is not usefull but if you have
included in your project other projects which create a library this might
be usefull, especially if the library has many source files and you know,
that they change very seldom.


File: rhide.inf,  Node: Name of the output file,  Next: Compiler type,  Prev: rebuild seldom,  Up: Local options for a project item

 Name of the output file
........................

Here you can specify another name as the compiled file. Put here only the
basename of the file (without any directory)


File: rhide.inf,  Node: Compiler type,  Next: User defined compiler,  Prev: Name of the output file,  Up: Local options for a project item

 Compiler type
..............

From that list you can select exactly one type of the compiler, which is
used to create your output file. Possible values are:

`Auto'
     This is the default and should be used in most cases. When this type
     is selected, RHIDE selects the correct compiler depending on the
     suffixes of your source and output file.

`User'
     If you have any special compiler, which is not known to RHIDE, to
     create your output file, you must select this and give RHIDE also the
     calling syntax of that compiler (see below)

`None'
     If you don't want to compile this item select this.

`GNU C compiler'
     Tell RHIDE to compile this file like a normal GNU C source file.

`GNU C++ compiler'
     Tell RHIDE to compile this file like a normal GNU C++ source file.

`GNU assembler'
     Tell RHIDE to compile this file like a normal GNU assembler file.

`GNU Pascal compiler'
     Tell RHIDE to compile this file like a normal GNU Pascal file.



File: rhide.inf,  Node: User defined compiler,  Next: Error checking,  Prev: Compiler type,  Up: Local options for a project item

 User defined compiler
......................

If you have selected the User compiler type, you have to put in the next
input line the specs on how to call the compiler. These specs can use any
variables that are known to RHIDE *note Builtin variables:: together with
normal text. As an example I show here, how the builtin C compiler is
defined (the backslashes at the end of the lines are used only here to
show, that the line is continued, they are NOT part of the specs):


$(RHIDE_GCC) $(INCLUDE_DIRS) $(C_DEBUG_FLAGS) $(C_OPT_FLAGS) \
$(C_WARN_FLAGS) $(C_C_LANG_FLAGS) $(C_EXTRA_FLAGS) $(LOCAL_OPT) \
-c $(SOURCE_NAME) -o $(OUTFILE)


File: rhide.inf,  Node: Error checking,  Next: Error program,  Prev: User defined compiler,  Up: Local options for a project item

 Error checking
...............

Here you can select how errors or warnings that are produced by the
compiler, are checked. Possible values are:

`Auto'
     Let RHIDE select the correct way for checking the errors

`User'
     Use your own external program to check the output of the compiler to
     `stderr'

`None'
     Do not check any errors, assume that the compiler does it's job every
     time successfully.

`builtin C'
     Check the errors like when compiling a C file

`builtin assembler'
     Check the errors like when compiling an assembler file

`builtin linker'
     Check the errors like when linking

`return value'
     Determine only if the compiling was successful or not by checking the
     return value of the compiler (zero for success)



File: rhide.inf,  Node: Error program,  Prev: Error checking,  Up: Local options for a project item

 Error program
..............

If you have selected above the User error checking, type here the program,
which should check for errors and/or warnings.  What the external error
checking program should do:

   - The program must take a filename as argument, which contain the
     output to stderr from the compiler (Error and warning messages)

   - The program has to write to stdout the Warnings, Errors or messages
     in a special format.

    `Errors'
          A line that starts with the string "!Error" (without the double
          quotes) optionally followed by "!File" and a filename in single
          quotes and "!Line" followed by a space and a line number and
          "!Column" followed by a space and a coloumn number.

          If "!Line" and/or "!Column" are not used they dafault to 0.  The
          next line contain the error text.  Example:


          !Error!File'test.c'!Line 17
          This is a sample error message

          This means, that in file 'test.c' at line 17 an error occurred
          with the description 'This is a sample error message'

    `Warnings'
          Warnings have the same format, except that !Error is replaced by
          !Warning.

    `Any other line'
          is treated as a simple message optionally preceeded by !File and
          !Line.




File: rhide.inf,  Node: Builtin compiler specs,  Next: Builtin variables,  Prev: Project window,  Up: Detailed description of some parts of RHIDE

4.5 Builtin compiler specs
==========================

WARNING: THE LIST OF VARIABLES AND STRINGFUNCTIONS DESCRIBED BELOW MIGHT
NOT BE UPTODATE. IF YOU WANT TO GET INFORMATION ABOUT ALL FEATURES PLEASE
LOOK IN THE SOURCES FOR RHIDE.

RHIDE uses for compiling, linking, and the other stages of generating a
file also specs, like you can change in the local options for a project
item *note Local options::. Here the specs, which are used currently:

$(RHIDE_COMPILE_C)
     For compiling C source files

$(RHIDE_COMPILE_CC)
     For compiling C++ source files

$(RHIDE_COMPILE_ASM)
     For compiling assembler source files

$(RHIDE_COMPILE_PASCAL)
     For compiling Pascal source files

$(RHIDE_COMPILE_OBJC)
     For compiling objective C source files

$(RHIDE_COMPILE_LINK)
     For linking

$(RHIDE_COMPILE_LINK_PASCAL)
     For linking when the project contain Pascal source files

$(RHIDE_COMPILE_LINK_PASCAL_AUTOMAKE)
     This spec is used only, when you have set the *note Primary file::, to
     tell RHIDE, not to check for dependencies but to use the 'automake'
     feature of GPC.

$(RHIDE_COMPILE_ARCHIVE)
     For creating a library

$(RHIDE_FSDB)
     For calling FSDB.

$(RHIDE_GDB)
     For calling GDB.

$(RHIDE_GPROF)
     For calling GPROF.

$(RHIDE_GREP)
     For calling grep.


All of these specs have a default content in RHIDE, but they can be
overwritten by setting the environment variable with the same name and any
other contents.


File: rhide.inf,  Node: Builtin variables,  Next: Change the defaults of RHIDE,  Prev: Builtin compiler specs,  Up: Detailed description of some parts of RHIDE

4.6 Builtin variables
=====================

This section describes, which variables can be used within RHIDE to get
values from some of the configurations, which you have made inside RHIDE.

All of these variables are referenced by a name enclosed in parentheses
preceeded by a dollar sign. Example: `$(RHIDE_GCC)'. You can overwrite any
of the following variables, if you define in your environment the same
variable with any contents you want.

When RHIDE tries to get the contents of such a variable, it searches at
first if it is found in it's internal database. If it was not found, the
environment is checked for such a variable and if that fails, the
resulting value is the variable itself.

In addition to the use of variables, RHIDE has a limited ability of using
string manipulating functions. I have implemented some of the functions,
which are available with GNU make. They have the same name and should work
exactly like the GNU make counterpart.

`$(strip arg)'
     This function removes any leading and trailing whitespace and converts
     all multispaces to single spaces from the (whitespace separated list)
     `arg'.

`$(addsuffix arg1,arg2)'
     These functions append on each argument from the whitespace separated
     list `arg2' the string `arg1'.

`$(addprefix arg1,arg2)'
     This is the same as `$(addsuffix arg1,arg2)', except that it puts the
     string `arg1' before each argument from `arg2'.

`$(notdir arg)'
     This removes any directory part from the argument `arg'.

`$(dir)'
     This extracts only the directory part from the argument `arg'. If
     there was no directory in `arg', an empty string is returned. (The
     directory contains also the drive letter, if there was one)

`$(subst arg1,arg2,arg3)'
     This replaces every occurrence of `arg1' in `arg3' with `arg2'

The following variables have a special meaning in RHIDE with the default
contents:
$(RHIDE_GCC)
     GCC

$(RHIDE_AS)
     GCC

$(RHIDE_GXX)
     GCC

$(RHIDE_GPC)
     GPC

$(RHIDE_AR)
     ar

$(RHIDE_LD)
     GCC

$(RHIDE_LD_PASCAL)
     GPC

$(RHIDE_ARFLAGS)
     rcs

$(RHIDE_INCLUDES)
     $(SPECIAL_CFLAGS) $(addprefix -I,$(INCLUDE_DIRS))

$(RHIDE_LIBDIRS)
     $(addprefix -L,$(LIB_DIRS))

$(RHIDE_LIBS)
     $(addprefix -l,$(LIBS))

$(RHIDE_LDFLAGS)
     $(SPECIAL_LDFLAGS) $(addprefix -Xlinker ,$(LD_EXTRA_FLAGS))

$(RHIDE_COMPILE_C)
     $(RHIDE_GCC) $(RHIDE_INCLUDES) $(C_DEBUG_FLAGS) \
     $(C_OPT_FLAGS) $(C_WARN_FLAGS) $(C_C_LANG_FLAGS) \
     $(C_EXTRA_FLAGS) $(LOCAL_OPT) -c $(SOURCE_NAME) \
     -o $(OUTFILE)

$(RHIDE_COMPILE_C_FORCE)
     $(RHIDE_GCC) $(RHIDE_INCLUDES) $(C_DEBUG_FLAGS) \
     $(C_OPT_FLAGS) $(C_WARN_FLAGS) $(C_C_LANG_FLAGS) \
     $(C_EXTRA_FLAGS) -x c $(LOCAL_OPT) -c $(SOURCE_NAME) \
     -o $(OUTFILE)

$(RHIDE_COMPILE_CC)
     $(RHIDE_GXX) $(RHIDE_INCLUDES) $(C_DEBUG_FLAGS) \
     $(C_OPT_FLAGS) $(C_WARN_FLAGS) $(C_C_LANG_FLAGS) \
     $(C_CXX_LANG_FLAGS) $(C_EXTRA_FLAGS) $(LOCAL_OPT) \
     -c $(SOURCE_NAME) -o $(OUTFILE)

$(RHIDE_COMPILE_CC_FORCE)
     $(RHIDE_GXX) $(RHIDE_INCLUDES) $(C_DEBUG_FLAGS) \
     $(C_OPT_FLAGS) $(C_WARN_FLAGS) $(C_C_LANG_FLAGS) \
     $(C_CXX_LANG_FLAGS) $(C_EXTRA_FLAGS) -c c++ $(LOCAL_OPT) \
     -c $(SOURCE_NAME) -o $(OUTFILE)

$(RHIDE_COMPILE_ASM)
     $(RHIDE_AS) $(RHIDE_INCLUDES) $(C_DEBUG_FLAGS) \
     $(C_OPT_FLAGS) $(C_WARN_FLAGS) $(C_EXTRA_FLAGS) \
     $(LOCAL_OPT) -c $(SOURCE_NAME) -o $(OUTFILE)

$(RHIDE_COMPILE_ASM_FORCE)
     $(RHIDE_AS) $(RHIDE_INCLUDES) $(C_DEBUG_FLAGS) \
     $(C_OPT_FLAGS) $(C_WARN_FLAGS) $(C_EXTRA_FLAGS) \
     -x assembler $(LOCAL_OPT) -c $(SOURCE_NAME) \
     -o $(OUTFILE)

$(RHIDE_GPC_FLAGS)
     $(RHIDE_INCLUDES) $(C_DEBUG_FLAGS) $(C_OPT_FLAGS) \
     $(C_WARN_FLAGS) $(C_P_LANG_FLAGS) $(C_EXTRA_FLAGS)

$(RHIDE_COMPILE_PASCAL)
     $(RHIDE_GPC) $(RHIDE_GPC_FLAGS) $(LOCAL_OPT) \
     -c $(SOURCE_NAME) -o $(OUTFILE)

$(RHIDE_COMPILE_PASCAL_FORCE)
     $(RHIDE_GPC) $(RHIDE_GPC_FLAGS) -x pascal \
     $(LOCAL_OPT) -c $(SOURCE_NAME) -o $(OUTFILE)

$(RHIDE_COMPILE_LINK)
     $(RHIDE_LD) $(RHIDE_LIBDIRS) $(C_EXTRA_FLAGS) \
     $(RHIDE_LDFLAGS) -o $(OUTFILE) $(OBJFILES) \
     $(LIBRARIES) $(RHIDE_LIBS)

$(RHIDE_COMPILE_LINK_PASCAL)
     $(RHIDE_LD_PASCAL) $(RHIDE_LIBDIRS) $(C_EXTRA_FLAGS) \
     $(RHIDE_LDFLAGS) -o $(OUTFILE) $(OBJFILES) \
     $(LIBRARIES) $(RHIDE_LIBS)

$(RHIDE_COMPILE_LINK_PASCAL_AUTOMAKE)
     $(RHIDE_LD_PASCAL) $(RHIDE_LIBDIRS) $(RHIDE_LDFLAGS) \
     -o $(OUTFILE) \
     -automake=\"$(strip $(RHIDE_GPC_FLAGS))\" \
     $(RHIDE_GPC_FLAGS) $(SOURCE_NAME) $(LIBRARIES) $(RHIDE_LIBS)

$(RHIDE_COMPILE_ARCHIVE)
     $(RHIDE_AR) $(RHIDE_ARFLAGS) $(OUTFILE) $(OBJFILES)

$(RHIDE_FSDB)
     fsdb $(OUTFILE) $(addprefix -p ,$(SRC_DIRS)) $(PROG_ARGS)

$(RHIDE_GDB)
     gdb $(OUTFILE) $(addprefix -d ,$(SRC_DIRS))

$(RHIDE_GREP)
     grep -n $(prompt arguments for GREP)

$(RHIDE_GPROF)
     gprof $(OUTFILE)


The following are not used as real variables, but they are used to get the
contents of options from RHIDE. But you can override them also by setting
them as an environment variable.

$(INCLUDE_DIRS)
     All the include directories

$(LIB_DIRS)
     All the library directories

$(SOURCE_NAME)
     The actual compiled source file

$(OUTFILE)
     The actual created file

$(C_DEBUG_FLAGS)
     All the debugging flags

$(C_OPT_FLAGS)
     All the optimization flags

$(C_WARN_FLAGS)
     All the warning flags

$(C_C_LANG_FLAGS)
     All the C language flags

$(C_CXX_LANG_FLAGS)
     All the C++ language flags

$(C_P_LANG_FLAGS)
     All the Pascal language flags

$(LIBS)
     All the libraries, which are given in the libraries options

$(LD_EXTRA_FLAGS)
     All the additional linker options

$(LOCAL_OPT)
     All the local options for that project item

$(OBJFILES)
     All the destination files, which are part of the project and which
     are not a library and not excluded from linking

$(LIBRARIES)
     All the libraries, which are explicitly included in the project and
     not excluded from linking

$(SPECIAL_CFLAGS)
     Some special flags for `GCC'. Currently only the `-nostdlib' switch.

$(SPECIAL_LDFLAGS)
     Some special flags for `GCC' when linking. Currently only the
     switches `-pg' and `-nostdlib'.

$(prompt TITLE)
     RHIDE prompts for arguments which get the title `TITLE' and insert
     the parameters here.



File: rhide.inf,  Node: Change the defaults of RHIDE,  Next: Message window,  Prev: Builtin variables,  Up: Detailed description of some parts of RHIDE

4.7 Change the defaults of RHIDE
================================

If you have special wishes for compiling your source files, you can
configure for RHIDE mostly everything. For adding support for other than
the builtin known file types *note Builtin variables::. If you want to
change the behavior of RHIDE for compiling all the known file types you
should know at first really what you do. If you think, this is a good idea
or if you only want only check if it works you can do it.

Before RHIDE compiles any file (this includes also linking and building a
library) it searches the environment for a variable after the following
scheme: When compiling a file with suffix `.c' to a file with suffix `.o'
RHIDE checks for the variable $(RHIDE_COMPILE.c.o). If this variable is
defined the contents of this variable is taken as the compile spec.

If you want to change the specs for linking you must take as destination
suffix `.exe' or `.' and as source suffix the suffix of your object files.
Example:

$(RHIDE_COMPILE.o.)


File: rhide.inf,  Node: Message window,  Next: Syntax highlighting,  Prev: Change the defaults of RHIDE,  Up: Detailed description of some parts of RHIDE

4.8 Message window
==================

This window shows every time you compile a file the resulting messages,
which GCC produces. These messages were converted in a special format to
show them in the window. Some of the messages contain a file eventually
combined with a line number. If you press <ENTER> on such a message, the
corresponding source line in the file will be highlighted and the window
with this file will be selected. If this file is not already on the
desktop, it will be opened.

If the file, to which the messages refer, is already in the foreground you
can see the selected source line for your messages directly on the screen.


File: rhide.inf,  Node: Syntax highlighting,  Next: Checking the dependencies,  Prev: Message window,  Up: Detailed description of some parts of RHIDE

4.9 Syntax highlighting
=======================

Syntax highlighting is now supported directly by the editor. It should
work in mostly every situation for all the supported types. Currently (in
RHIDE) only the C/C++ style syntax highlight and the Pascal style syntax
highlight are supported.

With which style a file is highlighted is chosen by RHIDE by checking the
suffix of the file and determining the file type from that suffix *Note
Known suffixes::.


File: rhide.inf,  Node: Checking the dependencies,  Next: What is Turbo Vision,  Prev: Syntax highlighting,  Up: Detailed description of some parts of RHIDE

4.10 Checking the dependencies
==============================

This is one of the main parts of RHIDE. To speed up the work, I have added
a cache for checking the modification time of a file and for finding a
file (computing the full name of a file). But sometimes the data in the
cache isn't valid, especially when running under Windows. If you see this,
you can clear the cache by leaving RHIDE and starting again.

If you didn't do any special things but have problems with it, please run
RHIDE with the `-df' switch and try to find out, where the problem is and
post it to me so I can fix it.


File: rhide.inf,  Node: What is Turbo Vision,  Next: How the dialogs work,  Prev: Checking the dependencies,  Up: Detailed description of some parts of RHIDE

4.11 What is Turbo Vision
=========================

The Turbo Vision library is part of Turbo C++ version 3.1. I have ported
this library to use with DJGPP because I think it is the most powerful
text windowing library, which is available for MS-DOS. With the help of
this library you can write a front end application which looks very well
and has an interface that is easy to use.

The Turbo Vision library is not only a window based text user interface,
it is also a very good event handling mechanism. It supports the use of
the mouse and keyboard with the ability of defining and using of hotkeys.
That means, you can assign to some key or combinations of keys, which
function should be executed.

The main parts of an application, which is using this library, are the
desktop, the menu bar and the status line. The menu bar is usually shown
as the topmost line of the screen. There are shown the main parts of the
pull down menus, from where you can select the most functions, which are
implemented in an application.

To use the menu you can use the mouse as well the keyboard. With the mouse
you can click every where on a menu entry and the corresponding function
will be executed. There are some different actions, which a menu entry can
have. At first some of them, these are, for example, all the entries in the
menu bar, open a submenu with more menu entries which are related to the
name of this main entry. And the others, most in such a submenu, execute a
definite function of the application.

With the keyboard you can walk through the menu very simply. Press <F10> to
activate the menu bar. In the pull down menus you can use the cursor keys
to move the highlighted bar up and down and with the cursor right and left
keys you can switch to next or previous menu. With the <ENTER> key you
activate the function, which corresponds to this entry. If this was a
submenu, which is indicated with a symbol like a small right arrow, this
will be opened.

If you walk through the menu with the cursor keys or the mouse (hold the
left mouse button down and move the mouse) in the status line will be
shown for each entry a short hint for the function of this menu entry.


File: rhide.inf,  Node: How the dialogs work,  Next: Defining macros,  Prev: What is Turbo Vision,  Up: Detailed description of some parts of RHIDE

4.12 How the dialogs work
=========================

In a dialog, like the file open dialog, are many things which you can
select or where you can type in some data. At first some general
functions. If you press <ESC> the dialog will be closed and nothing will
be changed. The same can be done with the mouse by clicking on the close
symbol (this is the small symbol on upper left frame of the dialog).

In the next paragraphs I will describe the most used elements of a dialog.
For selecting each element of a dialog you can use the <Tab> key to select
the next element in the dialog or the `Shift+Tab' key, to select the
previous element.

A button is a rectangle with some text on it. If you activate such a
button a specified action is executed. To select a button you can use the
<Tab> key, until the button is specially highlighted and press <ENTER> then.
Most times a character of the text on this button has a different color.
So you can press <Alt> plus this character to activate the button. With
the mouse you can simply click on a button to activate it.

A Listbox is a collection of some strings in one or more columns and rows
as needed. The project window *note Project window:: is such a Listbox with
the names of the project items. You can use the cursor keys to move the
focus bar in the list, or if it is a sorted Listbox, you can also type
some characters and the focus will move to the item, which starts with
these characters. To select a item in a list box, press <SPACE> or <ENTER> or
double click with mouse on it.

In an input line you can type some text which can be edited with the usual
editing keys.

A checkbox is a collection of options, which can be turned on or off.
Each option has in front of it a small indicator, if it is turned on (an X
is shown) or not (the X is not shown). To toggle such an option, use the
cursor keys to move the focus to the option you want and press <SPACE> or,
if a character in an option string is highlighted you can press this key
and the option will be turned on or off or click with the mouse on the
option.

Radiobuttons are similar to Checkboxes, but there you can select only one
of all the shown options.


File: rhide.inf,  Node: Defining macros,  Next: The INFO Viewer,  Prev: How the dialogs work,  Up: Detailed description of some parts of RHIDE

4.13 Defining macros
====================

Please look for a detailed documentation here: *Note Documentation about
Pseudo Macros: (setedit)Pseudo Macros.


File: rhide.inf,  Node: The INFO Viewer,  Next: RCS and RHIDE,  Prev: Defining macros,  Up: Detailed description of some parts of RHIDE

4.14 The INFO Viewer
====================

The integrated help system of RHIDE is based on the INFO Viewer written by
salvador@inti.gov.ar <Salvador Eduardo Tropea (SET)>. It gives you access
to all the INFO files which you have installed in the correct directories
as is done for `info.exe'.

To get help about the INFO Viewer hit <F1> when the help-window is opened
or follow this link to *Note Top: (infview)Top.

In addition to getting help with this system you can also copy text from
the help screen to the clipboard. This is useful if you want for instance
to copy an example from the libc reference in your program. This feature
is not so powerful as in the editor, but it is good enough. To mark some
text use the <Shift> and cursor keys and copy the selected text with
`Ctrl+Ins' to the clipboard.

In RHIDE you have also the possibility to get help about a specific
function. Currently this works only for functions, which are documented in
the libc reference. For doing this, move the cursor to the function and
hit <Ctrl+F1> or click with the right button of the mouse on that word.


File: rhide.inf,  Node: RCS and RHIDE,  Prev: The INFO Viewer,  Up: Detailed description of some parts of RHIDE

4.15 RCS and RHIDE
==================

RHIDE knows a little bit about RCS, the Revision Control System. Since RCS
is available also for DJGPP I enabled now some features to use RHIDE also
on packages which use RCS.

RHIDE can handle RCS files in the way, that it searches for a checked in
source file if the normal source file was not found. The complicatest part
here was to determin the correct RCS file name from the source name.
(Especially under DJGPP this is a problem since under raw DOS it is not
possible to use names like 'foo.c,v').

So I decided to use the external program `rlog' which comes with the RCS
package to determine the actual correct RCS source name. I did so because
the DJGPP implementation knows enough about the DOS limitation and how to
solve them.

This help here is not ment to be a RCS introduction. If you don't know
what RCS is or what can be done with it, please look in the manuals wich
come with RCS.

Here now what RHIDE knows about the RCS files. If a source file was not
found, it's RCS name is computed with the spec `$(RHIDE_RLOG)' which
defaults to `$(shell rlog -R $(rlog_arg))' where `$(rlog_arg)' is
substituted at runtime with the actual wanted source file.

This spec can be overwritten to speed it up. An example for this can be
found in the distributed sample environment file `rhide_.env'.

When RHIDE only wants to compile the file or only to get the modification
time it is temporary checked out (without locking it) and after the needed
operation (compiling) it is removed (for checking the modification time it
is not checked out, but the time form the RCS file is taken).

If you want to open that file for editing the same is done but now it is
checked out with setting a lock and it is not checked in after closing the
window. The spec for checking the file out is `$(RHIDE_CO)' which can be
overwritten also and it defaults to `$(shell co -q $(co_arg))' where the
switch `-l' is added when it is checked out for edititing otherwise
`$(co_arg)' is substituted at runtime only with the wanted source file.


File: rhide.inf,  Node: Debugging with RHIDE,  Next: Debugging with RHGDB,  Prev: Detailed description of some parts of RHIDE,  Up: Top

5 Debugging with RHIDE
**********************

For debugging your programs you need now no external debugger, because
RHIDE has one integrated. The integrated debugger is not code which I have
written, but it is GDB 4.16, which is linked in RHIDE.

Because RHIDE uses a special method to communicate with GDB it is currently
not possible to use all of the features, which GDB has. I have implemented
at this time the most important functions, which are needed to debug your
program. So it is not possible to give GDB the same commands as when
running GDB stand alone. That means, if you need any very special feature
of GDB you must run GDB.

The integrated debugger is a real source level debugger like GDB. If you
step through your program you will see every time exactly where in the
sources you are. But to use the ability to debug your program needs, that
you have compiled your source files with debugging information and these
symbols must not have been stripped from the executable.

* Menu:

* Limitations of the integrated debugger::
* Dual display debugging::
* Using the integrated debugger::
* Problems with C++ programs::
* Using Breakpoints::


File: rhide.inf,  Node: Limitations of the integrated debugger,  Next: Dual display debugging,  Prev: Debugging with RHIDE,  Up: Debugging with RHIDE

5.1 Limitations of the integrated debugger
==========================================

Because the integrated debugger is GDB, you will have all the limitations
which GDB has in addition to well known DJGPP and/or MS-DOS limitations.
Here is a (not complete) list of known misfeatures:

   * Signals are not correctly handled every time by distinguishing between
     the debuggee and RHIDE

   * Remote debugging is NOT supported

   * Debugging of graphic programs may work or not depending on the
     software you are using. Currently only the VESA modes and the
     standard VGA graphic modes are supported.

   * When using the integrated debugger under Windows 3.1x (in Windows 95
     there is no such limitation) the number of breakpoints is limited to
     3, because you can use there only hardware breakpoints. The i386
     supports only 4 hardware breakpoints and 1 is needed for internal use.
     This is a common problem for all DJGPP debuggers. (Try to use FSDB
     with more than 3 breakpoints under Windows 3.1x)

   * Sometimes the source line, which is shown by RHIDE in assuming that
     the execution is there, is not correct. But this is NOT a bug of
     RHIDE and NOT of GDB. This is a bug in GCC which produces wrong line
     number information in the object files. Here is a very simple test
     program, with which you can see this problem.

          /* This is an example, that GCC produces wrong line number
             information for code which is optimized out. (compile this
             with -O) */

          int a = 1;
          int b = 2;

          int main()
          {
            if (a == b) return 0;
            if ((a + 1) == b) return 1;
            return 0; /* The debugger should never come here,
                         but it comes */
          }



File: rhide.inf,  Node: Dual display debugging,  Next: Using the integrated debugger,  Prev: Limitations of the integrated debugger,  Up: Debugging with RHIDE

5.2 Dual display debugging
==========================

RHIDE supports now also to use an installed dual display. This is when you
have installed in addition to your VGA card a monochrome display card
together with a monitor. RHIDE checks this by asking the BIOS if it is
present and if this is true and the option is enabled *note Preferences::
then RHIDE switches automatically to the secondary display when debugging
and your program will run on the primary display.

With this debugging technique you will get the best debugging results
especially when debugging graphics programs.

To use the dual display with RHGDB use the `-D' switch for RHGDB.


File: rhide.inf,  Node: Using the integrated debugger,  Next: Problems with C++ programs,  Prev: Dual display debugging,  Up: Debugging with RHIDE

5.3 Using the integrated debugger
=================================

If you are familiar with Borland's debugger, you will see, that most of
the functions of that debugger are implemented in the same or in a similar
way (this includes the key bindings).

* Menu:

* Stepping through the source code::
* Evaluating the contents of variables::
* Watching the contents of variables::


File: rhide.inf,  Node: Stepping through the source code,  Next: Evaluating the contents of variables,  Prev: Using the integrated debugger,  Up: Using the integrated debugger

5.3.1 Stepping through the source code
--------------------------------------

For stepping through your code, there are three ways. This is at first the
Step-function <F8>. With this you execute a complete source line. If there
is a function call at the current execution point, this function is called
without debugging it. This technique is the same like the `next'-command
from GDB.

The next way is the Trace-function.  It is like the Step-function, <F7>,
except that if there is a function call at the current execution point,
you will go into this function when there is debugging information for
that function available.  This technique is the same as the `step'-command
from GDB.

And the third way is the Goto-Cursor-function. For this, move the cursor
to the line in your source code and press <F4>. Now the execution of your
program is continued until it comes to that line. Sometimes you will get
an error message, that for the specified line is no code generated.  This
comes from the optimization of your code by GCC. In this case try a line
below or above.


File: rhide.inf,  Node: Evaluating the contents of variables,  Next: Watching the contents of variables,  Prev: Stepping through the source code,  Up: Using the integrated debugger

5.3.2 Evaluating the contents of variables
------------------------------------------

You can evaluate also the the contents of variables, when your program has
been started. For this you can press `Ctrl+F4' and you will see a dialog,
where you can type in the expression to evaluate, a line with the result
and a line, where you can give the expression a new value. If you have
pressed this in an editor window, RHIDE tries to find the word under the
cursor and copies this as default in the expression input line. To get the
contents of this expression you have to press the _Evaluate_-button.

If the expression could not be evaluated so it is shown in the result line.
For the exact syntax of getting the contents of an expression see *Note
Expressions: (gdb)Expressions. You can also show the value of the
expression in several formats *note Output Formats: (gdb)Output Formats.

In addition to the functionality of the Borland debuggers, GDB (and of
course also RHIDE) can evaluate the result of function calls. If you have,
for example, in your debugged program a function
     int foo(int arg1)
     {
     /* do something and return a value */
     }
defined, you can type in the expression input line
     foo(16)
and you will get as result, what the function would return, if it is
called with the argument `16'. As arguments you can also use any known
variable or complex expressions.

A known limitation is, that the expressions are NOT checked for validity.
That means, you can produce any exception there, which will terminate your
program. As an example type in the expression input line
3/0
And, of course, you cannot assign to a function call a new value.

As an special side effect you can use this also as a calculator. You can
evaluate any trivial or complex expression and this is also available, if
you haven't started the integrated debugger.


File: rhide.inf,  Node: Watching the contents of variables,  Prev: Evaluating the contents of variables,  Up: Using the integrated debugger

5.3.3 Watching the contents of variables
----------------------------------------

In addition to a single look at the contents of a variable, you can add
the variable to a list which is updated after each debugger step and is
shown in the watching window. For this function you can use the hotkey
`Ctrl+F7'.

Within the watch window you can press <Enter> on an expression to change
that expression (NOT the contents of that expression) or you can press
<Del> to remove the variable from the watch window.


File: rhide.inf,  Node: Problems with C++ programs,  Next: Using Breakpoints,  Prev: Using the integrated debugger,  Up: Debugging with RHIDE

5.4 Problems with C++ programs
==============================

Because GDB cannot handle correctly C++ debugging information when it is
generated as COFF debugging information (with stabs debugging information
there is no such limitation and you can skip reading more) you will have
many problems when debugging C++ programs to get the contents of a
variable when it is a member of a class. Because GDB does not detect, that
your program is a C++ program, it sees it as a normal C program and so GDB
does nothing know about classes and all what have to do with it.

For accessing the member of a baseclass you must do some tricks. Let me
explain it on an example:

     class A
     {
     public:
       int a;
     };

     class B : public A
     {
     public:
       void test();
     };

     void B::test()
     {
       fprintf(stdout,"%d\n",a);
     }

If you debug the program in the function `B::test()' and you want to get
the contents of the member `a', you have to access it with `this->A.a' !!!
That means: At first you must access all members with the implicit `this'
variable and at second you must give all baseclasses until that, where the
member was declared.


File: rhide.inf,  Node: Using Breakpoints,  Prev: Problems with C++ programs,  Up: Debugging with RHIDE

5.5 Using Breakpoints
=====================

Breakpoints are a very useful thing when debugging a program. You can set
a breakpoint at any location of your program and run it. It will be
automatically stopped, if the program execution reaches the breakpoint.

* Menu:

* Setting a breakpoint::
* Modifying and setting a breakpoint::
* Problems with breakpoints::


File: rhide.inf,  Node: Setting a breakpoint,  Next: Modifying and setting a breakpoint,  Prev: Using Breakpoints,  Up: Using Breakpoints

5.5.1 Setting a breakpoint
--------------------------

For setting a breakpoint there are two different ways. The first is by
setting a breakpoint at any line by pressing `Ctrl+F8'. You will see, that
there is a breakpoint set, that this line is shown in another color. If
you hit `Ctrl+F8' on a line, which has already a breakpoint, the
breakpoint at this line is removed.


File: rhide.inf,  Node: Modifying and setting a breakpoint,  Next: Problems with breakpoints,  Prev: Setting a breakpoint,  Up: Using Breakpoints

5.5.2 Modifying and setting a breakpoint
----------------------------------------

The second way is by setting a breakpoint with the breakpoint dialog which
is selectable only from the menu. There you will see any breakpoint for
your program. These breakpoints can be modified now in many things.  In
this dialog you can enable/disable a breakpoint. This is not the same as
deleting and resetting it. If you disable a breakpoint, it is stored
internally but it is not used. If you enable it again all the settings for
that breakpoint, which you have already made, are remembered.

In the breakpoint dialog you can also set or delete a breakpoint with the
given buttons. If you want to set a new breakpoint, use the New-Button.
Then you will get a dialog which you also get when you press the
Modify-Button. In this dialog you can change many things of the breakpoint.

In this dialog is the only point for setting a breakpoint at a specified
function. For doing this you must set at first the type of the breakpoint
to Function. Then you can type in the function input line the name of the
function or hit <Ctrl+F1> to get a list of functions which are available
from where you can select one with <Enter>.

For setting a breakpoint at a specified line, set the breakpoint type to
Line and type in the filename and the linenumber.

The next what you can modify on a breakpoint is a condition. That means
that the breakpoint should stop your program only, if the condition is
true. Write the condition in the programming language of your source file
and you can use any accessible variable and you can call also functions of
the debugged program. For other information about the syntax see *Note
Conditions: (gdb)Conditions.

And at last you can give your breakpoints also a count. A breakpoint count
is a number, how often this breakpoint is ignored. That means, if you type
there, for example, `10', then the RHIDE stops the execution of the program
only, if it comes to that point the tenth time. WARNING: This count is set
by RHIDE only once. After the breakpoint is really hit, from now on the
breakpoint stops your program every time, the breakpoint is reached.


File: rhide.inf,  Node: Problems with breakpoints,  Prev: Modifying and setting a breakpoint,  Up: Using Breakpoints

5.5.3 Problems with breakpoints
-------------------------------

Currently there is a big problem, when you have set a breakpoint at a line
(not at a function) of your program and you edit now the source code. If
you insert or delete some lines the breakpoints, which are set at lines
after or at the modified lines are NOT updated to the correct line number.


File: rhide.inf,  Node: Debugging with RHGDB,  Next: Some FAQs,  Prev: Debugging with RHIDE,  Up: Top

6 Debugging with RHGDB
**********************

In addition to RHIDE, which has an integrated debugger, there is also a
stand-alone debugger called RHGDB. (The name comes from my initials and
GDB)

RHGDB has the same abilities as RHIDE for debugging your program. But it
has no editor. The source files are shown in read only windows where you
can move the cursor and other things (except editing) like in RHIDE.

The menu tree is analog of RHIDE's but (of course) it has not all the menu
entries of RHIDE, because RHGDB should be used only for debugging and
nothing else.

I have written it to debug DJGPP programs, for which there is no RHIDE
project file available but the program has debugging information and, if
you are short of memory, it is much smaller than RHIDE.

The syntax for using RHGDB is very simple. Run it with your program as the
first argument followed by any argument, which should be passed to your
program.

RHGDB saves and reads the options from files with the suffix `.rgd'.  This
is done automatically when you run RHGDB with your program as argument by
searching a file with the same basename of your program and the suffix
`.rgd' and in this file the options are also automatically stored, when
you exit RHGDB.

Alternatively you can also save/read the options from within RHIDE by
selecting the corresponding menu entries from the Options menu.

To use the the "Dual display debugging" feature of RHGDB you must give on
commandline the `-D' switch.


File: rhide.inf,  Node: Some FAQs,  Next: Index,  Prev: Debugging with RHGDB,  Up: Top

7 Some FAQs
***********

_*Question*: I have enabled the `Use tabs' option, but if I move the
cursor through that tab, it seems, that RHIDE uses spaces_ 

*Answer*:This behavior cannot (currently) be changed. Even when you have
enabled the use of real tabs (characters with the code 9), the cursor is
moved as if there are spaces.

_*Question*: Are there any sample project files, to show how RHIDE works?_ 

*Answer*:The sources of RHIDE include many project files to rebuild at
least RHIDE with itself and many others.

_*Question*: I have written some libraries. How can I use them in a
project?_

_*Question*: How I can use a library, which I have?_

*Answer*: There are some different ways to do this. On the one side you can
include them directly in the project with the _Add to project item_
function *note Add item::. But if they are not in the current directory,
you must also set the library search path to the directory, where they are
*note Library directories::. The other variant is to include them in the
list of libraries *note Libraries::.

If this library is created with RHIDE, that means you have a project file
for building this library you can also simply include that project file in
your project. For examples, look at the RHIDE sources in the project file
for RHIDE.

_*Question*: I have a directory, where all my include files are. Can I
setup RHIDE to have this directory every time in the include search path,
when creating a new project?_

_*Question*: I prefer the 80x28 video mode over the default 80x25 mode.
How I can turn this mode on by default for all newly created project
files?_

*Answer*: You can create a default project file. From this file RHIDE reads
all the options, if it creates a new project. The default project must
have the same basename as the executable of RHIDE and must be located in
the same directory.

The creation of such a default project file is very simple. Change to the
directory, where `rhide.exe' is located and run there
     rhide rhide

Now make any changes in the options which you want to have as default for
all newly created projects. This includes also settings in the various
search paths. If you are ready, exit RHIDE and this project file will be
your default project file.

_*Question*: I know, that I can create a default project file. Can I
create and use more than one?_

*Answer*:Since DJGPP supports a quasi-Unix-like link for executables, you
can create such a link also for RHIDE. As an example I will create a link
to `rhide.exe' with the name `myrhide.exe'. At first I have to create the
new file.
     stubify -g myrhide.exe
Now I must tell `myrhide.exe' which program it really should run.
     stubedit myrhide.exe runfile=rhide
Thats all. Or, if you have installed the GNU fileutils, you can use also
now the `ln.exe' program to create the link:
     ln -s rhide.exe myrhide.exe

_*Question*: I don't want to type every time I start RHIDE the commandline
-L DE to use the German user interface. Is there any better way?_

*Answer*: Create an environment variable LANGUAGE with your preferred
language like
     set LANGUAGE=de
and your problem is solved.

_*Question*: I have 4 Mb RAM in my computer and every time, when I compile
large files with optimizations enabled, my hard disk is working very hard._

*Answer*:Buy more RAM!

_*Question*: I heard something about a newer version RHIDE. From where I
can get exact information about this?_

*Answer*: See
at the RHIDE home page (http://www.rhide.com).
This page contains the latest news and the latest version of RHIDE.

_*Question*: I have a lot of money and don't know what to do with it. Can
you help me?_

*Answer*: Send it to me, so I can spend more time for developing RHIDE. My
Address is:
     Robert Ho"hne
     Am Berg 3
     D-09573 Dittmannsdorf
     Germany

_*Question*: RHIDE does all sorts of unpredictable and silly things.  I.e.
does not remember the paths and other settings that I give it._

*Answer*: Did you start RHIDE with a project file i.e. invoke rhide with
     rhide projfile
RHIDE needs a place to keep this information.   Then go into projects tab
and select add then follow the dialog to add the  `.c' or `.cc'  file to
the project.

_*Question*: I do not generate an `.exe' file._

*Answer*: Enter RHIDE from the dos prompt by
     rhide projname
click project tab then add and select your `Hello.c' or `hello.cc' file.
Then compile and then link or else build all.  There should be a file
`projname.exe'.

_*Question*: The linker reports multiple `int main()' in my object file._

*Answer*: You have more than one `.c' or `.cc' file in your project with
`int main()' and the linker does not know where to start the `.exe' file.

_*Question*: It is not finding the include files `*.h'._

*Answer*: You are not referring to the djgpp distribution `*.h' files that
are part of the DJGPP standard distribution.  If so see DJGPP FAQ.  In
RHIDE click the Options tab on top of RHIDE window, then Directories, then
Include, then add the path to the `dot.h' files in the text box as follows:
     $(DJDIR)/contrib/grx/include $(DJDIR)/contrib/here/there etc
This path can also be set in the `djgpp.env' file (see the DJGPP
information).

_*Question*: It's still not finding the `dot.h' files._

*Answer*: Invoke Win95 long file names at the command line via
     rhide -y projname

_*Question*: How do I set rhide to long file names without -y each time?_

*Answer*: Add the -Y to your RHIDEOPT environment variable.

_*Question*: The linker is not finding various library functions that are
in an extension to DJGPP.  For example functions that are part of SWORD
Graphic User Interface or GRX. Graphic Package._

*Answer*: Click the Options tab then Libraries then mark one of the boxes
and type in the Library name that you need i.e. GRX for `libgrx.a'.

_*Question*: It's still not finding the library functions._

*Answer*: Go into Options tab on top of the RHIDE window then Directories
then Libraries, then add the path to the `libdot.a' files in the text box
as follows:
     $(DJDIR)/contrib/lib/here/there $(DJDIR)/contrib/grx/lib
This can also be set in the `djgpp.env' file (see the DJGPP information).

_*Question*: Where is the rhide documentation and how do I read it?_

*Answer*:Get the file txixxxb.zip and unzip it.  Go into dir info and edit
the file DIR.  Add `rhide.inf' or any other `dot.inf' to DIR.  Use the
same format as the existing `dot.inf' files in DIR. It's obvious from the
format how to do this.  Save and exit from the edit session.  Type "info"
take the lesson on how to run info and you are fully equipped to run an
old world non gui browser and are ready to learn all about gnu.

If you are using RHIDE, simply hit <F1> and browse through the help, it IS
the RHIDE documentation!

_*Question*: The linker reports out of memory when linking many `*.o'
files._

*Answer*: This should occour only on Windows 95 users (or W98).  Give dos
more memory. Quit rhide and dos.  Select the dos icon or its alias (it's
in `windows/start/programs') RIGHT click select properties then select
memory tab then set Protected mode DPMI to maximum 65535 and have another
go.

_*Question*: I have a big svga monitor and rhide looks like cga screen.
What can I do to take advantage of my monitor?_

*Answer*:Set the dos and rhide screens to suite your taste.  Quit rhide
and dos.  Select the dos icon or its alias (it's in
`windows/start/programs') RIGHT click select properties then select screen
tab then set the type of screen that you require in dos.  Then get into
RHIDE and select options tab on the top of the screen then Environment and
then Preferences then set the type of screen to your liking.

_*Question*: I`m running under W95/98 with long filenames and have some
source files ond/or directory names with spaces in it. I get many errors
when trying to compile or link. How can I solve this?_

*Answer*: This is a limitation of RHIDE. Theortically it could be fixed,
but this would need many changes in the RHIDE sources. I`m not willing to
do. So, simply do not not filenames with spaces.

_*Question*: How do I setup RHIDE to run under OS/2?_

*Answer*: OS/2 (WARP3 and above) Users have to pay attention to the
following DOS-Settings:
     - DPMI_DOS_API must be set to "Enabled"
     - DPMI_MEMORY_LIMIT should be set above 8MB (better >10)
     - DOS_HIGH must be set to OFF
     - DOS_UMB must be set to OFF
     - DOS_FILES should be set fairly higher than 20 (>60)
     - DOS_BREAK "ON" might be useful sometimes :-)
     - MOUSE_EXCLUSIVE_ACCESS should be set to off
     - You can use RHIDE with or without the "-M" option

_*Question*: I think, I found a bug in RHIDE. How can I report it?_

*Answer*:At first try for your own to solve the problem by checking the
documentation.

If the bug is releated to the editor (some keys do not work, autoindenting
is not like you expect, program crash after some special editing ...)
please send them to salvador@inti.gov.ar <Salvador Eduardo Tropea (SET)>,
because he is the author of the in RHIDE integrated editor.

See at the RHIDE home page (http://www.rhide.com), if this problem was
already reported by other users. As the next ask the problem in the news
group `news:comp.os.msdos.djgpp', because there may be some other people
with the same problem, and they can give you an answer or I, because I
read this group also.

GNU/Linux users should post the problems in the linux group. To make sure
that I will read it also, please send a CC to me because my time doesn`t
allow me to read that huge newsgroups.

If this don't help you, do the following:

     Try to reproduce the error with the smallest possible project or
     source file. Run RHIDE with all debugging options enabled and redirect
     the printed output to a file *note Debugging RHIDE::. Send me this
     file and a detailed as possible description of the problem and
     include in your report the exact version of RHIDE you are using.

     The exact version is shown in the About-Dialog and means the version
     number together with the build date.


And a last note. If I get bug reports or questions or problems with RHIDE
which I think that they are of common interest be warned that I bounce
them simply to the news groups because at this time it is impossible for
me to answer all the mails I get. So the best is to post the questions
and/or problems only in the news groups.


File: rhide.inf,  Node: Index,  Next: Index of key commands,  Prev: Some FAQs,  Up: Top

8 Index
*******

 [index ]
* Menu:

* Adding a file to the project:          Add item.               (line   6)
* Additional options for GCC:            Compiler options.       (line   6)
* Arguments for your program:            Arguments.              (line   6)
* Assembler files, which must be preprocessed: Known suffixes.   (line  77)
* Automatic dependencies:                Standard headers.       (line   6)
* Automatic dependencies, problems with it: Problems with automatic dependencies.
                                                                 (line   6)
* Automatic indention:                   autoindent.             (line   6)
* Automatic intention:                   Intelligent C indenting.
                                                                 (line   6)
* Background colors, 16:                 16 background colors.   (line   6)
* Backup files:                          create backup files.    (line   6)
* Blinking colors:                       16 background colors.   (line   6)
* block commands:                        Block commands.         (line   6)
* Bug report:                            Bug report.             (line   6)
* Bug, reporting it:                     Some FAQs.              (line 211)
* Build:                                 Build all.              (line   6)
* Build the library:                     Link.                   (line   6)
* Building a library:                    Main targetname.        (line   6)
* Building an executable:                Main targetname.        (line   6)
* Builtin calculator:                    Evaluating the contents of variables.
                                                                 (line  38)
* Button:                                How the dialogs work.   (line  17)
* C Flags, edit them:                    C-Flags.                (line   6)
* C language specific flags:             C options.              (line   6)
* C++ flags, edit them:                  CXX-Flags.              (line   6)
* Caching of files:                      No file caching.        (line   6)
* Calculator:                            Calculator.             (line   6)
* Call stack:                            Call stack.             (line   6)
* Cascade the windows:                   Cascade.                (line   6)
* Changing the name of the library:      Main targetname.        (line   6)
* Changing the name of the program:      Main targetname.        (line   6)
* Changing the search paths for files:   Directories.            (line   6)
* Checkbox:                              How the dialogs work.   (line  35)
* Checking dependencies:                 Checking the dependencies.
                                                                 (line   6)
* Clear:                                 Clear.                  (line   6)
* Clearing the dependencies:             Clear dependencies.     (line   6)
* Clearing the project:                  Delete rebuildable files.
                                                                 (line   6)
* Clipboard:                             Show Clipboard.         (line   6)
* Close a project:                       Close project.          (line   6)
* Close a window:                        Close.                  (line   6)
* COFF file, Creating:                   Main targetname.        (line  12)
* Colors:                                Colors.                 (line   6)
* Column cursor:                         Column cursor.          (line   6)
* Commandline arguments for your program: Arguments.             (line   6)
* Commandline options:                   Getting started.        (line   6)
* Compile:                               Compile.                (line   6)
* Compile without a project:             Some hints and problems.
                                                                 (line   6)
* Compiler options:                      Compiler options.       (line   6)
* COMSPEC:                               DOS Shell.              (line   6)
* Configuring RHIDE:                     Change the defaults of RHIDE.
                                                                 (line   6)
* Context help:                          The INFO Viewer.        (line  21)
* Controlling the optimization of the code: Optimizations.       (line   6)
* Controlling the warnings:              Warnings.               (line   6)
* Copy:                                  Copy.                   (line   6)
* Copy to Windows clipboard:             Copy to Windows clipboard.
                                                                 (line   6)
* Cplusplus options:                     CXX options.            (line   6)
* Creating a COFF file:                  Main targetname.        (line  12)
* Creating a makefile <1>:               The program GPR2MAK.    (line   6)
* Creating a makefile <2>:               all dependencies in makefile.
                                                                 (line   6)
* Creating a makefile:                   Write Makefile.         (line   6)
* Creating a new file:                   New.                    (line   6)
* Creating a new project:                Open project.           (line   6)
* Creating a project:                    Some FAQs.              (line 101)
* Creating an exe-file:                  Some FAQs.              (line 110)
* Creating backup files:                 create backup files.    (line   6)
* Cross cursor <1>:                      Row cursor.             (line   6)
* Cross cursor:                          Column cursor.          (line   6)
* Cursor moving:                         Cursor moving commands. (line   6)
* Cursor through tabs:                   Some FAQs.              (line   7)
* Cut:                                   Cut.                    (line   6)
* CXX options:                           CXX options.            (line   6)
* Debugging:                             Debugging RHIDE.        (line   6)
* Debugging info:                        Debugging.              (line   6)
* Debugging RHIDE <1>:                   Show GDB commands.      (line   6)
* Debugging RHIDE:                       show process information.
                                                                 (line   6)
* Debugging with RHIDE:                  Debug.                  (line   6)
* Debugging, dual display:               Use dual display.       (line   6)
* Debugging, edit the flags:             Debugging-Flags.        (line   6)
* Default commandline:                   Some FAQs.              (line 138)
* Default file mask:                     Open.                   (line  11)
* Default language:                      Some FAQs.              (line  74)
* Default project file:                  Some FAQs.              (line  43)
* Default project file, more than one:   Some FAQs.              (line  60)
* Define your own reserved words:        User words.             (line   6)
* Defines:                               Compiler options.       (line   6)
* Delete a file from the project:        Delete item.            (line   6)
* Delete the selected text:              Clear.                  (line   6)
* Deleting commands:                     Erasing commands.       (line   6)
* Dependencies for a file:               Includes.               (line   6)
* Dependencies in makefile:              all dependencies in makefile.
                                                                 (line   6)
* Dependencies, checking:                Checking the dependencies.
                                                                 (line   6)
* Dependencies, problems with it:        Problems with automatic dependencies.
                                                                 (line   6)
* Dialog function keys:                  How the dialogs work.   (line   6)
* Different name for RHIDE:              Some FAQs.              (line  60)
* Directory for temp files:              Running under Windows 95.
                                                                 (line  16)
* Disable shadows:                       Use no shadows.         (line   6)
* Disassembler:                          Disassembler window.    (line   6)
* Documentation for RHIDE:               Some FAQs.              (line 157)
* Donations to the author:               Some FAQs.              (line  94)
* DOS:                                   DOS Shell.              (line   6)
* Dual display:                          Dual display debugging. (line   6)
* Dual display when debugging:           Use dual display.       (line   6)
* Dual display with RHGDB:               Debugging with RHGDB.   (line  35)
* Edit a file:                           Open.                   (line   6)
* Edit the list of C flags:              C-Flags.                (line   6)
* Edit the list of C++ flags:            CXX-Flags.              (line   6)
* Edit the list of debugging flags:      Debugging-Flags.        (line   6)
* Edit the list of Fortran flags:        Fortran-Flags.          (line   6)
* Edit the list of optimization flags:   Optimization-Flags.     (line   6)
* Edit the list of Pascal flags:         Pascal-Flags.           (line   6)
* Edit the list of reserved words:       Reserved words.         (line   6)
* Edit the list of reserved words for Pascal: Pascal reserved words.
                                                                 (line   6)
* Edit the list of user defined words:   User words.             (line   6)
* Edit the list of warning flags:        Warning-Flags.          (line   6)
* Editor:                                How the editor works.   (line   6)
* Editor options:                        Editor options.         (line   6)
* Editor, block commands:                Block commands.         (line   6)
* Editor, cursor moving:                 Cursor moving commands. (line   6)
* Editor, erasing commands:              Erasing commands.       (line   6)
* Editor, other useful commands:         Other commands.         (line   6)
* Editor, select some text:              Text selecting and searching commands.
                                                                 (line   6)
* Environment variables <1>:             Environment variables.  (line   6)
* Environment variables <2>:             Directories.            (line   9)
* Environment variables:                 Setting environment variables for RHIDE.
                                                                 (line   6)
* Erasing commands:                      Erasing commands.       (line   6)
* Executing your program:                Run.                    (line   6)
* Exit:                                  Exit.                   (line   6)
* Expanding tabs:                        Expand all tabs.        (line   6)
* Exporting the RHIDE project files:     The program GPREXP.     (line   6)
* File caching:                          No file caching.        (line   6)
* File open dialog:                      Open.                   (line  11)
* Files for syntax help:                 Files to search.        (line   6)
* Finding text:                          Find.                   (line   6)
* Flags for C files:                     C options.              (line   6)
* Flags for C++ files:                   CXX options.            (line   6)
* Flags for Fortran files:               Fortran options.        (line   6)
* Flags for Pascal files:                Pascal options.         (line   6)
* Fortran flags, edit them:              Fortran-Flags.          (line   6)
* Fortran options:                       Fortran options.        (line   6)
* Free memory:                           show free memory.       (line   6)
* Function call stack:                   Call stack.             (line   6)
* Generating of warnings:                Warnings.               (line   6)
* Global editor options:                 Editor options.         (line   6)
* GNU/Linux:                             Running under GNU/Linux.
                                                                 (line   6)
* Goto a line number:                    Goto line.              (line   6)
* GPC, -automake:                        Primary file.           (line   6)
* Header files:                          Include directories.    (line   6)
* Help:                                  Help.                   (line   6)
* Help about a function:                 Syntax help.            (line   6)
* Help about help:                       Help about help.        (line   6)
* Help about the Info-viewer:            Help about help.        (line   6)
* Help system:                           The INFO Viewer.        (line   6)
* Highlight the syntax:                  Syntax highlighting.    (line   6)
* Highlighting the matching parenthesis: Match pair highlight.   (line   6)
* Highlighting the syntax:               syntax highlighting.    (line   6)
* Hints:                                 Some hints and problems.
                                                                 (line   6)
* How the editor works:                  How the editor works.   (line   6)
* Include directories:                   Include directories.    (line   6)
* Include files:                         Include directories.    (line   6)
* Include files, not finding:            Some FAQs.              (line 123)
* Include paths:                         Some FAQs.              (line 123)
* Info Viewer:                           The INFO Viewer.        (line   6)
* Input line:                            How the dialogs work.   (line  32)
* Intelligent C indenting:               Intelligent C indenting.
                                                                 (line   6)
* Language, setting the default:         Some FAQs.              (line  74)
* Languages:                             Supported languages.    (line   6)
* Latest version of RHIDE:               Some FAQs.              (line  87)
* Leaving RHIDE:                         Exit.                   (line   6)
* LFN:                                   Running under Windows 95.
                                                                 (line   6)
* Libc reference:                        libc reference.         (line   6)
* Libraries:                             Libraries.              (line   6)
* Libraries in a project:                Some FAQs.              (line  23)
* Library paths:                         Some FAQs.              (line 142)
* Library search path:                   Library directories.    (line   6)
* Link the program:                      Link.                   (line   6)
* Linker options:                        Linker options.         (line   6)
* Linker problems:                       Some FAQs.              (line 169)
* List of all windows:                   List.                   (line   6)
* Listbox:                               How the dialogs work.   (line  24)
* Lists:                                 How the dialogs work.   (line  24)
* Load options <1>:                      Load options.           (line   6)
* Load options:                          Saving/Loading the options.
                                                                 (line   6)
* Loading a file:                        Open.                   (line   6)
* Local options:                         Local options for a project item.
                                                                 (line   6)
* Local options for a project item:      Local options.          (line   6)
* Long filenames <1>:                    Some FAQs.              (line 188)
* Long filenames:                        Running under Windows 95.
                                                                 (line   6)
* Macro executing:                       Play.                   (line   6)
* Macro recording:                       Record.                 (line   6)
* Macro stop recording:                  Stop.                   (line   6)
* Macros <1>:                            Macro.                  (line   6)
* Macros:                                Defining macros.        (line   6)
* Main targetname:                       Main targetname.        (line   6)
* Make:                                  Make.                   (line   6)
* Make clear:                            Delete rebuildable files.
                                                                 (line   6)
* Makefile:                              Write Makefile.         (line   6)
* Mark some text:                        Text selecting and searching commands.
                                                                 (line   6)
* Memory exhausted:                      Some FAQs.              (line 169)
* Message window:                        Message window.         (line   6)
* Miscellaneous commands:                Other commands.         (line   6)
* Mouse options:                         Mouse options.          (line   6)
* Moving a window:                       Size/move.              (line   6)
* MS-DOS:                                DOS Shell.              (line   6)
* Name of the main target:               Main targetname.        (line   6)
* Next message:                          Next message.           (line   6)
* Next window:                           Next.                   (line   6)
* No shadows:                            Use no shadows.         (line   6)
* Object file search path:               Object directories.     (line   6)
* Object files in a different directory: Object directories.     (line   6)
* Open a file:                           Open.                   (line   6)
* Open a project:                        Open project.           (line   6)
* Optimal filling:                       Optimal fill.           (line   6)
* Optimizations, edit the flags:         Optimization-Flags.     (line   6)
* Optimizing the code:                   Optimizations.          (line   6)
* Options for a single file:             Local options.          (line   6)
* Options for the linker:                Linker options.         (line   6)
* Options, RHIDE forgot them:            Some FAQs.              (line 101)
* Order of the project items:            Items of your project.  (line  11)
* OS/2 <1>:                              Running under OS/2.     (line   6)
* OS/2:                                  Some FAQs.              (line 196)
* Other compilers:                       Change the defaults of RHIDE.
                                                                 (line   6)
* Pascal flags, edit them:               Pascal-Flags.           (line   6)
* Pascal options:                        Pascal options.         (line   6)
* Pascal reserved words:                 Pascal reserved words.  (line   6)
* Paste:                                 Paste.                  (line   6)
* Paste from Windows clipboard:          Paste from Windows clipboard.
                                                                 (line   6)
* Persistent blocks:                     Persistent blocks.      (line   6)
* Playing the macro:                     Play.                   (line   6)
* Preprocessing Assembler files:         Known suffixes.         (line  77)
* Previous message:                      Previous message.       (line   6)
* Previous window:                       Previous.               (line   6)
* Problems:                              Some hints and problems.
                                                                 (line   6)
* Project window:                        Project window.         (line   6)
* Pseudo Macros:                         Defining macros.        (line   6)
* Quit:                                  Exit.                   (line   6)
* Radiobuttons:                          How the dialogs work.   (line  43)
* RCS:                                   RCS and RHIDE.          (line   6)
* Rebuilding RHIDE:                      Some FAQs.              (line  13)
* Redirecting stderr:                    redirect stderr.        (line   6)
* Redirecting stdout:                    redirect stdout.        (line   6)
* Redo:                                  Redo.                   (line   6)
* Remove a file from the project:        Delete item.            (line   6)
* Removing all targets:                  Delete rebuildable files.
                                                                 (line   6)
* Removing the internal dependencies:    Clear dependencies.     (line   6)
* Repeat of replacing:                   Search again.           (line   6)
* Repeat of searching:                   Search again.           (line   6)
* Replacing text:                        Replace.                (line   6)
* Reporting bugs <1>:                    Bug report.             (line   6)
* Reporting bugs:                        Some FAQs.              (line 211)
* Reserved words:                        Reserved words.         (line   6)
* Resizing a window:                     Size/move.              (line   6)
* Reverse mouse buttons:                 Mouse options.          (line   6)
* RHIDE project files:                   Some FAQs.              (line  13)
* RHIDE, latest version:                 Some FAQs.              (line  87)
* rhide.env:                             Setting environment variables for RHIDE.
                                                                 (line  16)
* rhide.env, Samples:                    Setting environment variables for RHIDE.
                                                                 (line  57)
* RHIDEOPT:                              Some FAQs.              (line 138)
* Row cursor:                            Row cursor.             (line   6)
* Running your program:                  Run.                    (line   6)
* Sample projects:                       Some FAQs.              (line  13)
* Save all files to disk:                Save all.               (line   6)
* Save options <1>:                      Saving/Loading the options.
                                                                 (line   6)
* Save options:                          Save options.           (line   6)
* Save the file to disk:                 Save.                   (line   6)
* Save the file under a different name:  Save as.                (line   6)
* Screen size:                           Some FAQs.              (line 178)
* Search a function:                     Jump to function.       (line   6)
* Search path for include files:         Include directories.    (line   6)
* Search path for libraries:             Library directories.    (line   6)
* Search path for object files:          Object directories.     (line   6)
* Search path for source files:          Sources directories.    (line   6)
* Searching text:                        Find.                   (line   6)
* Searchmethod for syntax help:          Options for searching.  (line   6)
* Select a window:                       Selecting a window.     (line   6)
* Select the project window:             Project.                (line   6)
* Selecting some text:                   Text selecting and searching commands.
                                                                 (line   6)
* Show free memory:                      show free memory.       (line   6)
* Show the includes for a file:          Includes.               (line   6)
* Show the project window:               Project.                (line   6)
* Show the user screen:                  UserScreen.             (line   6)
* Show what RHIDE does:                  show process information.
                                                                 (line   6)
* Single file compiling:                 Some hints and problems.
                                                                 (line   6)
* Size for the tabs:                     Tabsize.                (line   6)
* Source file search path:               Sources directories.    (line   6)
* Source files in a different directory: Sources directories.    (line   6)
* Space as part of an argument:          Syntax of arguments.    (line   6)
* Spaces in filenames:                   Some FAQs.              (line 188)
* Specs:                                 Setting environment variables for RHIDE.
                                                                 (line   6)
* Standard headers:                      Standard headers.       (line   6)
* Start:                                 Getting started.        (line   6)
* Starting a macro:                      Record.                 (line   6)
* Starting your program:                 Run.                    (line   6)
* stderr redirecting:                    redirect stderr.        (line   6)
* stdout redirecting:                    redirect stdout.        (line   6)
* Stopping a macro:                      Stop.                   (line   6)
* Store a file:                          Save.                   (line   6)
* Suppressing of warnings:               Warnings.               (line   6)
* Syntax help:                           Syntax help.            (line   6)
* Syntax help, Index:                    Index for syntax help.  (line   6)
* Syntax help, Options:                  Options for searching.  (line   6)
* Syntax highlighting <1>:               syntax highlighting.    (line   6)
* Syntax highlighting:                   Syntax highlighting.    (line   6)
* Tab size:                              Tabsize.                (line   6)
* Tabs:                                  Use tabs.               (line   6)
* Tabs to spaces:                        Expand all tabs.        (line   6)
* Temp directory:                        Running under Windows 95.
                                                                 (line  16)
* temporary do to DOS:                   DOS Shell.              (line   6)
* Text mode:                             Screen mode.            (line   6)
* Tile the windows:                      Tile.                   (line   6)
* Transparent blocks:                    Transparent Blocks.     (line   6)
* Turbo Vision:                          What is Turbo Vision.   (line   6)
* Type of the main target:               Main targetname.        (line   6)
* Undo:                                  Undo.                   (line   6)
* Use of libraries:                      Some FAQs.              (line  23)
* User defined compiler:                 User defined compiler.  (line   6)
* User defined reserved words:           User words.             (line   6)
* User screen:                           UserScreen.             (line   6)
* Using the dialog:                      How the dialogs work.   (line   6)
* Using the macro:                       Play.                   (line   6)
* Using true tabs:                       Use tabs.               (line   6)
* Version of RHIDE:                      About.                  (line   6)
* Video mode:                            Screen mode.            (line   6)
* Warnings:                              Warnings.               (line   6)
* Warnings, edit the flags:              Warning-Flags.          (line   6)
* Window, close it:                      Close.                  (line   6)
* Window, moving:                        Size/move.              (line   6)
* Window, resizing:                      Size/move.              (line   6)
* Window, select it:                     Selecting a window.     (line   6)
* Window, select the next:               Next.                   (line   6)
* Window, select the previous:           Previous.               (line   6)
* Window, zoom it:                       Zoom.                   (line   6)
* Windows:                               Windows.                (line   6)
* Windows 95 <1>:                        Running under Windows 95.
                                                                 (line   6)
* Windows 95:                            Some FAQs.              (line 188)
* Windows, cascade them:                 Cascade.                (line   6)
* Windows, show a list of all:           List.                   (line   6)
* Windows, tile all:                     Tile.                   (line   6)
* Write a makefile:                      Write Makefile.         (line   6)
* xterm, running RHIDE in it:            Running under GNU/Linux.
                                                                 (line  20)
* Zoom a window:                         Zoom.                   (line   6)


File: rhide.inf,  Node: Index of key commands,  Prev: Index,  Up: Top

9 Index of key commands
***********************

 [index ]
* Menu:

* Activate a button | <ENTER>:           How the dialogs work.    (line 19)
* Activate a flag | <SPACE>:             How to toggle these flags.
                                                                  (line  8)
* Activate menu bar | <F10>:             What is Turbo Vision.    (line 32)
* Add a project item | <Ins>:            Add item.                (line  8)
* Again find/replace | <Ctrl+L>:         Text selecting and searching commands.
                                                                  (line 21)
* Auto indent | <Ctrl+O>:                Other commands.          (line  8)
* Begin of file | <Ctrl+PgUp>:           Cursor moving commands.  (line 26)
* Block indenting | <Ctrl+K+Tab>:        Block commands.          (line 25)
* Block unindenting | <Ctrl+K+Shift+Tab>: Block commands.         (line 28)
* Bottom of file | <Ctrl+PgDown>:        Cursor moving commands.  (line 29)
* Call stack | <Ctrl+F3>:                Call stack.              (line 11)
* Close a window | <Alt+F3>:             Close.                   (line  7)
* Close a window | <Del>:                List.                    (line  8)
* Compile | <Alt+F9>:                    Compile.                 (line 10)
* Context help | <Ctrl+F1>:              The INFO Viewer.         (line 24)
* Copy | <Ctrl+Ins> <1>:                 Text selecting and searching commands.
                                                                  (line  8)
* Copy | <Ctrl+Ins>:                     Copy.                    (line  7)
* Copy | <Ctrl+K+K>:                     Text selecting and searching commands.
                                                                  (line  8)
* Cursor down | <Ctrl+X>:                Cursor moving commands.  (line 12)
* Cursor left | <Ctrl+S>:                Cursor moving commands.  (line  6)
* Cursor right | <Ctrl+D>:               Cursor moving commands.  (line  8)
* Cursor up | <Ctrl+E>:                  Cursor moving commands.  (line 10)
* Cut | <Ctrl+K+Y>:                      Text selecting and searching commands.
                                                                  (line 10)
* Cut | <Shift+Del> <1>:                 Text selecting and searching commands.
                                                                  (line 10)
* Cut | <Shift+Del>:                     Cut.                     (line  7)
* Delete a character | <Ctrl+G>:         Erasing commands.        (line  6)
* Delete a character | <Ctrl+H>:         Erasing commands.        (line  9)
* Delete selected text | <Ctrl+Del>:     Text selecting and searching commands.
                                                                  (line 15)
* Delete to the beginning of line | <Ctrl+Q+H>: Erasing commands. (line 16)
* Delete to the end of line | <Ctrl+Q+Y>: Erasing commands.       (line 14)
* Delete to the next word | <Ctrl+T>:    Erasing commands.        (line 18)
* Delete to the previous word | <Ctrl+Backspace>: Erasing commands.
                                                                  (line 21)
* End of block | <Ctrl+K+K>:             Block commands.          (line  8)
* End of file | <Ctrl+Q+C>:              Cursor moving commands.  (line 29)
* End of line | <Ctrl+Q+D>:              Cursor moving commands.  (line 22)
* Erase a character | <Backspace>:       Erasing commands.        (line  9)
* Erase a character | <Del>:             Erasing commands.        (line  6)
* Erase a line | <Ctrl+Y>:               Erasing commands.        (line 12)
* Evaluate/Modify | <Ctrl+F4>:           Evaluate/Modify.         (line  8)
* Execute a macro | <Shift+Space>:       Other commands.          (line 18)
* Find | <Ctrl+Q+F> <1>:                 Text selecting and searching commands.
                                                                  (line 19)
* Find | <Ctrl+Q+F>:                     Find.                    (line 10)
* Go to cursor (No display swap) | <Shift+F4>: Go to cursor.      (line 13)
* Go to cursor | <F4>:                   Go to cursor.            (line 13)
* Goto line | <Ctrl+J>:                  Goto line.               (line  9)
* Help about the INFO Viewer | <F1>:     The INFO Viewer.         (line 11)
* Help about the INFO viewer | <F1>:     Help.                    (line 13)
* Help | <F1>:                           Help.                    (line 12)
* Ignoring | <Ctrl+C>:                   What is RHIDE?.          (line 35)
* Indent block | <Ctrl+K+I>:             Block commands.          (line 10)
* Interrupting the compilers | <Ctrl+Break>: What is RHIDE?.      (line 35)
* Jump to a line | <Ctrl+J>:             Other commands.          (line 10)
* Jump to a marker | <Ctrl+Q+?>:         Other commands.          (line 15)
* Jump to function | <Alt+F2>:           Jump to function.        (line 13)
* Jump to the source line | <ENTER>:     Message window.          (line  9)
* Leaving a dialog | <ESC> <1>:          How to toggle these flags.
                                                                  (line 12)
* Leaving a dialog | <ESC> <2>:          Open.                    (line 29)
* Leaving a dialog | <ESC>:              How the dialogs work.    (line  8)
* Leaving RHIDE | <Alt+X>:               Exit.                    (line  7)
* List of all windows | <Alt+0>:         List.                    (line  6)
* List of functions | <Ctrl+F1>:         Modifying and setting a breakpoint.
                                                                  (line 22)
* Local options | <Ctrl+O> <1>:          Local options for a project item.
                                                                  (line  7)
* Local options | <Ctrl+O>:              Local options.           (line  8)
* Macro play | <Ctrl+F10>:               Play.                    (line  8)
* Macro start | <Shift+F10>:             Record.                  (line  9)
* Macro stop | <Alt+F10>:                Stop.                    (line  8)
* Make | <F9>:                           Make.                    (line  7)
* Menu | <F10> <1>:                      Getting started.         (line 20)
* Menu | <F10>:                          Description of the pull-down menus.
                                                                  (line  8)
* Move block | <Ctrl+K+V>:               Block commands.          (line 23)
* Next input line | <Tab>:               Libraries.               (line 13)
* Next message | <Alt+F8>:               Next message.            (line  9)
* Next window | <F6>:                    Next.                    (line  6)
* open a file | <F3>:                    Open.                    (line  7)
* Open a project item | <ENTER>:         Open a project item.     (line  6)
* Open an include file | <ENTER>:        Dependencies of project item.
                                                                  (line 10)
* Overwrite mode | <Ctrl+V>:             Other commands.          (line  6)
* Page down | <Ctrl+C>:                  Cursor moving commands.  (line 18)
* Page up | <Ctrl+R>:                    Cursor moving commands.  (line 20)
* Paste | <Ctrl+K+C>:                    Text selecting and searching commands.
                                                                  (line 12)
* Paste | <Shift+Ins> <1>:               Text selecting and searching commands.
                                                                  (line 12)
* Paste | <Shift+Ins>:                   Paste.                   (line  7)
* Previous input line | <Shift+Tab>:     Libraries.               (line 13)
* Previous message | <Alt+F7>:           Previous message.        (line  9)
* Previous window | <Shift+F6>:          Previous.                (line  6)
* Program reset | <Ctrl+F2>:             Program reset.           (line  9)
* Read block from file | <Ctrl+K+R>:     Block commands.          (line 31)
* Remove a project item | <Del>:         Delete item.             (line  8)
* Remove from the watches | <Del>:       Watching the contents of variables.
                                                                  (line 13)
* Replace | <Ctrl+Q+A> <1>:              Replace.                 (line 10)
* Replace | <Ctrl+Q+A>:                  Text selecting and searching commands.
                                                                  (line 17)
* Resize/move a window | <Ctrl+F5>:      Size/move.               (line 14)
* Resizing a window | <Shift+>:          Size/move.               (line  8)
* Run | <Ctrl+F9>:                       Run.                     (line  7)
* saving a file | <F2>:                  Save.                    (line  7)
* Search again | <Ctrl+L>:               Search again.            (line  8)
* Select a item in a Listbox | <ENTER>:  How the dialogs work.    (line 29)
* Select a menu entry | <ENTER>:         What is Turbo Vision.    (line 35)
* Select a message | <ENTER>:            Some hints and problems. (line 13)
* Select a window | <ENTER>:             List.                    (line  7)
* Select menu item | <ENTER>:            Description of the pull-down menus.
                                                                  (line  9)
* Select text | <Shift>:                 Text selecting and searching commands.
                                                                  (line  6)
* Selecting a window | <Alt>:            Selecting a window.      (line  8)
* Set a marker | <Ctrl+K+?>:             Other commands.          (line 12)
* Show includes | <Ctrl+I>:              Includes.                (line  7)
* Start of block | <Ctrl+K+B>:           Block commands.          (line  6)
* Start of file | <Ctrl+Q+R>:            Cursor moving commands.  (line 26)
* Start of line | <Ctrl+Q+S>:            Cursor moving commands.  (line 24)
* Step over (No display swap) | <Shift+F8>: Step over.            (line 13)
* Step over | <F8>:                      Step over.               (line 13)
* Syntax help | <Ctrl+F1>:               Syntax help.             (line  6)
* System Menu | <Alt+SPACE>:             System menu.             (line  7)
* To lower | <Ctrl+K+O>:                 Block commands.          (line 20)
* To upper | <Ctrl+K+M>:                 Block commands.          (line 17)
* Toggle a breakpoint | <Ctrl+F8>:       Set/Reset Breakpoint.    (line  8)
* Toggle an option | <SPACE>:            How the dialogs work.    (line 38)
* Trace into (No display swap) | <Shift+F7>: Trace into.          (line 13)
* Trace into | <F7>:                     Trace into.              (line 13)
* Undo | <Alt+Backspace>:                Undo.                    (line  6)
* Unindent block | <Ctrl+K+U>:           Block commands.          (line 13)
* Unselect | <Ctrl+K+H>:                 Text selecting and searching commands.
                                                                  (line 23)
* User screen | <Alt+F5>:                UserScreen.              (line  6)
* Watch an expression | <Ctrl+F7>:       Watch an expression.     (line  8)
* Word left | <Ctrl+A>:                  Cursor moving commands.  (line 14)
* Word right | <Ctrl+F>:                 Cursor moving commands.  (line 16)
* Write block to file | <Ctrl+K+W>:      Block commands.          (line 34)
* Zoom a window | <F5>:                  Zoom.                    (line  7)



Tag Table:
Node: Top228
Node: Introduction560
Node: Copying902
Node: Installing RHIDE2582
Node: What is RHIDE?4199
Node: Requirements6255
Node: Getting started7565
Node: Supported languages11211
Node: Debugging RHIDE12522
Node: The program GPR2MAK14041
Node: The program GPREXP15416
Node: First steps with RHIDE16133
Node: What are these so called projects16481
Node: Creating your first project17294
Node: Environment variables19037
Node: Setting environment variables for RHIDE20792
Node: Where to store the environment file25108
Node: General information about how RHIDE works26049
Node: Known suffixes27112
Node: Syntax of arguments30038
Node: Running under Windows 9530487
Node: Running under OS/231863
Node: Running under Windows NT32276
Node: Running under GNU/Linux32576
Node: General use of RHIDE34719
Node: Creating a program34985
Node: Creating a program without a project35677
Node: Creating a library36436
Node: Saving/Loading the options36981
Node: Description of the pull-down menus37839
Node: System menu38562
Node: About39022
Node: Bug report39222
Node: FSDB39482
Node: GREP39759
Node: GDB40093
Node: Refresh Desktop40250
Node: Calculator40590
Node: Puzzle41174
Node: Calender41443
Node: ASCII table41744
Node: File42250
Node: Open42554
Node: New43885
Node: Save44175
Node: Save as44628
Node: Save all44904
Node: DOS Shell45102
Node: Exit45538
Node: Edit45752
Node: Undo46180
Node: Redo46382
Node: Cut46558
Node: Copy46755
Node: Paste46954
Node: Show Clipboard47198
Node: Clear47456
Node: Copy to Windows clipboard47643
Node: Paste from Windows clipboard47945
Node: Expand all tabs48264
Node: Compact text48585
Node: Macro48888
Node: Record49266
Node: Stop49492
Node: Play49659
Node: Search49809
Node: Find50152
Node: Replace50487
Node: Search again50816
Node: Goto line51030
Node: Jump to function51285
Node: Next message51770
Node: Previous message52064
Node: RUN52349
Node: Run52633
Node: Step over53006
Node: Trace into53440
Node: Go to cursor53897
Node: Program reset54388
Node: Main function54683
Node: Arguments55187
Node: Compile menu55425
Node: Compile55707
Node: Make56072
Node: Link56428
Node: Build all56768
Node: Debug56963
Node: Set/Reset Breakpoint57413
Node: Evaluate/Modify57625
Node: Watch an expression57857
Node: Breakpoints58086
Node: Disassembler window58275
Node: Call stack59057
Node: List of Functions59484
Node: PROJECT60541
Node: Open project60943
Node: Close project61724
Node: Add item61948
Node: Delete item62575
Node: Local options62890
Node: Includes63378
Node: Main targetname63658
Node: Primary file64260
Node: Clear dependencies64850
Node: Delete rebuildable files65366
Node: Write Makefile65720
Node: Options66327
Node: Directories66675
Node: Include directories67500
Node: Library directories68106
Node: Object directories68507
Node: Sources directories68886
Node: Standard headers69523
Node: C/C++-Compiler69899
Node: Warnings70349
Node: Optimizations70764
Node: Debugging71126
Node: C options71526
Node: CXX options71898
Node: Pascal options72286
Node: Fortran options72695
Node: How to toggle these flags73123
Node: Libraries73831
Node: Linker options75276
Node: Compiler options75585
Node: Environment75909
Node: Colors76301
Node: Editor options76481
Node: autoindent76857
Node: Use tabs77213
Node: Persistent blocks77604
Node: Intelligent C indenting78063
Node: Column cursor78573
Node: Row cursor79014
Node: Match pair highlight79439
Node: Do not move the cursor on paste79897
Node: Transparent Blocks80231
Node: Optimal fill80511
Node: Tabsize80777
Node: Preferences81133
Node: all dependencies in makefile81958
Node: create backup files82434
Node: syntax highlighting82806
Node: Use dual display83249
Node: redirect stderr83831
Node: redirect stdout84214
Node: show process information84498
Node: show free memory84858
Node: No file caching85210
Node: 16 background colors85622
Node: Show GDB commands86332
Node: Use no shadows86629
Node: Save text palette86893
Node: Save project only when closing87161
Node: Show user screen after exit87570
Node: Only #include "..." in dependencies87951
Node: Directories in project items88316
Node: Show disassembler window when needed89016
Node: Use RCS89560
Node: Screen mode89802
Node: Closed windows90734
Node: Mouse options91032
Node: Reserved words91313
Node: Pascal reserved words91685
Node: C-Flags92076
Node: CXX-Flags92344
Node: Pascal-Flags92611
Node: Fortran-Flags92896
Node: Warning-Flags93191
Node: Debugging-Flags93480
Node: Optimization-Flags93781
Node: User words94092
Node: How to change the list of flags94400
Node: Save options95853
Node: Load options96167
Node: Windows96344
Node: Size/move96716
Node: Zoom97448
Node: Tile97707
Node: Cascade97893
Node: Next98139
Node: Previous98300
Node: Close98477
Node: List98784
Node: Project99076
Node: UserScreen99303
Node: Help submenu99556
Node: Help99889
Node: RHIDE Help index100939
Node: Syntax help submenu101172
Node: Syntax help101556
Node: Files to search102082
Node: Options for searching102405
Node: Exact102937
Node: Substring103181
Node: Fuzzy103441
Node: Search options103723
Node: Fuzzy value103995
Node: Index for syntax help104259
Node: libc reference104573
Node: Help about help104849
Node: Detailed description of some parts of RHIDE105124
Node: Selecting a window105738
Node: How the editor works106257
Node: Erasing commands107540
Node: Cursor moving commands108258
Node: Text selecting and searching commands109274
Node: Block commands110041
Node: Other commands111252
Node: Some hints and problems111991
Node: Problems with automatic dependencies112757
Node: Project window114343
Node: Items of your project114852
Node: Open a project item115932
Node: Dependencies of project item116537
Node: Local options for a project item117100
Node: Local commandline options117731
Node: exclude from link118048
Node: rebuild seldom118397
Node: Name of the output file118891
Node: Compiler type119197
Node: User defined compiler120324
Node: Error checking121097
Node: Error program121997
Node: Builtin compiler specs123417
Node: Builtin variables125029
Node: Change the defaults of RHIDE131529
Node: Message window132709
Node: Syntax highlighting133516
Node: Checking the dependencies134128
Node: What is Turbo Vision134886
Node: How the dialogs work137230
Node: Defining macros139559
Node: The INFO Viewer139861
Node: RCS and RHIDE141097
Node: Debugging with RHIDE143276
Node: Limitations of the integrated debugger144574
Node: Dual display debugging146538
Node: Using the integrated debugger147353
Node: Stepping through the source code147885
Node: Evaluating the contents of variables149138
Node: Watching the contents of variables151191
Node: Problems with C++ programs151841
Node: Using Breakpoints153167
Node: Setting a breakpoint153638
Node: Modifying and setting a breakpoint154154
Node: Problems with breakpoints156472
Node: Debugging with RHGDB156953
Node: Some FAQs158537
Node: Index169045
Node: Index of key commands197710

End Tag Table
