# Copyright (C) 1996-2000 Robert H”hne, see COPYING.RH for details 
# This file is part of RHIDE. 
#
# This is a sample rhide.env file. All specs here commented out
# with ## . To use them, simply remove the two #'s at the beginning
# of the lines. This file is installed normally in the global directory
# where RHIDE searches for it first. (see the RHIDE doc, where it
# searches for it.
# If you have installed RHIDE from the distributed binary archive,
# then this file is already in the global directory where RHIDE
# searches for rhide.env

# When running under linux, setting ESCDELAY to an other value than
# the default will speedup the handling of the ESC key.
# WARNING: If your terminal cannot recognise the Alt (or Meta) key,
# the ESC key is used to simulate it (ESC F1 is then simulated to
# be Alt-F1). That means if you need this technique, set ESCDELAY
# not too small. (The ! at the beginning tells RHIDE, to place this
# variable also in the real environment)
# The value give here is in milliseconds
##export ESCDELAY=100

# The following specs can be used to speedup RHIDE's search for
# RCS files. It overwrites the spec RHIDE_RLOG to search for
# the RCS file without calling rlog, which is the default.

# This is the default RCS suffix
##rcs_suffix=,v
# This is the default directory relative to the source directory
# where to search for the RCS file
##rcs_prefix=RCS/
# This expands to the directory part of the searched source file
##rcs_basedir=$(dir $(rlog_arg))
# This expands to the filename part of the searched source file
##rcs_basename=$(notdir $(rlog_arg))
# This is now the computed RCS file
##rcs_name=$(rcs_basedir)$(rcs_prefix)$(rcs_basename)$(rcs_suffix)
# On DJGPP not using long filenames, we do a trick to substitute
# the ,v suffix with nothing depending on the variable $(LFN)
#
# If LFN is not set, assume no LFN
##comma_v_DJGPP_=,v
# If LFN is set to N
##comma_v_DJGPP_N=,v
# If LFN is set to n
##comma_v_DJGPP_n=,v
##comma_v_DJGPP=$(comma_v_DJGPP_$(LFN))
# This substitutes now ,v with an empty string, but only on
# DJGPP when LFN is not set or set to [n|N]
##rcs_fixed_name=$(subst $(comma_v_$(RHIDE_OS)),,$(rcs_name))
# And this is now the final RHIDE_RLOG spec
##RHIDE_RLOG=$(wildcard $(rcs_fixed_name))


# Here now an other usefull spec for DJGPP when using gcc which
# has the bug to not to store the correct source filename in the
# object file when compiling C++ files which have not the .cc suffix,
# like .cpp
# This bug is in gcc 2.7.x and below and will probably fixed in
# gcc 2.8 and higher.
#
# Compute a temporary filename in the $(TMPDIR) directory.
# This directory is valid inside RHIDE, because it is set even
# when you have not set this environment variable
##temp_source=$(TMPDIR)/$(notdir $(SOURCE_NAME))

# Compute the spec to run cpp on the $(temp_source)
##temp_cpp=$(subst -o $(OUTFILE),-E -o $(temp_source),$(RHIDE_COMPILE_CC))

# Compute the spec to run gcc on the output from $(temp_cpp)
##temp_cxx=$(subst -c $(SOURCE_NAME),-x c++-cpp-output -c $(temp_source),$(RHIDE_COMPILE_CC))

# Spec for removing $(temp_source)
##temp_rm=rm -f $(RHIDE_TEMP_SOURCE)

# And now the final spec for compiling a .cpp file to a .o file
# by running it trough cpp, then compiling it and then removing
# the temporary created file but using this technique only on
# DJGPP, since gcc for linux as example has not this bug
##temp_os_DJGPP=other_os
##temp_os=$(subst $(temp_os_$(RHIDE_OS)),$(RHIDE_OS),other_os)
##RHIDE_COMPILE.cpp.o_DJGPP=$(temp_cpp); $(temp_cxx); $(temp_rm)
##RHIDE_COMPILE.cpp.o_other_os=$(RHIDE_COMPILE_CC)
##RHIDE_COMPILE.cpp.o=$(RHIDE_COMPILE.cpp.o_$(temp_os))

# The variabe LOCALEDIR is set ever
LOCALEDIR_DJGPP=$(DJDIR)/share/locale
LOCALEDIR_Linux=/usr/share/locale
LOCALEDIR=$(LOCALEDIR_$(RHIDE_OS))

