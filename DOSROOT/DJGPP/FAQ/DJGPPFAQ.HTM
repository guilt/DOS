<html lang="en">
<head>
<title>DJGPP FAQ List 2.30</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name=description content="DJGPP FAQ List 2.30">
<meta name=generator content="makeinfo 4.0">
<link href="http://texinfo.org/" rel=generator-home>
</head>

<body>
<br>

<p>This is the DJGPP Frequently-Asked Questions List.

<br><p>
<br><p>
<br><p>
<br><p>
<br><p>
<p>Copyright &copy; 1994, 1995, 1996, 1997, 1998, 2000 Eli Zaretskii.

<br><p>
<p>This is the third edition of the FAQ list;<br>
it is consistent with version&nbsp;2.03 of DJGPP.

<br><p>
<p>This FAQ list may be freely distributed with the DJGPP package or any part
thereof, provided that this copyright notice is left intact on all copies.

<p><a name="TOC"></a>

<h1>Table of Contents</h1>
<ul>
<li><a href="#Top">DJGPP FAQ List</a>
<li><a href="#Urgent">1 If You Are In a Hurry</a>
<li><a href="#DJGPP">2 What is DJGPP?</a>
<li><a href="#Requirements">3 Hardware and Software Requirements</a>
<ul>
<li><a href="#Minimum">3.1 The minimum system requirements for using DJGPP</a>
<li><a href="#OS2">3.2 Does it really work under OS/2?</a>
<li><a href="#WindowsNT">3.3 Will DJGPP work on Windows/NT?</a>
<li><a href="#DOSEmu">3.4 Can it run under Linux?</a>
<li><a href="#i286">3.5 Can I run it on a 286?</a>
<li><a href="#Windows%20apps">3.6 MS-Windows applications and DJGPP</a>
<li><a href="#Optimal%20hardware">3.7 Machine you <em>would like</em> to buy<small>...</small></a>
<li><a href="#Reasonable%20hardware">3.8 Machine most of us will <em>actually</em> buy <small>...</small></a>
<li><a href="#Config">3.9 How to configure your system for DJGPP</a>
<li><a href="#More%20than%2064MB">3.10 How to get the most RAM for DJGPP programs?</a>
</ul>
<li><a href="#Getting%20DJGPP">4 Where and What to Download?</a>
<ul>
<li><a href="#SimTel">4.1 Where can DJGPP be found?</a>
<li><a href="#How%20to%20download">4.2 How do I download DJGPP?</a>
<li><a href="#DJGPP%20by%20WWW">4.3 What if I don't know what <code>FTP</code> is?</a>
<li><a href="#What%20to%20download">4.4 What Files to Download?</a>
<li><a href="#Disk%20space">4.5 How much disk space will I need?</a>
<li><a href="#DJGPP%20Fatware">4.6 Can I get away with less megabytes?</a>
<li><a href="#Uninstall">4.7 How to uninstall a DJGPP package.</a>
</ul>
<li><a href="#Docs">5 The DJGPP Documentation</a>
<ul>
<li><a href="#Where%20is%20the%20docs">5.1 Where are the documentation files?</a>
<li><a href="#No%20Info">5.2 How to read the docs without <code>Info?</code></a>
<li><a href="#Printed%20docs">5.3 How to print the docs?</a>
<li><a href="#Cannot%20find%20docs">5.4 Some docs are nowhere to be found<small>...</small></a>
<li><a href="#Man%20pages">5.5 What are these <code>foo.1</code> files?</a>
<li><a href="#Last%20resort">5.6 What if the docs don't say enough?</a>
</ul>
<li><a href="#Trouble">6 When the Compiler (or <code>Make</code>, or <code>Info</code>, or <small>...</small>) Crashes<small>...</small></a>
<ul>
<li><a href="#Programs%20hang">6.1 GCC or some other DJGPP programs hang</a>
<li><a href="#No%20DPMI">6.2 GCC says "No DPMI"</a>
<li><a href="#Buggy%20DPMI">6.3 Buggy DPMI host or junk in DJGPP.ENV can crash v2.x programs</a>
<li><a href="#GCC%20optimizations">6.4 GCC can crash during optimization</a>
<li><a href="#Missing%20subprograms">6.5 Why does GCC say "cannot exec <code>as</code>"?</a>
<li><a href="#Internal%20error">6.6 What does "Internal compiler error" mean?</a>
<li><a href="#Unknown%20filetype">6.7 What does "Unknown filetype" mean?</a>
<li><a href="#Make%20hangs">6.8 Compiler hangs, but only when invoked from Make</a>
<li><a href="#Info%20cannot%20find%20Top">6.9 Info doesn't like some files</a>
<li><a href="#Info%20crashes">6.10 Info Crashes During Startup</a>
<li><a href="#Bash%20crashes">6.11 Why does Bash crash?</a>
<li><a href="#ThinkPad">6.12 DJGPP programs crash on a ThinkPad</a>
<li><a href="#Linker%20accesses%20other%20drives">6.13 Why does the Linker Access my CD Drive or the network?</a>
<li><a href="#General%20trouble">6.14 Other kinds of trouble</a>
<li><a href="#Redirect">6.15 I cannot keep up with the error messages</a>
<li><a href="#Archive%20search">6.16 How to search DJGPP archives</a>
<li><a href="#Totally%20lost">6.17 How to ask DJGPP gurus for help</a>
</ul>
<li><a href="#Compiler%20performance">7 Compiler and Linker Performance</a>
<ul>
<li><a href="#Slow%20compiler">7.1 Slow Compilation</a>
<li><a href="#Slow%20linker">7.2 Slow Linking</a>
</ul>
<li><a href="#Compiling">8 Compile-time and Link-time Problems</a>
<ul>
<li><a href="#No%20input%20files">8.1 GCC doesn't find the source files</a>
<li><a href="#Missing%20headers%20or%20libraries">8.2 GCC can't find headers or libraries</a>
<li><a href="#Missing%20C++%20headers">8.3 GCC can't find C<tt>++</tt> headers</a>
<li><a href="#C++%20comments">8.4 GCC barfs on C<tt>++</tt>-style comments in C programs</a>
<li><a href="#Which%20language">8.5 How does GCC recognize the source language?</a>
<li><a href="#Objective%20C">8.6 Problems with Objective C</a>
<li><a href="#DJGPP-specific">8.7 Writing codes fragments which are specific to DJGPP</a>
<li><a href="#Unresolved%20externals">8.8 Undefined references when linking programs</a>
<li><a href="#Which%20library">8.9 How not to lose your head with all these libraries</a>
<li><a href="#Libraries%20order">8.10 DJGPP uses a one-pass linker</a>
<li><a href="#Still%20unresolved">8.11 Some functions in C<tt>++</tt> programs still not found</a>
<li><a href="#djgpp_first_ctor">8.12 Unresolved djgpp_first_ctor</a>
<li><a href="#Large%20image">8.13 C<tt>++</tt> programs yield large <code>.exe</code> file</a>
<li><a href="#Large%20executable">8.14 Why are DJGPP <code>.exe</code> files so large?</a>
<li><a href="#DJGPP%20and%20DLLs">8.15 Why don't we use DLLs to make programs smaller?</a>
<li><a href="#No%20EXE">8.16 Linker fails to produce the EXE program</a>
<li><a href="#Allegro%20and%20GRX">8.17 Building Allegro or GRX library fails</a>
<li><a href="#NULL%20redefined">8.18 C<tt>++</tt> compiler says "NULL redefined"</a>
<li><a href="#C++%20exceptions">8.19 C<tt>++</tt> exceptions support</a>
<li><a href="#Assembly%20output">8.20 How to get GCC to generate assembly code</a>
<li><a href="#movedata.h">8.21 What's wrong with <code>sys/movedata.h</code>?</a>
<li><a href="#Libraries">8.22 How do I create a library of object files?</a>
<li><a href="#No%20stubify">8.23 GCC Cannot find <code>stubify</code>.</a>
</ul>
<li><a href="#Running">9 Running Compiled Programs</a>
<ul>
<li><a href="#v2%20crash">9.1 My program crashes only in v2.0!</a>
<li><a href="#malloc%20crash">9.2 Programs that crash in <code>malloc</code> or <code>free</code>.</a>
<li><a href="#Crash%20traceback">9.3 The call stack traceback</a>
<li><a href="#File%20data%20corrupted">9.4 Reading and writing binary files</a>
<li><a href="#Screen%20IO">9.5 Buffered screen I/O surprises</a>
<li><a href="#Distributing">9.6 What do DJGPP programs need to run?</a>
<li><a href="#File%20handles">9.7 How many file handles can DJGPP use?</a>
<li><a href="#Virus">9.8 DJGPP and Anti-Virus Software</a>
</ul>
<li><a href="#Graphics">10 Writing and Running Graphics Programs</a>
<ul>
<li><a href="#GRX%20driver">10.1 What GRX driver to use with your SVGA</a>
<li><a href="#Direct%20access">10.2 Accessing the video memory</a>
<li><a href="#Graphics%20and%20Windows">10.3 Graphics screen restoring under Windows</a>
<li><a href="#OpenGL">10.4 OpenGL and related packages for DJGPP</a>
</ul>
<li><a href="#Floating%20point">11 Floating Point Issues and FP Emulation</a>
<ul>
<li><a href="#Emulation">11.1 Floating-point code without 80387</a>
<li><a href="#Emulator%20accuracy">11.2 Floating point inaccuracies when using emulator</a>
<li><a href="#Emulation%20in%20Windows">11.3 Problems with emulation on Windows</a>
</ul>
<li><a href="#Debugging">12 Debugging DJGPP Programs</a>
<ul>
<li><a href="#How%20to%20debug">12.1 How to run a DJGPP program under debugger</a>
<li><a href="#Crash%20dump">12.2 How to begin debugging using the crash dump info</a>
<li><a href="#Debug%20graphics">12.3 How to debug a graphics program</a>
<li><a href="#GDB%20and%20C++%20source">12.4 GDB finds only <code>.cc</code> source</a>
<li><a href="#C++%20classes%20in%20GDB">12.5 Can GDB print class members?</a>
<li><a href="#Included%20source">12.6 GDB cannot list source that was #include'd</a>
<li><a href="#Static%20vars">12.7 GDB cannot display or set static uninitialized variables</a>
<li><a href="#Bool%20vars">12.8 Debugging bool data type</a>
<li><a href="#Complex%20vars">12.9 Debugging the complex data type</a>
<li><a href="#Debugging%20woes">12.10 Debuggers choke on some programs <small>...</small></a>
</ul>
<li><a href="#Profiling">13 Profiling DJGPP Programs</a>
<ul>
<li><a href="#How%20to%20profile">13.1 How to profile a DJGPP program</a>
<li><a href="#Profiled%20crash">13.2 Programs compiled with -pg crash when run</a>
<li><a href="#Garbled%20profile">13.3 Gprof produces garbled profile</a>
<li><a href="#IO%20bound%20programs">13.4 Why is <code>__dpmi_int</code> so heavily used?</a>
<li><a href="#No%20profile">13.5 <code>gprof</code> doesn't produce output</a>
</ul>
<li><a href="#Performance">14 Run-time Performance of DJGPP Programs</a>
<ul>
<li><a href="#How%20fast">14.1 How efficient is DJGPP-generated code?</a>
<li><a href="#Older%20is%20faster">14.2 Comparing newer versions with old ones</a>
<li><a href="#Pentium">14.3 DJGPP programs on a Pentium</a>
<li><a href="#IO%20speed">14.4 I/O speed in DJGPP programs</a>
<li><a href="#Slow-down">14.5 My ported program runs much slower!</a>
</ul>
<li><a href="#Memory">15 Run-Time Memory Issues</a>
<ul>
<li><a href="#How%20much%20memory">15.1 How much virtual memory do you have?</a>
<li><a href="#Confusing%20alloc">15.2 It seems <code>malloc</code>/<code>free</code> don't affect virtual memory<small>...</small></a>
<li><a href="#QDPMI%20VM">15.3 Failure to get more memory than is physically installed</a>
<li><a href="#QDPMI%20alloc">15.4 Memory allocation fails before all memory is used</a>
<li><a href="#Windows%20alloc">15.5 Memory allocation fails under Windows</a>
<li><a href="#Windows9X%20alloc">15.6 Memory allocation peculiarities under Windows 9X</a>
<li><a href="#EMM386%20alloc">15.7 Memory allocation fails under EMM386 or HIMEM</a>
<li><a href="#Swap%20out">15.8 How much memory do parent DJGPP programs leave for their child?</a>
<li><a href="#Stack%20size">15.9 How much stack can I have in DJGPP programs?</a>
<li><a href="#Windows%2098">15.10 Memory-related problems in Windows 98</a>
</ul>
<li><a href="#Command%20line">16 Command-line Arguments Handling in DJGPP</a>
<ul>
<li><a href="#Filename%20globbing">16.1 Filename wildcards expansion under DJGPP</a>
<li><a href="#Disable%20globbing">16.2 How to disable filename wildcards expansion</a>
<li><a href="#Special%20chars">16.3 How to pass command-line arguments with quotes or <code>@</code></a>
<li><a href="#Long%20commands">16.4 How to pass command lines longer than 126 characters</a>
<li><a href="#How%20long">16.5 What is the maximum length of command line under DJGPP</a>
<li><a href="#Makefiles">16.6 Why Make passes only 126 characters to programs?</a>
</ul>
<li><a href="#Converting">17 Converting DOS Programs/Libraries to DJGPP</a>
<ul>
<li><a href="#Syntax">17.1 GCC/Gas won't accept valid assembly code <small>...</small></a>
<li><a href="#Converting%20ASM">17.2 Converting between Intel ASM syntax and AT&amp;T syntax</a>
<li><a href="#ASM%20GPF">17.3 Converted code GP Faults!</a>
<li><a href="#ASM%20and%20C">17.4 Problems with combining assembly and C/C<tt>++</tt> modules</a>
<li><a href="#OBJ%20and%20LIB">17.5 I want to use a <code>.obj</code> or <code>.lib</code> code with DJGPP</a>
<li><a href="#16-bit%20code">17.6 I <strong>must</strong> use my 16-bit code with DJGPP!!</a>
<li><a href="#NEAR%20and%20FAR">17.7 What should I do with those "near" and "far" declarations?</a>
<li><a href="#Pseudo-registers">17.8 How to convert _AX pseudo-registers?</a>
</ul>
<li><a href="#Low-level">18 Low-level DOS/BIOS and Hardware-oriented Programming</a>
<ul>
<li><a href="#int86">18.1 Got "Unsupported INT 0xNN" calling <code>int86</code></a>
<li><a href="#Pointer%20segment">18.2 How to use buffers with DOS/BIOS services</a>
<li><a href="#Zero%20SP">18.3 How to call real-mode functions</a>
<li><a href="#Xfer">18.4 How to move data between your program and conventional memory</a>
<li><a href="#Move%20structs">18.5 How to move structs returned by real-mode services?</a>
<li><a href="#Fat%20DS">18.6 Fast access to absolute addresses</a>
<li><a href="#Above%201MB">18.7 Accessing absolute address above 1MB</a>
<li><a href="#RMCB">18.8 How to make DOS/BIOS call your function</a>
<li><a href="#Hardware%20interrupts">18.9 How to hook hardware interrupts</a>
<li><a href="#_go32%20vs%20__dpmi">18.10 Should I use _go32_XXX or __dpmi_YYY functions?</a>
<li><a href="#HW%20Int%20pitfalls">18.11 Hardware interrupt hooking has its subtleties</a>
<li><a href="#Inline%20Asm">18.12 Inline Assembly code with GCC</a>
<li><a href="#DMA">18.13 Using DMA with DJGPP</a>
</ul>
<li><a href="#Legalese">19 Legal Aspects</a>
<ul>
<li><a href="#Application%20distribution">19.1 Legal (un)restrictions on DJGPP applications</a>
<li><a href="#DJGPP%20redistribution">19.2 Legal restrictions of DJGPP utilities and libraries</a>
</ul>
<li><a href="#Help">20 Getting Help</a>
<ul>
<li><a href="#DJGPP%20is%20not%20GNU">20.1 Don't post DJGPP-specific problems to GNU News groups</a>
<li><a href="#How%20to%20post">20.2 How to post to the DJGPP forum</a>
<li><a href="#Subscribing">20.3 How to become a subscriber to the mailing list</a>
<li><a href="#Unsubscribing">20.4 How to unsubscribe from the mailing list</a>
<li><a href="#Languages">20.5 Is it okay to post messages in languages other than English?</a>
</ul>
<li><a href="#New%20versions">21 Version 2 vs v1.x</a>
<ul>
<li><a href="#New%20and%20improved">21.1 New features in DJGPP v2</a>
<li><a href="#Environment">21.2 DJGPP environment in v2.x</a>
<li><a href="#Slow%20development">21.3 Why are new DJGPP versions released so slowly?</a>
<li><a href="#Latest%20DJGPP">21.4 Where to find the best C library for DJGPP</a>
</ul>
<li><a href="#Miscellany">22 Miscellany</a>
<ul>
<li><a href="#RHIDE">22.1 Problems with using <small>RHIDE</small>.</a>
<li><a href="#g++.exe">22.2 Unzipping complains about duplicate/invalid files.</a>
<li><a href="#Changing">22.3 How to change a DJGPP package?</a>
<li><a href="#Packages">22.4 Where to find DJGPP packages?</a>
<li><a href="#Symlinks">22.5 How to create symbolic links to programs</a>
<li><a href="#DPMI%20Spec">22.6 Where to find the DPMI specification?</a>
<li><a href="#WWW">22.7 The DJGPP Web site.</a>
<li><a href="#Upload">22.8 Where to upload your contributions to DJGPP</a>
<li><a href="#Cross-DJGPP">22.9 DJGPP as cross-compiler</a>
<li><a href="#0xfe+0x20">22.10 GCC says "garbage at end of number"</a>
<li><a href="#Struct%20size">22.11 What should sizeof (struct xyzzy) return?</a>
<li><a href="#Struct%20packing">22.12 C<tt>++</tt> doesn't pack structs!</a>
<li><a href="#Int%2024h">22.13 How to avoid "Abort, Retry, Fail" messages</a>
<li><a href="#go32-v2">22.14 What is that <code>go32-v2.exe</code> program?</a>
<li><a href="#DXE">22.15 What is DXE?</a>
<li><a href="#LFN">22.16 Long Filenames Don't Work!</a>
<li><a href="#Missing%20separator">22.17 Make says "missing separator"</a>
<li><a href="#Modification%20time">22.18 Make says "<code>foo</code> has modification time in the future"</a>
<li><a href="#Dual%20DOS%2fWindows">22.19 How to Set Up a Dual DOS/Windows Installation</a>
<li><a href="#Zoneinfo">22.20 What is in that <code>zoneinfo</code> directory?</a>
<li><a href="#dev%20directory">22.21 The dark secrets of the /dev/ directory<small>...</small></a>
<li><a href="#ELF%20vs%20COFF">22.22 How about switching to ELF as DJGPP's object file format?</a>
<li><a href="#Random%20numbers">22.23 How to produce random numbers?</a>
<li><a href="#Lexicon">22.24 What are all these buzzwords I see?</a>
<li><a href="#void%20main">22.25 What should the <code>main</code> function return in a C/C<tt>++</tt> program?</a>
<li><a href="#Reboot%20the%20PC">22.26 Rebooting the PC from a DJGPP program</a>
<li><a href="#usleep">22.27 Delaying execution for short periods of time</a>
<li><a href="#CGI%20programs">22.28 CGI programs and DJGPP</a>
<li><a href="#Input%20EOF">22.29 Why Do I Get EOF From <code>stdin</code>?</a>
<li><a href="#FAQ%20format">22.30 Generating the FAQ in your favorite format</a>
</ul>
<li><a href="#About">23 About this FAQ</a>
<li><a href="#Topic%20Index">24 Topic Index</a>
<li><a href="#Program%20Index">25 Program Index</a>
</ul>


<p><hr>
Node:&nbsp;<a name="Top">Top</a>,
Next:&nbsp;<a rel=next href="#Urgent">Urgent</a>
<br>

<h1>DJGPP FAQ List</h1>

<p>In DJGPP (see <a href="#DJGPP">DJGPP overview</a>), a 32-bit
compiler and programming environment, originally written for Unix
machines, meet a 16-bit MS-DOS operating system.  Programmers who work
in this environment have to master a large body of knowledge from both
Unix and MS-DOS, especially if they want to use some advanced features,
like interrupt handling, directly accessing peripheral devices, etc.

<p>But because the DJGPP project is run by a group of volunteers on their
free time, there isn't always enough time (or patience, or money <b>;-)</b>
to produce documentation which will describe all the subtle features and
pitfalls a user should know about.  The documentation of DJGPP-specific
utilities and features is minimal at times, leaving wide space for
confusion, in newcomers and veterans alike, and making the DJGPP
learning curve steeper than it could be.

<p>This FAQ list is an attempt to take the sting out of that learning
curve, by supplying solutions for problems which are known to puzzle
DJGPP users.  (Another solution would be to pay to DJ Delorie and other
people who develop DJGPP to produce more documentation <b>;-)</b>.

<p>Some additional places to look for tutorials and other introductory
material about DJGPP are listed below.

<p>One good place to look for DJGPP features that are often overlooked is
the <a href="http://www.delorie.com/djgpp/doc/kb/">DJGPP Knowledge Base</a>.  The
Knowledge Base is also available in Info format; type <code>info
knowledge</code> from the DOS prompt.  In addition, a <cite>User's Guide</cite> is
being written by several contributors; it is currently available
<a href="http://www.delorie.com/djgpp/doc/ug/">from the DJGPP server</a>.

<p>You can browse the HTML version of this FAQ list on line at <a href="http://www.delorie.com/djgpp/v2faq/faq.html">DJ Delorie's Web server</a>.  You can
also download <a href="http://www.delorie.com/djgpp/v2faq/faq230b.zip">FAQ in several additional formats</a> and browse it
locally.

<p>A previous version of this FAQ was translated into French, and is
available <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2/frfaq21b.zip">via FTP</a>,
and also <a href="http://www.delorie.com/djgpp/v2faq/frfaq21.zip">through the Web</a>.

<p>A <a href="http://www.bekkoame.or.jp/~bero/faqj/djfaq21j.htm">Japanese translation</a> is available via the Web.

<p>This is Edition 2.30 of the FAQ, last updated
2&nbsp;February&nbsp;2000, for DJGPP Version 2.03.

<p>The following master menu lists the major topics in this FAQ list,
including all the indices.

<ul>
<li><a href="#Urgent">Urgent</a>:                 If you are in a hurry. 
<li><a href="#DJGPP">DJGPP</a>:                  What is DJGPP? 
<li><a href="#Requirements">Requirements</a>:           Hardware and software requirements for DJGPP. 
<li><a href="#Getting%20DJGPP">Getting DJGPP</a>:          Where and what to download? 
<li><a href="#Docs">Docs</a>:                   Where the documentation is and how to read it. 
<li><a href="#Trouble">Trouble</a>:                When the compiler (or Make, or Info, or <small>...</small>) crashes
<li><a href="#Compiler%20performance">Compiler performance</a>:   How fast is the compiler? 
<li><a href="#Compiling">Compiling</a>:              Compile-time and link-time problems. 
<li><a href="#Running">Running</a>:                Problems while running compiled DJGPP programs. 
<li><a href="#Graphics">Graphics</a>:               Graphics under DJGPP. 
<li><a href="#Floating%20point">Floating point</a>:         Floating-point programs and FP emulation. 
<li><a href="#Debugging">Debugging</a>:              Debugging DJGPP programs. 
<li><a href="#Profiling">Profiling</a>:              Speeding up your programs with a profiler. 
<li><a href="#Performance">Performance</a>:            Run-time performance of DJGPP programs. 
<li><a href="#Memory">Memory</a>:                 Run-time memory issues. 
<li><a href="#Command%20line">Command line</a>:           Command-line arguments handling in DJGPP. 
<li><a href="#Converting">Converting</a>:             How to convert DOS code to DJGPP. 
<li><a href="#Low-level">Low-level</a>:              Low-level and hardware-oriented programming. 
<li><a href="#Legalese">Legalese</a>:               Legal aspects of programming with DJGPP. 
<li><a href="#Help">Help</a>:                   How to get more help. 
<li><a href="#New%20versions">New versions</a>:           Where are and what's new in latest DJGPP versions. 
<li><a href="#Miscellany">Miscellany</a>:             More<small>...</small>. 
<li><a href="#About">About</a>:                  Contributors to this FAQ. 
<li><a href="#Topic%20Index">Topic Index</a>:            Search here by a problem description. 
<li><a href="#Program%20Index">Program Index</a>:          Search here by a program name. 
</ul>

<p><hr>
Node:&nbsp;<a name="Urgent">Urgent</a>,
Next:&nbsp;<a rel=next href="#DJGPP">DJGPP</a>,
Previous:&nbsp;<a rel=previous href="#Top">Top</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>1 If You Are In a Hurry</h1>

<p><em><strong>Q</strong>: Do you really mean I have to read this looongish FAQ list to get my
answers?</em>

<br><p>
<p><em><strong>Q</strong>: I have this problem which I absolutely MUST solve NOW!  What do I
do?</em>

<br><p>
<p><strong>A</strong>: No, you don't need to read <em>all</em> of the FAQ unless you want
to (although this is by all means recommended).  The questions in this
document are listed, as much as possible, in the order they appear when
one goes through getting DJGPP, installing it and using it.  To quickly
find an answer to your question, first look at the
<a href="#TOC">Table of Contents</a>. 
If that doesn't help, try the indices at the end of this manual.  You
can look up your question either <a href="#Program%20Index">by program name</a>, or <a href="#Topic%20Index">by topic name</a>.

<p>If you don't find anything appropriate through the indices, search this
FAQ for words which are pertinent to your problem<a rel=footnote href="#fn-1"><sup>1</sup></a>.

<p>If searching the FAQ didn't help, try <a href="#Archive%20search">the DJGPP archives search</a>, where you can find
reports about similar problems and their solutions.  If that doesn't
help either, try <a href="#Totally%20lost">asking the DJGPP gurus</a>.

<p>For those in a <em>real</em> hurry, here are some pointers to the most
important topics in this FAQ list:

<ul>
<li>How to install DJGPP after downloading it?

<p>Here's a brief description of the necessary steps:

<ul>
<li>Create a directory for DJGPP and <code>chdir</code> there.  <strong>Do NOT
install DJGPP in a directory called <code>\dev</code> on any drive, or in
any of its subdirectories: it won't work!</strong>

<li>Unzip all the <code>*.zip</code> files preserving the directory structure.  On
Windows 9X, use an unzip program which supports long file names.  On
Windows NT, use a DOS unzip program that does <em>not</em> support long
file names.  A free unzip program <code>unzip32.exe</code> is available from
the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/unzip32.exe">DJGPP archives</a>
which does the Right Thing on both DOS, Windows 9X and Windows NT, so I
recommend using <code>unzip32.exe</code> to unzip DJGPP.

<li>If you are using WinZip or the Aladdin Expander, deactivate the option
that by default creates a separate directory for every one of the
<code>*.zip</code> files.  <em>You need to unzip them all from the same
directory!</em>  I'm told that the Aladdin Expander also automatically
renames directories it extracts if a directory by that name already
exists; this renaming should be disabled as well.  If you have ZipMagic
on your machine, disable it, as it also unzips each file into its
directory.

<li>Edit your <code>AUTOEXEC.BAT</code> file and add these two lines:

<pre> set PATH=C:\DJGPP\BIN;%PATH%
 set DJGPP=C:\DJGPP\DJGPP.ENV
</pre>

<p>If your top DJGPP directory is other than <code>C:\DJGPP</code>,
<strong>change these two lines accordingly!</strong>

<p>You can use any text editor to add these two lines.  On Windows 95,
right-click on <code>AUTOEXEC.BAT</code> in <code>Explorer</code> or in
<code>My Computer</code>, then select <code>Edit</code> from the pop-up menu.  On
Windows 98, click <code>START</code>, then choose, successively, Programs,
Accessories, System Tools, System Information, Tools, System
Configuration, and use the <code>AUTOEXEC.BAT</code> tab to edit the file.  On
DOS, type from the command prompt <kbd>edit c:\autoexec.bat</kbd>.

<p>On Windows/NT, use <code>My Computer-&gt;Properties-&gt;Environment</code> to edit
the default value of <code>PATH</code> for the DOS box, and to add a new
variable <code>DJGPP</code> whose value is set to the full pathname of
<code>DJGPP.ENV</code>, as shown above.

</p><li>If you intend to run DJGPP programs off a CD drive (that is, if the file
<code>DJGPP.ENV</code> is on a CD-ROM), you need to set an additional
environment variable, <code>TMPDIR</code>, and point it to an existing
directory on a writable disk, like this:

<pre> set TMPDIR=c:/windows
</pre>

<p>Without <code>TMPDIR</code> set, DJGPP programs which create temporary files
will crash when run from a CD-ROM.

</p><li>Reboot your machine (not required on NT).  If, during the boot, you see
error messages like this:

<pre> Out of environment space
</pre>

<p>then enlarge the size of the environment available to
<code>COMMAND.COM</code>.  On Windows, add a <code>/E:2048</code> option to the
command line that the DOS box runs.  On DOS, edit <code>CONFIG.SYS</code> and
add the <code>/E:2048</code> option on the line that defines the shell, like
this:

<pre> SHELL = C:\DOS\COMMAND.COM C:\DOS /E:2048
</pre>
</ul>

<p>Your installation is now complete.

</p><li>How do I compile and link programs?

<p>Here are several simple commands:

<ul>
<li>Compile a single C source <code>cprog.c</code> into <code>cprog.exe</code>:

<pre> gcc -o cprog.exe cprog.c
</pre>

<li>Compile and link a C<tt>++</tt> source <code>cxxprog.cc</code> into <code>cxxprog.exe</code>:

<pre> gpp -o cxxprog.exe cxxprog.cc
</pre>

<li>Compile several C/C<tt>++</tt> source files into object files:

<pre> gcc -c cfile1.c cxxfile2.cc
</pre>

<li>Link several <code>*.o</code> object files into <code>myprog.exe</code>:

<pre> gpp -o myprog.exe cfile1.o cxxfile2.o
</pre>
</ul>

<p>To compile with optimizations, add the <code>-O2</code> switch to the command
line.  In addition, use of the <code>-Wall</code> switch is highly
recommended: it turns on many useful diagnostic messages.

<p>The DJGPP User Guide includes a tutorial <a href="http://www.delorie.com/djgpp/doc/ug/intro/your-first.html">introduction for first-time programmers</a>.

</p><li>How to ask experienced DJGPP users for help?

<p>Use the DJGPP News group or mailing list.  For most questions, you will
have your answer in a day or two.  See <a href="#Totally%20lost">the details on how to ask the gurus</a>.

</p><li>What is the best way to configure my system for DJGPP?

<p>This depends on your hardware and software.  Detailed instructions are
in <a href="#Config">system configuration guidelines</a>.

</p><li>Some files I need seem to be missing.  Where do I find them?

<p>Check out <a href="#What%20to%20download">list of required and optional packages</a>.

</p><li>How do I subscribe to or unsubscribe from the DJGPP mailing list?

<p>See <a href="#Subscribing">subscription instructions</a>.  However, it is better to read
the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a> if you have access to Usenet News.

</p><li>How can I search News group/mailing list traffic for some info?

<p>See <a href="#Archive%20search">the DJGPP archive search server</a> in this FAQ.  The search facility
described there is set up by <a href="mailto:dj@delorie.com">DJ Delorie</a>, and you should use it whenever you
have any questions or look for an information on a DJGPP-related
subject. 
</ul>

<p><hr>
Node:&nbsp;<a name="DJGPP">DJGPP</a>,
Next:&nbsp;<a rel=next href="#Requirements">Requirements</a>,
Previous:&nbsp;<a rel=previous href="#Urgent">Urgent</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>2 What is DJGPP?</h1>

<p><em><strong>Q</strong>: What is DJGPP?</em>

<br><p>
<p><strong>A</strong>: DJGPP is a compiler and a set of tools that let you produce
32-bit protected-mode programs which run on MS-DOS/MS-Windows machines.

<p>The originator and principal maintainer of DJGPP is <a href="mailto:dj@delorie.com">DJ Delorie</a>; that's where
the "DJ" in "DJGPP" comes from.  However, anybody is welcome and
encouraged to contribute.

<p>Programs compiled with DJGPP, and all development tools provided as part
of DJGPP, look on the outside like normal DOS programs, and they rely on
MS-DOS and BIOS for file I/O and other basic functions such as keyboard
input, screen cursor position, etc.  However, the bulk of the code in a
DJGPP program is 32-bit protected-mode code; DJGPP programs use
<dfn>DPMI</dfn> (the DOS Protected Mode Interface) to allow DOS/BIOS calls
from protected mode.  Therefore, any environment that can run DOS
programs and provides DPMI services, will run DJGPP programs as well. 
Environments that are known to be compatible with DJGPP include MS-DOS,
<a href="http://www.lineo.com/products/drdos.html">Caldera's DR-DOS</a>, NWDOS,
<a href="http://www.freedos.org/">FreeDOS</a>, Windows 3.X, 9X and NT, OS/2, and Linux
DOSEmu.  When DJGPP programs run on Windows 9X and Caldera's DR-DOS,
they support long filenames.

<p>It is important to understand that all these environments will treat
DJGPP programs as DOS programs which call DPMI services.  DJGPP cannot
by itself create Win16 or Win32 applications; however, you can use the
RSXNT package together with DJGPP to achieve this.  See <a href="#Windows%20apps">writing Windows applications with DJGPP</a>.

<p>Programs compiled with DJGPP can access all the physical memory on your
machine and support virtual memory.  All this memory presents a flat
address space with no segmentation (you can say goodbye to far and huge
pointers and to memory models), and is only limited by the amount of
virtual memory supported by the DPMI server in use.  A typical DPMI
server can provide at least 64MB of virtual memory (if you have enough
free disk space).

<p>DJGPP is free: you don't have to pay anything to download and use it,
even if you write commercial programs.  DJGPP doesn't impose any
restrictions on programs that you write and compile with it: you can
make them commercial, shareware, freeware, or any other kind.  (There
are a few minor exceptions to that rule, see <a href="#Application%20distribution">(un)restrictions on distribution of DJGPP apps</a>.)

<p>The core of DJGPP is the MS-DOS port of the GNU C/C<tt>++</tt> compiler, GCC,
and auxiliary utilities, such as assembler, linker, librarian, Make, and a
hypertext docs browser.  The DJGPP C library was written specifically
for DJGPP, mainly by DJ Delorie himself, with help from a small group of
volunteers.  This core set of utilities and libraries is still actively
developed and maintained.

<p>DJGPP presents a set of tools which are remarkably ANSI- and
Posix-compliant<a rel=footnote href="#fn-2"><sup>2</sup></a>. 
GCC complies to ANSI/ISO C Standard; the DJGPP C library is ANSI- and
Posix-compliant (however, a small number of Posix features, like the
<code>fork</code> system call, are unimplemented); the C<tt>++</tt> libraries also
comply to the latest standards; and the GNU development tools used by
DJGPP are all Posix-compliant.  As a result, DJGPP tools provide a
complete and coherent Posix layer on top of Microsoft operating systems,
to the degree that even the infamous limitations of DOS and
incompatibilities between DOS/Windows and Unix are almost completely
concealed from users and developers.

<p>Here are some of the tasks that DJGPP is said to be good for:

<ul>
<li>learning C and C++ programming and teaching others to program in
C/C<tt>++</tt>;
<li>learning to use Linux/Unix development tools on MS-DOS and MS-Windows;
<li>writing games<a rel=footnote href="#fn-3"><sup>3</sup></a> and graphics programs;
<li>setting up a common development environment for Unix and
MS-DOS/MS-Windows;
<li>writing portable DOS/Unix programs;
<li>porting Unix programs to Microsoft operating systems. 
</ul>

<p>DJGPP is also used as back-end for programming languages other than
C/C<tt>++</tt>.  ADA, Pascal and Fortran compilers have been ported to MS-DOS
based on DJGPP; GNU Pascal (<code>gpc</code>) and GNU Fortran (<code>g77</code>) are
available from the DJGPP archives.  The latest GCC releases include
front ends for Java and Chill languages.

<p>Starting from v2.0, DJGPP programs do not need a separate extender
program, only a DPMI server to run; DJGPP includes a free 32-bit DPMI
server which allows for a 32-bit, 4&nbsp;GByte flat address space and up
to 512 MBytes of virtual memory on plain DOS machines taht lack a DPMI
server of their own.

<p><hr>
Node:&nbsp;<a name="Requirements">Requirements</a>,
Next:&nbsp;<a rel=next href="#Getting%20DJGPP">Getting DJGPP</a>,
Previous:&nbsp;<a rel=previous href="#DJGPP">DJGPP</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>3 Hardware and Software Requirements</h1>

<p>This chapter describes what are the hardware and software which will
allow you to use DJGPP.  Minimum, "reasonable" and optimal system
configurations are listed.

<ul>
<li><a href="#Minimum">Minimum</a>:              You cannot run DJGPP unless you have this. 
<li><a href="#OS2">OS2</a>:                  Peculiarities of OS/2. 
<li><a href="#WindowsNT">WindowsNT</a>:            Is DJGPP compatible with Windows/NT? 
<li><a href="#DOSEmu">DOSEmu</a>:               Can I run DJGPP on Linux? 
<li><a href="#i286">i286</a>:                 Why can't I run DJGPP on a 286? 
<li><a href="#Windows%20apps">Windows apps</a>:         Can I write Windows applications with DJGPP? 
<li><a href="#Optimal%20hardware">Optimal hardware</a>:     Here is your dream machine description. 
<li><a href="#Reasonable%20hardware">Reasonable hardware</a>:  For the rest of us<small>...</small>. 
<li><a href="#Config">Config</a>:               How to configure your system software for DJGPP. 
<li><a href="#More%20than%2064MB">More than 64MB</a>:       How to set up your system for maximum memory. 
</ul>

<p><hr>
Node:&nbsp;<a name="Minimum">Minimum</a>,
Next:&nbsp;<a rel=next href="#OS2">OS2</a>,
Previous:&nbsp;<a rel=previous href="#Requirements">Requirements</a>,
Up:&nbsp;<a rel=up href="#Requirements">Requirements</a>
<br>

<h2>3.1 The minimum system requirements for using DJGPP</h2>

<p><em><strong>Q</strong>: What are the minimum system requirements for using DJGPP?</em>

<br><p>
<p><em><strong>Q</strong>: Will DJGPP run on my brand-new Acme i986DX7/900 PC with a SCSI-III
10-Terabyte disk drive under MulticOS/42 v7.99 operating system?</em>

<br><p>
<p><strong>A</strong>: DJGPP requires at least 386SX CPU and between 15 and 35 MB of
free disk space (see <a href="#Disk%20space">more details on this below</a>), including space for the software installation
and some swap space.  A minimum of 64K of free system memory is enough
for DJGPP to run with CWSDPMI as your DPMI host (most other DPMI hosts
will require much more), but at least 4MB of free extended RAM is
recommended for reasonably fast compilation of large source files (8MB
for compiling large C<tt>++</tt> programs); you might see painfully slow
compiles for large sources if you don't have at least that much.  If
your machine doesn't have a numeric co-processor, you will need to
install an emulator to run floating-point code (DJGPP provides such an
emulator) or link your applications with a special emulator library
(also provided with DJGPP).

<p>DJGPP requires MS-DOS version 3.1 or later; any other operating system
is OK if it includes a DPMI server and supports some kind of "DOS
box".  Environments known to run DJGPP besides native DOS: Windows 3.1
&amp; 3.11 DOS box, OS/2 (including Warp) DOS box, Windows 9X/DOS 7, Windows
NT (on Intel CPUs), Novell NWDOS 7, FreeDOS and Caldera's DR-DOS (but
several people have found the DPMI services of NWDOS and early versions
of Caldera's DR-DOS to be incompatible with DJGPP, so they might need to
be turned off and CWSDPMI used instead), and Linux DOSEmu environment.

<p>Note that somebody reported that running Caldera's DR-DOS 7.03 with
TaskManager enabled causes redirection of standard error stream to not
work.  In particular, <small>RHIDE</small> cannot display the compilation errors
printed by the compiler.  A work-around is to turn TaskManager off when
compiling.

<p>One user of Caldera's DR-DOS found that using their virtual disk drive,
<code>VDISK.SYS</code>, caused strange crashes in DJGPP programs, unless the
memory manager is Caldera's <code>EMM386</code> (as opposed to
<code>HIMEM</code>).

<p>Other known problems with latest versions of Caldera's DR-DOS are that
<kbd>Ctrl-&lt;C&gt;</kbd> and <kbd>Ctrl-&lt;BREAK&gt;</kbd> crash the system or
require cold reboot; and there are some problems with programs that use
the linear frame buffer under VESA 2, and with certain games.

<p><hr>
Node:&nbsp;<a name="OS2">OS2</a>,
Next:&nbsp;<a rel=next href="#WindowsNT">WindowsNT</a>,
Previous:&nbsp;<a rel=previous href="#Minimum">Minimum</a>,
Up:&nbsp;<a rel=up href="#Requirements">Requirements</a>
<br>

<h2>3.2 Does it really work under OS/2?</h2>

<p><em><strong>Q</strong>: You tell me it will work under OS/2, but I'm experiencing strange
crashes after several compilations <small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: DJGPP Make crashes when I run it on OS/2!</em>

<br><p>
<p><em><strong>Q</strong>: When I press <kbd>Ctrl-&lt;C&gt;</kbd>, my program is aborted, even
though I've set up a handler for <code>SIGINT</code>!</em>

<br><p>
<p><strong>A</strong>:  There was a bug in the DPMI server of the old OS/2 versions,
which was triggered by spawning child processes (like GCC does when it
invokes the various compiler passes).  Current versions of OS/2 don't
have that bug, so DJGPP programs should run fine under OS/2.  If you
can't make this happen, chances are that your setup is incorrect.  One
system parameter that can cause problems with DJGPP (reportedly, Make
crashes if it isn't set correctly) is <code>DPMI_DOS_API</code>.  Setting it
to <code>ENABLED</code> instead of the default <code>AUTO</code> should solve the
problem.  I'm also told that experimenting with the value of
<code>DPMI_MEMORY_LIMIT</code> sometimes solves problems on OS/2.  Reportedly,
version 4.0 of OS/2 solves problems with DPMI support, so the above is
only required for OS/2 v3.0 or earlier.

<p>One particular problem with OS/2 v3.0 is that <small>RHIDE</small> 1.4 and later
exits after the compilation ends.  This doesn't happen under OS/2 v4.0,
so you should upgrade if you have such problems.

<p>Problems with <code>SIGINT</code> are due to a known bug in OS/2 VDM: when you
press <kbd>Ctrl-&lt;C&gt;</kbd>, VDM catches it ahead of the keyboard interrupt
handler installed by the DJGPP startup code, and aborts the program. 
Thus, you cannot prevent your programs from being aborted by installing
a <code>SIGINT</code> handler.

<p>Programs that use the library function <code>delay</code> hang if the
&lt;Pause&gt; key is pressed while inside the call to <code>delay</code>.  It is
possible that versions of OS/2 4.0 fixpack 13 or later will correct
this.  As a work-around, use <code>usleep</code> or write a loop which calls
<code>uclock</code>.

<p><hr>
Node:&nbsp;<a name="WindowsNT">WindowsNT</a>,
Next:&nbsp;<a rel=next href="#DOSEmu">DOSEmu</a>,
Previous:&nbsp;<a rel=previous href="#OS2">OS2</a>,
Up:&nbsp;<a rel=up href="#Requirements">Requirements</a>
<br>

<h2>3.3 Will DJGPP work on Windows/NT?</h2>

<p><em><strong>Q</strong>: What about Windows NT?</em>

<br><p>
<p><strong>A</strong>:  Current Windows NT versions support DPMI programs in the DOS
box, so DJGPP programs should in general run fine under NT (but see the
list of possible problems below).

<p><a name="Losing%20Selectors"></a>
The DPMI server built into NT (and Windows 9X) loses selectors with each
child program that is invoked by a DJGPP program, so after about two
thousand calls to functions from the <code>spawnXX</code> family you can see
an error message like this:

<pre>  Load error: no DPMI selectors
</pre>

<p>Some versions of NT lose DOS memory instead of selectors, so you might
see another error message:

<pre>  Load error: no DOS memory
</pre>

<p>These problems are likely to afflict only DJGPP ports of Unix shells
(such as <code>bash</code>), since no other DJGPP program, not even
<code>Make</code>, is likely to call so many child programs before it exits. 
The only known work-around is to exit the shell every now and then,
because when all the available selectors are exhausted, the DOS box will
crash.  I'm told that <code>Make</code> sometimes fails on long
<code>Makefiles</code> on Windows 9X, where the selectors are lost at even
higher rate than on NT.  If you ever run a very long <code>Makefile</code> and
see <code>Make</code> crash, just run <code>Make</code> again, and it will pick up
where the crashed session has left off.

<p>The long filename API (the special functions of Int 21h which support
file names longer than the DOS 8+3 limitation) for DOS box is not
supported by current versions of Windows/NT, so you cannot have long
filenames there from DJGPP programs.  An alpha version of an LFN driver
for NT which enables long file name support for DJGPP programs, written
by Andrew Crabtree and significantly improved by Wojciech Galazka, can
be downloaded <a href="http://www.cybertrails.com/~fys/longfile.htm">the Web</a>.

<p>The popular DJGPP IDE <small>RHIDE</small> needs a <code>-M</code> switch to work on NT
(to disable the mouse support which will otherwise crash <small>RHIDE</small>). 
Version 1.4.7b or <small>RHIDE</small> reportedly solves this problem and allows
the mouse to be used on NT.  Also, one user reported that he had to type
<kbd>rhide</kbd> twice to enter <small>RHIDE</small>, because the first invocation
immediately exits back to the command-line prompt with no message, if
you don't disable the mouse with <code>-M</code>.

<p>You might have problems with using the SVGA modes of your video card
under Windows/NT; only standard VGA modes (including mode-X) work.  That
is because NT doesn't allow arbitrary direct access to the SVGA
registers, without which it is impossible to recognize the type of the
SVGA and employ its capabilities.  For example, a user reported that GRX
functions and the <code>MODETEST.EXE</code> program thought that only a
standard VGA was installed, whereas he had an S3 card.  There is nothing
you can do about this feature of Windows/NT; that is the price you pay
for the stability and protection you get under this OS (a runaway
program that accesses hardware registers can wipe out your disk or wedge
the entire system cold).  However, I'm told that Windows/NT 4.0 supports
<dfn>DirectX</dfn> which is a method of accessing screen, audio and other
peripherals directly, and the Win32 ports of Allegro and other graphics
packages can use it.

<p>The Allegro library also has problems on NT.  One user reports that even
switching into the standard 640x480 video mode turns the screen black
and kills the machine.  Programs that use Allegro to switch into VESA
modes usually don't work, since NT doesn't support SVGA graphics modes. 
In particular, the example programs provided with Allegro print an error
message like this:

<pre> Error setting 24 bit graphics mode
 VESA not available
</pre>

<p>Programs that use the "nearptr" facility of DJGPP to access absolute
memory addresses (e.g., for memory-mapped devices) won't work on NT,
because its DPMI server silently ignores functions that set huge limits
on selectors.  Since the default algorithm which allocates memory from
the DPMI server needs to set such huge limit in some rare cases, there's
a small probability that a program will fail or crash even if it doesn't
set selector limits in user code.  It is best to use the Unix-style
<code>sbrk</code> algorithm in programs that run on Windows/NT.  See the
library docs for the variable <code>_crt0_startup_flags</code> where the
<code>_CRT0_FLAG_UNIX_SBRK</code> bit is explained, for more info on this
issue.  If you cannot switch to the Unixy <code>sbrk</code> (e.g., if you
don't have access to the program's sources), I'm told that sometimes
such problems can be worked around if you run DJGPP programs in a
full-screen session; your mileage may vary.

<p>Another problem on NT is that you cannot install a handler for the
<code>SIGFPE</code>, <code>SIGINT</code>, or <code>SIGALRM</code> signals: if you do, your
program will crash as soon as the signal is generated (in DJGPP
v2.02 and later, FP exceptions are masked by default, so you will need
to unmask them first, otherwise <code>SIGFPE</code> won't be generated).  This
is due to a bug in NT.

<p>Windows/NT makes it impossible to use FP emulation on a machine that has
the FP hardware.  If you <code>set 387=n</code> on NT, the DJGPP startup code
calls the DPMI function to switch on the FP emulation, but NT ignores it
and continues to use the hardware FPU.

<p>Yet another problem with NT is that interrupting some programs with
<kbd>Ctrl-&lt;C&gt;</kbd> causes Dr. Watson to complain about "Access
Violation" (that's NT'ese for GPF) and abort the program; careful
inspection of Dr. Watson's logfile seems to indicate that the crash is
inside NT's own code which handles the exception deliberately produced by
the DJGPP's machinery that translates the <kbd>Ctrl-&lt;C&gt;</kbd> keypress
into a signal.  It seems NT uses the DJGPP stack for some of that
processing, which is a no-no inside an exception handler.  Sorry, no
work-around.

<p>The above-mentioned problems with signals are probably the cause for
another type of calamities on Windows/NT: running a program compiled
with the <code>-pg</code> option causes it to crash almost immediately due
to--you guessed it--"Access Violation" in NTVDM (that's the NT DOS
Emulator).

<p>Windows/NT comes with its own version of <code>redir.exe</code>, which serves
a different purpose.  If you invoke <code>redir</code>, and the NT's
<code>winnt\system32</code> directory is before DJGPP's <code>bin</code>
directory in your <code>PATH</code>, you will see a message saying "The VDM
Redirector is already loaded".  To solve this, rearrange your
<code>PATH</code> or rename DJGPP's <code>redir.exe</code> to somethink like
<code>djredir.exe</code>.

<p>Programs that use the library function <code>delay</code> may hang if the
&lt;Pause&gt; key is pressed while the program is inside the call to
<code>delay</code>.  The work-around is to use <code>usleep</code> or write a loop
which calls <code>uclock</code>.

<p>Another peculiarity of the NT DOS box is that beeping by printing the
<code>\007</code> character to <code>stdout</code> or <code>stderr</code> behaves
strangely.  Usually it beeps, but the beep is very long; sometimes, you
get the Windows "ding" sound.  It is recommended that you turn on the
"visible bell" feature of the tools that support it, like Emacs and
Less.

<p>Accessing the serial communication ports on NT also has some problems. 
<a href="mailto:tony@dictator.nt.tuwien.ac.at">Anton Helm</a> says that the first
two invocations of a program that accesses the port behave abnormally;
e.g., the data from the device on the other end of the link doesn't get
fed into your program.  After that, the third and subsequent invocations
work correctly, but <em>only if you use COMAND.COM as your shell</em>. 
Using the default <code>cmd.exe</code> leaves the link in a state where you
get the replies from the other device for the <code>n</code>th invocation of
your program in the <code>n+1</code>st invocation.

<p>In other words, to make the com port work on NT, you need to open the
DOS box with <code>COMMAND.COM</code>, run your program and exit it two times,
then invoke the program for the third time and start working.

<p>Some people report that NT servers cause much more problems than NT
workstations of the same version and build.  It seems that these
problems usually mean that NT installation was done incorrectly (maybe
it is much harder to get it right with a server than with a
workstation?).  If you have such problems, try to install a workstation,
or re-install the server, and see if that helps.  And if you gain some
insight as to why servers like DJGPP less than workstations, please tell
what you've learned.

<p>The Cygnus Win32 project is another (unrelated to DJGPP) port of GCC and
development tools to Windows/NT and Windows 9X platforms, which
specifically targets development of Windows programs.  See <a href="#Windows%20apps">description of the Cygwin project</a>, for more details about the Cygnus ports.

<p><hr>
Node:&nbsp;<a name="DOSEmu">DOSEmu</a>,
Next:&nbsp;<a rel=next href="#i286">i286</a>,
Previous:&nbsp;<a rel=previous href="#WindowsNT">WindowsNT</a>,
Up:&nbsp;<a rel=up href="#Requirements">Requirements</a>
<br>

<h2>3.4 Can it run under Linux?</h2>

<p><em><strong>Q</strong>: You say it works on Linux, but I seem to be unable to run the
compiler from within Make<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: I can run DJGPP on Linux, but Make crashes with SIGFPE on even
the simplest Makefiles!</em>

<br><p>
<p><em><strong>Q</strong>: When I run bash on Linux/DOSEmu, echoing of what I type is very
slow.</em>

<br><p>
<p><strong>A</strong>:  Versions of Linux which were released before 13 March 1996 need
a patch to be able to reliably run nested DJGPP programs.  That patch
was posted to the DJGPP mailing list and can be found by using the
search capabilities of the <a href="http://www.delorie.com/djgpp/mail-archives/djgpp/1996/02/26/13:28:52">DJGPP mail archives</a>.

<p>If you prefer to download that patch via ftp, you can find it <a href="ftp://ftp.delorie.com/pub/djgpp/contrib/dpmi-dosemu-djgpp.mail">on the DJGPP ftp server</a>.

<p>In general, upgrading to DOSEmu version 0.97.10 or later is recommended,
at least with versions of Linux kernel earlier than 2.1; in particular,
some users report that DJGPP programs sometimes crash on version 0.66.7
under Linux 2.0.35.

<p>You might also need to edit the RAM section of the
<code>/etc/dosemu.conf</code> file to make it comfortable for DJGPP.  I
suggest setting <code>dpmi</code> and <code>xms</code> to 16MB and <code>ems</code> to
4MB.  For example, I'm told that building the Allegro library with the
<code>-O3</code> optimization switch fails in DOSEmu unless you allocate at
least 16MB of DPMI memory to DOSEmu sessions, and building GCC needs
18MB.

<p>If DJGPP programs crash with an error message like this<a rel=footnote href="#fn-4"><sup>4</sup></a>:

<pre> DPMI: Unhandled Execption 0d - Terminating Client
 It is likely that dosemu is unstable now and should be rebooted
</pre>

<p>then you should add a line saying <code>secure off</code> to your
<code>/etc/dosemu.conf</code> file.

<p>Some users reported that <code>Make</code>, and possibly other programs which
use floating point computations, crash in DOSEmu environment on systems
without an FPU, even if you set the <var>387</var> and <var>EMU387</var>
environment variables correctly (as explained in <a href="#Emulation">Setting up the FP emulator</a>, below).  The
only known work-around is to not use floating point or to upgrade your
machine hardware.  DJGPP v2.03 corrected a few subtle bugs in the
emulator code, so upgrading your DJGPP software might help.  It is
possible that newer versions of Linux might solve this problem too, so
try upgrading your Linux software.

<p>If your only problem is to run GNU Make, get the latest DJGPP port of
Make, since ports of Make 3.75 or later can be configured to not issue
FP instructions at all.

<p>If you have problems running recursive Make's, or deeply nested DJGPP
programs, edit <code>src/dosext/dpmi/dpmi.h</code> to enlarge the value of
<code>DPMI_MAX_CLIENTS</code> (the default is 8) and then rebuild DOSEmu.

<p>If DJGPP programs respond too slow to keyboard input, you might need to
tune the <code>HogThreshold</code> parameter in the <code>dosemu.conf</code> file. 
Set it to zero and see if this helps; if so, further tune it until you
get reasonable response time, but still leave Linux with enough cycles
for the other programs that run.

<p>Several users reported that DJGPP programs cannot get input from the
keyboard if Caldera's DR-DOS is booted under DOSEmu.  I'm told that
adding <code>rawkeyboard</code> to <code>dosemu.conf</code> might solve this.

<p>Some people complain that <small>RHIDE</small> crashes on DOSEmu whenever the
mouse is moved.  I'm told that using the <code>-M</code> switch when invoking
<small>RHIDE</small> solves this problem.  Alternatively, you could try giving
DOSEmu access to the serial port to which the mouse is connected, and
then using your DOS mouse driver.  To this end, add the following to
your <code>dosemu.conf</code><a rel=footnote href="#fn-5"><sup>5</sup></a>:

<pre> serial { mouse com 2 device /dev/mouse }
 mouse {mousesystems device /dev/mouse emulate3buttons }
</pre>

<p>and then load a DOS mouse driver in the DOSEmu <code>AUTOEXEC.BAT</code>. 
Note that the example above assumes that the mouse is connected to the
COM2 port; your mileage may vary.

<p>If you have problems with mounting FAT32 partitions, upgrade the Linux
kernel to version 2.0.34 or later.

<p>I'm told that the problem with selectors being lost in nested DJGPP
programs (see <a href="#Losing%20Selectors">no DPMI selectors</a>) exists in DOSEmu as well.

<p><hr>
Node:&nbsp;<a name="i286">i286</a>,
Next:&nbsp;<a rel=next href="#Windows%20apps">Windows apps</a>,
Previous:&nbsp;<a rel=previous href="#DOSEmu">DOSEmu</a>,
Up:&nbsp;<a rel=up href="#Requirements">Requirements</a>
<br>

<h2>3.5 Can I run it on a 286?</h2>

<p><em><strong>Q</strong>: Why can't I run DJGPP on my 286?  It has protected mode
also<small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  True, but the protected mode isn't an issue here.  Gcc doesn't
care much about memory protection, but it does care to run on a 32-bit
processor, which the 286 isn't.  A 386 or better CPU really <strong>is</strong>
required.

<p><hr>
Node:&nbsp;<a name="Windows%20apps">Windows apps</a>,
Next:&nbsp;<a rel=next href="#Optimal%20hardware">Optimal hardware</a>,
Previous:&nbsp;<a rel=previous href="#i286">i286</a>,
Up:&nbsp;<a rel=up href="#Requirements">Requirements</a>
<br>

<h2>3.6 MS-Windows applications and DJGPP</h2>

<p><em><strong>Q</strong>: Can I write MS-Windows applications with DJGPP?</em>

<br><p>
<p><strong>A</strong>: Currently, you can only run DJGPP programs under Windows as DOS
apps (i.e. inside the DOS Box).  If you need to write true Windows apps,
you will have to use auxiliary tools or another compiler.  This section
lists some of the possibilities.

<p>RSXNTDJ is an add-on package for DJGPP which allows to develop Win32
programs using DJGPP development environment.  It is essentially a
cross-compiler targeted for Win32 (Windows 9X and NT) and Win32s
(Windows 3.X + Win32s) platforms<a rel=footnote href="#fn-6"><sup>6</sup></a>;
it supports DJGPP v2.x and includes debugging tools and an IDE. 
Beginning with version 1.60, RSXNTDJ is distributed under the terms of
the GNU license (previous versions needed to be registered for a small
fee if you wanted to develop commercial or shareware applications with
it).

<p>RSXNTDJ supports Win32 console, GUI, DLLs and bound programs (the latter
can be run on DOS under the RSX extender, as well as on Windows).  You
can download RSXNTDJ <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/rsxntdj151.zip">via FTP</a>.  The latest
version of the RSX IDE (called <small>RSXIDE</small>) is available <a href="http://www.mathematik.uni-bielefeld.de/~rainer/">from Rainer Schnitker's home page</a>.  Rainer's home page is also
the place to look for the latest releases of RSXNTDJ, including beta
releases.

<p>RSXNTDJ version 1.31 was produced with GCC v2.7.2.1 and DJGPP v2.01.  If
you use it with later versions of GCC and DJGPP, it will need some
tweaking; it is best to upgrade to RSXNTDJ v1.5 or later.

<a href="mailto:jventer@writeme.com">Johan Venter</a> wrote a HOWTO document that
explains how to install and set up RSXNTDJ, and how to fix the various
problems present in the current RSXNTDJ distribution.  Make sure you
read the <a href="http://surf.to/rsxntdj">RSXNTDJ HOWTO</a>, before you try to install
the package on your own; it will save you hours of banging your head
against all kinds of weird problems, like missing files (due to
truncated file names), linker error messages, inability to link C<tt>++</tt>
programs, etc.

<p>In general, RSXNTDJ's support leaves a lot to be desired.  Some problems
take too long to fix, and response to user bug reports is slow.  Even
with the latest efforts by Johan Venter and others, you should expect to
spend some time and effort installing and using the package.  Another
problem is that you depend on Microsoft SDK for the header files, and
each new release of the SDK tends to break the patches to the header
files required by RSXNTDJ.

<p>These are disadvantages of RSXNTDJ with respect to other alternatives
(see below); the most significant advantage is that you can use the
entire DJGPP development environment.  By contrast, other alternatives
for free Win32 development usually provide less tools; in particular,
Mingw32 provides only a few basic tools (like Make and GDB) beyond the
compiler and Binutils.  As a result, people who work with Mingw32 tend
to use all kinds of different and subtly incompatible versions of
shells, Make, etc.  Cygwin has much more ports of GNU tools, but even
Cygwin tool-chain doesn't have such a rich set of development tools all
working together smoothly as DJGPP does.  (Of course, if you don't mind
developing with a minimal set of tools, this might not be a serious
consideration for you.)

<p>Here are some tips about RSXNTDJ:

<ul>
<li>The URL mentioned in the RSXNTDJ help file for the MS Platform SDK
header files might no longer be valid.  Microsoft tends to rearrange its
site frequently, and changes the SDK location in the process. 
Currently, you can find the SDK headers on the <a href="http://www.microsoft.com/msdownload/platformsdk/sdkall.htm">Microsoft World Wide Web site</a>.  Note
that, whenever a new version of the SDK is released, the patches to
Windows header files supplied with RSXNTDJ are no longer valid.  You
might need to apply the patches manually if the <code>patch</code> utility
fails.

<p>There's an alternative to using patched MSSDK headers: <a href="http://www.acc.umu.se/~anorland/gnu-win32/w32api.html#download">Anders Norlander's WinAPI headers</a>.  These
headers can be used as a drop-in replacement for the RSXNTDJ headers,
and they include the functionality of Microsoft's headers.  Beginning
with version 1.5.1, the RSXNTDJ package includes a modified version of
Anders Norlander's headers as part of the distribution.

</p><li>Since RSXNTDJ is in essence a cross-compiled environment, its header
files and libraries can create conflicts with those supplied by DJGPP
(as part of <code>djdevNNN.zip</code> package).  Therefore, your best bet
would be to install RSXNTDJ in another directory, so that the headers
and libraries don't mix.  Make sure that when you compile DJGPP
programs, the DJGPP include directories are searched <strong>before</strong> the
RSXNTDJ ones, and when you compile RSXNTDJ programs, the RSXNTDJ include
directories are searched first.  Likewise, you should make sure the
compiler looks in the correct directories for libraries and the
<code>crt0.o</code> startup module.  When in doubt, add <code>-v</code> to the
compiler's command line to see which directories it searches and in
which order, and what libraries does it link in.

<p>One specific problems with conflicting headers is with the header
<code>function.h</code>.  Both DJGPP and RSXNTDJ have such a file, with
different contents.

</p><li>I'm also told that the <code>stdio.h</code> header supplied with RSXNTDJ
defines several inline functions with the <code>extern</code> qualifier, which
causes GCC to not compile them into the object file, and triggers
undefined references.  The solution is to define the <code>extern</code>
symbol to an empty string in one of the source files which includes the
<code>stdio.h</code> header.

<li>Add the directory where the pre-processor (<code>cpp.exe</code>) is kept to
the <code>PATH</code> environment variable, or copy the pre-processor into a
directory already on your <code>PATH</code>.  (Without this, the resource
compiler will not work.)

<li>Some people report that they needed to bump up the stack size using the
<code>pestack</code> utility, allegedly due to insufficient size of the
default stack.

<li>The version of linker <code>ld.exe</code> which comes with RSXNTDJ doesn't
print any message if you forget to link in libraries such as
<code>libcomct.a</code> and <code>libcomdl.a</code>.  Instead, the produced
executables will die with SIGSEGV when run.  Sometimes, forgetting to
<code>#include</code> <code>windows.h</code> also produces a program that crashes at
run time.  You can use the stock DJGPP version of <code>ld.exe</code> to see
the list of the missing functions, and then find out which libraries to
add to the link command line (use the <code>nm</code> utility to find out
which libraries contain the required external symbols).  The linker
supplied with RSXNTDJ is only required to link DLLs. 
</ul>

<p>If RSXNTDJ doesn't suit your needs, you can use a few other free
compilers which target Win32 platforms:

<dl>
<dt><code>Cygnus GNU-Win32 tools</code>
<dd>This tool-chain includes native Win32 ports of GCC and of many GNU
development tools.  It requires you to comply to the GNU License, the
GPL, when distributing programs built with these tools.  The tools and
the programs you build are native Win32 executables (won't run on DOS,
Windows 3.X or Win32s platforms) and Posix-compliant, but you need to
distribute a 4MB DLL file<a rel=footnote href="#fn-7"><sup>7</sup></a>, which implements the Posix layer, with all your
programs.  Also, GNU-Win32 is still in beta phase, and some bugs are
still worked on.  You can find GNU-Win32 on the <a href="http://www.cygnus.com/misc/gnu-win32/">Cygnus site</a>, or <a href="ftp://ftp.cygnus.com/pub/gnu-win32/latest/">via FTP</a>.

<br><dt><code>Mingw32 (Minimal GNU-Win32)</code>
<dd>This features native Win32 port of GCC, but it relies on the Windows C
runtime (<code>CRTDLL.DLL</code>, which is standard on Windows 9X and
Windows/NT) and doesn't require any additional DLLs like Cygnus ports
do; however, you lose the Posix layer.  The basic package includes,
besides the compiler and Binutils, a few tools to compile resource files
and convert DLLs into <code>lib*.a</code> wrappers.  Since it doesn't use any
GPL'ed stuff except GCC and its subprograms, the programs produced by
Mingw32 are <em>free</em>.

<p>A disadvantage of this package is a relative lack of development tools
ported to Mingw32.  The compiler, Binutils, Make, GDB, Textutils and
Patch are available from the Mingw32 site, but ports of other utilities
tend to be scattered around and not integrated together into a coherent
package like what DJGPP or Cygwin present.  This causes compatibility
problems between the tools.  It is possible to use the DJGPP tools where
there are no equivalent Mingw32 ones, but you need to be aware of some
incompatibilities, such as different methods of passing long command
lines, lack of support for long file names on NT, etc.

<p>More details, including ready binaries of ported utilities and
source-level patches to build other utilities with Mingw32, are
available on <a href="http://www.xraylith.wisc.edu/~khan/software/gnu-win32/">Mingw32 home page</a>.  For ports of
additional developemnt tools, visit <a href="http://agnes.dida.physik.uni-essen.de/~janjaap/mingw32/index.html">Jan-Jaap van der Heijden's site</a>. 
Mingw32 has a <a href="http://www.egroups.com/lists/mingw32/">mailing list</a>.

<br><dt><code>Lcc-Win32 compiler and tools</code>
<dd>This is a Win32 port of a freeware compiler Lcc, not related to GCC.  It
doesn't currently support C<tt>++</tt> programs.  The tool-chain includes
some additional utilities such as a very good IDE, a resource compiler
and a resource browser, a Make utility, and an icon maker.  The package
documentation is very good.  For more information, visit the <a href="http://www.cs.princeton.edu/software/lcc/">Lcc home page</a> and the <a href="http://www.cs.virginia.edu/~lcc-win32/">lcc-win32 home page</a>.

<br><dt><code>Dev-C++ package</code>
<dd>This is a freeware compiler and development environment for C and
C<tt>++</tt> programs which produces Win32 executables.  Besides the
compiler, the package includes a set of header files and libraries, a
port of GDB, an IDE with a multi-window editor that supports syntax
highlighting, and a project management tool.  The package is maintained
by <a href="mailto:webmaster@bloodshed.nu">Colin Laplace</a>, and is available
<a href="ftp://ftp.simtel.net/pub/simtelnet/win95/prog/devcpp30.zip">from SimTel.NET mirrors</a>. 
</dl>

<p>If you need on-line documentation of the Win32 API, you can find it as a
<a href="http://www.cs.virginia.edu/~lcc-win32/">Windows HLP file</a>.  Additional
links to tutorials and other related information can be found on the
<a href="http://people.montana.com/~bowman/Software/winAPI.htm">bowman's home page</a>.

<p>The recommended book for learning Win32 programming seems to be Charles
Petzold's <cite>Programming Windows: The Definitive Guide to the Win32
API</cite>, published by Microsoft Press.

<p><hr>
Node:&nbsp;<a name="Optimal%20hardware">Optimal hardware</a>,
Next:&nbsp;<a rel=next href="#Reasonable%20hardware">Reasonable hardware</a>,
Previous:&nbsp;<a rel=previous href="#Windows%20apps">Windows apps</a>,
Up:&nbsp;<a rel=up href="#Requirements">Requirements</a>
<br>

<h2>3.7 Machine you <em>would like</em> to buy<small>...</small></h2>

<p><em><strong>Q</strong>: What is the optimal system configuration for running DJGPP?</em>

<br><p>
<p><strong>A</strong>:  Here is the description of your dream machine (at least for the
next 6 months <b>:-)</b>:

<ul>
<li>Hardware:

<ul>
<li>the fastest CPU you can find on the market (a 733 MHz Pentium III, as of
this writing) with a 100 MHz memory bus and Intel 440BX chipset;
<li>at least 512KB second-level, a.k.a. L2, cache memory;
<li>256 MByte RAM;
<li>PCI-based motherboard;
<li>22GB SCSI-II hard disk with bus-mastering controller;
</ul>

<li>Software:

<ul>
<li>DOS, device drivers and TSRs all loaded HIGH, leaving only 5K DOS
footprint in lower (under 640K) memory;
<li>16 MByte RAM disk installed, <code>TMPDIR</code> environment variable points to
it (e.g., <kbd>set TMPDIR=e:</kbd>, if E: is the RAM drive letter);
<li>32 MByte of disk cache, set to delayed-write operation;
</ul>

</ul>

<p><hr>
Node:&nbsp;<a name="Reasonable%20hardware">Reasonable hardware</a>,
Next:&nbsp;<a rel=next href="#Config">Config</a>,
Previous:&nbsp;<a rel=previous href="#Optimal%20hardware">Optimal hardware</a>,
Up:&nbsp;<a rel=up href="#Requirements">Requirements</a>
<br>

<h2>3.8 Machine most of us will <em>actually</em> buy <small>...</small></h2>

<p><em><strong>Q</strong>: OK, I don't have this much money.  What is the <strong>reasonable</strong>
configuration?</em>

<br><p>
<p><strong>A</strong>:  If you have the following machine, you should be able to stop
worrying about memory and compilation performance:

<ul>
<li>CPU: P133 with 256 KB off-chip cache;
<li>RAM: 32 MByte;
<li>Disk: 12 ms IDE with VLB controller, or SCSI;
<li>4 MByte RAM disk;
<li>8 MByte disk cache;
</ul>

<p>This will leave you with about 19 MBytes of free extended RAM.  Note
that the RAM disk must be at least 4 MBytes to hold the output of the
preprocessor for some exceedingly large source files (notably, some GCC
source files).  If you don't have that much RAM to spare and still want
to compile <em>very</em> large source files, either reduce the disk cache
so you can give more to RAM disk, or point <code>TMPDIR</code> to your hard
disk and make the disk cache larger, if you can.

<p><hr>
Node:&nbsp;<a name="Config">Config</a>,
Next:&nbsp;<a rel=next href="#More%20than%2064MB">More than 64MB</a>,
Previous:&nbsp;<a rel=previous href="#Reasonable%20hardware">Reasonable hardware</a>,
Up:&nbsp;<a rel=up href="#Requirements">Requirements</a>
<br>

<h2>3.9 How to configure your system for DJGPP</h2>

<p><em><strong>Q</strong>: How do I configure my system to get optimal performance under
DJGPP?</em>

<br><p>
<p><strong>A</strong>:  That depends on the amount of RAM you have installed in your
machine.  Below are some guidelines to help you.

<ol type=a start=1>
</p><li>If you have 2 MBytes or less RAM installed:

<ul>
<li>Don't use <strong>any</strong> memory manager. 
<li>Use of CWSDPMI as your DPMI host is highly recommended. 
<li>Remove any TSR and device drivers you don't absolutely need (like
<code>SETVER.EXE</code>, <code>HIMEM.SYS</code> etc.) from your <code>CONFIG.SYS</code>
and <code>AUTOEXEC.BAT.</code>
<li>Do <strong>not</strong> install disk cache or RAM disk; point your <code>TMPDIR</code>
environment variable to a directory on your hard disk.  Put a
sufficiently large <code>BUFFERS=</code> statement into your <code>CONFIG.SYS</code>
(I recommend setting <code>BUFFERS=40,8</code>) to make DOS file operations
faster<a rel=footnote href="#fn-8"><sup>8</sup></a>. 
<li>If you use CWSDPMI as your DPMI host, get the <code>CWSPARAM</code> program
(from the <code>csdpmi4b.zip</code> archive) and set the
"Minimum application memory desired before 640K paging" parameter to
512K or larger.  Depending on how much memory you actually have, you
might need to further fine-tune this parameter.  This parameter defines
the lowest amount of extended memory CWSDPMI will use; if your system
doesn't have that much free extended RAM, CWSDPMI will use conventional
memory instead, where usually there should be around 600K of free RAM. 
<li>If you run under Windows, be sure to set the maximum amount of extended
memory on your PIF file for the DOS box to a reasonable value. 
</ul>

<p>With this configuration, GCC will run out of free physical RAM and start
paging when compiling almost any C program and all C<tt>++</tt> programs.  If
you are serious about DJGPP development, you need to buy more RAM
<strong>urgently</strong>.

</p><li>If you have 2-4 MBytes of RAM installed:

<ul>
<li>Don't use <strong>any</strong> memory manager.

<li>Remove any TSR and device driver you don't absolutely need (like
<code>SETVER.EXE</code>, <code>HIMEM.SYS</code>) from your <code>CONFIG.SYS</code> and
<code>AUTOEXEC.BAT.</code>

<li>Get a disk cache which works from conventional memory and configure it to
256K size at most, or don't use a cache at all.

<li>Do <strong>not</strong> install a RAM disk; point your <code>TMPDIR</code> environment
variable to a directory on your hard disk.

<li>If you run under Windows, be sure to set the maximum amount of extended
memory on your PIF file for the DOS box to a reasonable value. 
</ul>

<p>With this configuration, GCC will still run out of free physical RAM and
start paging when compiling large C programs and most C<tt>++</tt> programs. 
Plan to buy more RAM as soon as you can.

</p><li>If you have 5-8 MBytes of RAM installed:

<ul>
<li>Use a memory manager such as <code>EMM386</code> or <code>QEMM386</code>.  Try using
the <code>FRAME=NONE</code> parameter of the memory manager.  This will
disable Expanded Memory (EMS) services as far as most programs are
concerned; if you must use DJGPP together with any program which needs
EMS, try to configure that program to use Extended Memory (XMS) instead.

<li>Load DOS, device drivers and TSRs <strong>HIGH</strong>.  This is done by using
the <code>DEVICEHIGH=</code> command (instead of <code>DEVICE=</code> in
<code>CONFIG.SYS</code>, and by using the <code>LOADHIGH</code> command in
<code>AUTOEXEC.BAT</code>.

<li>Give your disk cache 1 MByte of RAM.  Enable its delayed-write (a.k.a. 
write-back) feature.

<li>Do <strong>not</strong> install a RAM disk; point your <code>TMPDIR</code> environment
variable to a directory on your hard disk.

<li>If, after configuring your system as above, you still have more than 2.5
MBytes of free RAM left (4 MBytes, if you plan to program in C<tt>++</tt> a lot),
enlarge the disk cache size.

<li>If you run under Windows, be sure to set the maximum amount of extended
memory on your PIF file for the DOS box to a reasonable value. 
</ul>

<li>If you have more than 8 MBytes of RAM:

<ul>
<li>Use a memory manager to load DOS, TSRs and device drivers <strong>HIGH</strong>.

<li>Install at least a 2-MByte-large disk cache, configured to use the delayed-
write feature.  If you have plenty of RAM, you can give your cache as much
as 8 MBytes of memory.  Here's an example of a line to put into your
<code>AUTOEXEC.BAT</code> file that installs an 8-MByte cache for hard disks
<code>C:</code>, <code>D:</code>, and <code>F:</code>:

<pre>loadhigh c:\dos\smartdrv.exe c+ d+ f+ 8192
</pre>

<p>(The <code>+</code> character after the drive letter enables the delayed-write
(a.k.a. write-back) feature for that drive.)  Note that you do
<strong>not</strong> need, and should not install a disk cache if you intend to
use DJGPP programs from Windows 9X, because Windows includes its own
built-in disk cache (called <code>VCACHE</code>) that is loaded together with
the operating system.

</p><li>If you have more than 10 MBytes left, install a RAM disk with a size of at
least 1.5 MBytes and point your <code>TMPDIR</code> environment variable to it. 
If your RAM disk is less than 4 MBytes, GCC might run out of space there
for <em>very</em> large source files (e.g., cccp.c file from the GCC source
distribution), but this shouldn't happen unless the size of the source
file you are compiling approaches 1 MByte.  Note that software is
available that lets you install a RAM disk even on Windows 9X. 
(However, I'm told that Microsoft's own <code>RAMDRIVE.SYS</code> only
supports long file name on the RAM disk if its size is less than 9MB.)

<li>As a general rule of thumb, you should leave at least 8 MBytes of free
RAM after installing the disk cache and the RAM disk.  16MB free is even
better, especially if you need to run large programs like <small>RHIDE</small> or
Emacs, or to compile large source files. 
</ul>
</ol>

<p>Some people disable the delayed-write feature for safety reasons, to
avoid losing files due to system crashes.  If you are worried about this,
you can usually gain performance without sacrificing safety by enabling
delayed-write together with an option that causes the cache to flush the
write-behind data before the system returns to the DOS prompt.  For a
<code>SmartDrv</code> disk cache, this is achieved by specifying <code>/N/F</code>
switches instead of <code>/X</code>.

<p>Using a memory manager, such as <code>EMM386</code> or <code>QEMM</code>, is not
required (DJGPP will run without it), but highly recommended, since it
has several advantages:

<ul>
<li>Memory managers provide an API for allocating extended memory called
VCPI (the <dfn>Virtual Control Program Interface</dfn>).  Using that API
allows CWSDPMI to allocate only as much extended memory as is needed,
leaving the rest for non-DJGPP programs, in case you invoke them from
DJGPP programs.  In contrast, without a memory manager, CWSDPMI will
allocate all of the available extended memory to itself, leaving none of
it to non-DJGPP programs.  This consideration is especially important if
you use some DJGPP program, like Bash or Emacs, as your primary system
interface.

<li>Without a memory manager, you cannot access UMBs (the <dfn>Upper Memory
Blocks</dfn>) which give you more DOS memory to work with.  In particular,
CWSDPMI will load itself into UMBs if they are available.

<li>Memory managers provide the VDS (<dfn>Virtual DMA Services</dfn>) API which
allows to write programs that use DMA in protected mode.

<li>Memory managers support the expanded (EMS) memory, which some older DOS
programs still use. 
</ul>

<p>If your memory manager is <code>EMM386</code>, I recommend to put the
<code>NOEMS NOVCPI</code> parameters on its command line.  This will allow you
to use UMBs and up to 128MB of physical memory (if you have that much
installed).  Without these parameters, many versions of <code>EMM386</code>
limit your physical memory to 32MB.

<p>It is generally not recommended to install DJGPP on a networked drive,
since this makes it slower, particularly when linking programs.  If you
do install DJGPP on a networked drive, you should consult your network
administrator to configure the network for maximum performance.  For
Novell networks, a good place to look for advice is the Novell FAQ
(search for a file called <code>nov-faq.htm</code>).

<p><hr>
Node:&nbsp;<a name="More%20than%2064MB">More than 64MB</a>,
Previous:&nbsp;<a rel=previous href="#Config">Config</a>,
Up:&nbsp;<a rel=up href="#Requirements">Requirements</a>
<br>

<h2>3.10 How to get the most RAM for DJGPP programs?</h2>

<p><em><strong>Q</strong>: How do I set my system so that DJGPP programs could use all of my
256MB of installed physical RAM?</em>

<br><p>
<p><em><strong>Q</strong>: I have 128MB of memory installed, but <code>go32-v2</code> only reports
32MB, how can I get more?</em>

<br><p>
<p><em><strong>Q</strong>: You say that CWSDPMI supports up to 512MB of total virtual
memory, but I cannot get more than 128MB!</em>

<br><p>
<p><strong>A</strong>: You can have as much as 256MB of physical memory in DJGPP
programs, provided that you have at least that much installed, and that
you observe the following guidelines:

<ul>
<li>Use CWSDPMI as your DPMI server.  With a possible exception of Qualitas'
386Max, all the other DPMI servers usually cannot support more than
64MB.  (The DPMI server built into Windows usually won't even let you
have more than 64MB physical <em>and</em> virtual memory combined, unless
you have more than 64MB installed physically, see below.)

<li>Do <strong>not</strong> install any memory managers but <code>HIMEM</code>: most of
the others will limit the amount of accessible memory to 64MB
(<code>EMM386</code> usually limits it to 32MB unless you turn off the VCPI
support using the <code>NOVCPI NOEMS</code> parameters on the <code>EMM386</code>
command line).  Using <code>HIMEM</code> from MS-DOS 7 does allow access to
more than 64MB.  Note that you <em>must</em> install <code>HIMEM</code>, since
without it, BIOS is the only way to find out how much memory is
installed, and the standard system BIOS only supports up to 64MB of
memory.

<li>If you are using <code>QEMM</code> (version 8.0 or later), you must include
the <code>USERAM=</code> parameter (e.g., <code>USERAM=128M</code> for 128MB) on
its command line in your <code>CONFIG.SYS</code> and specify the exact amount
of memory installed on your machine, otherwise <code>QEMM</code> won't support
more than 64MB.

<li>Make sure you use the latest release r5 of CWSDPMI.  Versions before r4
only supported up to 128MB of main memory, and had bugs with more than
64MB.  CWSDPMI r4 supports up to 256MB of memory, but has bugs when the
total amount of memory approaches 256MB, so if you use r4, make sure the
total amount of memory is less than 256MB.

<li>If you want to use more than 128MB of virtual memory, run the CWSPARAM
program and enlarge the "Maximum number of 4K pages in swap file"
parameter.  The default value is for 128MB of virtual memory. 
</ul>

<p>Another possibility is to run your program from the Windows 9X DOS box,
after changing the <code>EMM386</code> line in your <code>CONFIG.SYS</code> like
this:

<pre> DEVICE=C:\WINDOWS\EMM386.EXE NOEMS L=131072
</pre>

<p>I'm told that this line (here for 128MB of installed memory) together
with an "Auto" setting of the DPMI memory for the DOS box allows DJGPP
programs to use up to 117MB of memory when running from the DOS box
under Windows 9X.

<p>If you need to use more than 256MB of physical memory, upgrade to
CWSDPMI r5 or later.  Another possibility is to run under OS/2 which
features a built-in DPMI 1.0 support which can be configured to support
as much as 512MB of DPMI memory (the user who reported this didn't know
how much of this can be physical RAM).

<p><hr>
Node:&nbsp;<a name="Getting%20DJGPP">Getting DJGPP</a>,
Next:&nbsp;<a rel=next href="#Docs">Docs</a>,
Previous:&nbsp;<a rel=previous href="#Requirements">Requirements</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>4 Where and What to Download?</h1>

<p>This chapter explains where and how can you get DJGPP, and recommends
which parts of the archive you should download.

<ul>
<li><a href="#SimTel">SimTel</a>:                     Pick up from your nearest SimTel mirror. 
<li><a href="#How%20to%20download">How to download</a>:            Anonymous FTP, of course! 
<li><a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>:               For those who use Netscape/Mosaic only. 
<li><a href="#What%20to%20download">What to download</a>:           Look here to decide what packages you need. 
<li><a href="#Disk%20space">Disk space</a>:                 How much disk storage do you need? 
<li><a href="#DJGPP%20Fatware">DJGPP Fatware</a>:              Can I do with less MBytes? 
<li><a href="#Uninstall">Uninstall</a>:                  How to uninstall a DJGPP package. 
</ul>

<p><hr>
Node:&nbsp;<a name="SimTel">SimTel</a>,
Next:&nbsp;<a rel=next href="#How%20to%20download">How to download</a>,
Previous:&nbsp;<a rel=previous href="#Getting%20DJGPP">Getting DJGPP</a>,
Up:&nbsp;<a rel=up href="#Getting%20DJGPP">Getting DJGPP</a>
<br>

<h2>4.1 Where can DJGPP be found?</h2>

<p><em><strong>Q</strong>: Where can I get DJGPP?</em>

<br><p>
<p><strong>A</strong>: Look on any SimTel.NET mirror in the pub/simtelnet/gnu/djgpp/
subdirectory, world-wide.

<dl>
<dt><i>The primary SimTel.NET site is:</i>
<dd><a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/">ftp.simtel.net</a><a rel=footnote href="#fn-9"><sup>9</sup></a>

<br><dt><i>Here is a list of hosts by countries that offer mirror sites:</i>
<dd>

<br><p>
<br><dt><i>Australia:</i>
<dd><a href="ftp://mirror.aarnet.edu.au/pub/simtelnet/gnu/djgpp/">mirror.aarnet.edu.au</a>
<br><dt><i>Australia:</i>
<dd><a href="ftp://ftp.tas.gov.au/pub/simtelnet/gnu/djgpp/">ftp.tas.gov.au</a>
<br><dt><i>Australia:</i>
<dd><a href="ftp://sunsite.anu.edu.au/pub/pc/simtelnet/gnu/djgpp/">sunsite.anu.edu.au</a>
<br><dt><i>Vienna, Austria:</i>
<dd><a href="ftp://ftp.univie.ac.at/mirror/simtelnet/gnu/djgpp/">ftp.univie.ac.at</a>
<br><dt><i>Brussels, Belgium:</i>
<dd><a href="ftp://ftp-public.linkline.be/pub/simtelnet/gnu/djgpp/">ftp-public.linkline.be</a>
<br><dt><i>Sao Paulo, Brazil:</i>
<dd><a href="ftp://ftp.unicamp.br/pub/simtelnet/gnu/djgpp/">ftp.unicamp.br</a>
<br><dt><i>Brazil:</i>
<dd><a href="ftp://ftp.iis.com.br/pub/simtelnet/gnu/djgpp/">ftp.iis.com.br</a>
<br><dt><i>Bulgaria:</i>
<dd><a href="ftp://ftp.eunet.bg/pub/simtelnet/gnu/djgpp/">ftp.eunet.bg</a>
<br><dt><i>Alberta, Canada:</i>
<dd><a href="ftp://ftp.telusplanet.net/pub/simtelnet/gnu/djgpp/">ftp.telusplanet.net</a>
<br><dt><i>Ottawa, Canada:</i>
<dd><a href="ftp://ftp.crc.ca/pub/systems/ibmpc/simtelnet/gnu/djgpp/">ftp.crc.ca</a>
<br><dt><i>Vancouver, Canada:</i>
<dd><a href="ftp://ftp.direct.ca/pub/simtelnet/gnu/djgpp/">ftp.direct.ca</a>
<br><dt><i>Chile:</i>
<dd><a href="ftp://sunsite.dcc.uchile.cl/pub/Mirror/simtelnet/gnu/djgpp/">sunsite.dcc.uchile.cl</a>
<br><dt><i>Czech Republic:</i>
<dd><a href="ftp://ftp.eunet.cz/pub/simtelnet/gnu/djgpp/">ftp.eunet.cz</a>
<br><dt><i>Prague, Czech Republic:</i>
<dd><a href="ftp://pub.vse.cz/pub/simtelnet/gnu/djgpp/">pub.vse.cz</a>
<br><dt><i>Czech Republic:</i>
<dd><a href="ftp://ftp.zcu.cz/pub/simtelnet/gnu/djgpp/">ftp.zcu.cz</a>
<br><dt><i>Denmark:</i>
<dd><a href="ftp://ftp.net.uni-c.dk/pub/simtelnet/gnu/djgpp/">ftp.net.uni-c.dk</a>
<br><dt><i>Espoo, Finland:</i>
<dd><a href="ftp://ftp.funet.fi/mirrors/ftp.simtel.net/pub/simtelnet/gnu/djgpp/">ftp.funet.fi</a>
<br><dt><i>Neuilly, France:</i>
<dd><a href="ftp://ftp.grolier.fr/pub/simtelnet/gnu/djgpp/">ftp.grolier.fr</a>
<br><dt><i>France:</i>
<dd><a href="ftp://ftp.lip6.fr/pub/simtelnet/gnu/djgpp/">ftp.lip6.fr</a>
<br><dt><i>Germany:</i>
<dd><a href="ftp://ftp.mpi-sb.mpg.de/pub/simtelnet/gnu/djgpp/">ftp.mpi-sb.mpg.de</a>
<br><dt><i>Bochum, Germany:</i>
<dd><a href="ftp://ftp.rz.ruhr-uni-bochum.de/pub/simtelnet/gnu/djgpp/">ftp.rz.ruhr-uni-bochum.de</a>
<br><dt><i>Chemnitz, Germany:</i>
<dd><a href="ftp://ftp.tu-chemnitz.de/pub/simtelnet/gnu/djgpp/">ftp.tu-chemnitz.de</a>
<br><dt><i>Heidelberg, Germany:</i>
<dd><a href="ftp://ftp.uni-heidelberg.de/pub/simtelnet/gnu/djgpp/">ftp.uni-heidelberg.de</a>
<br><dt><i>Paderborn, Germany:</i>
<dd><a href="ftp://ftp.uni-paderborn.de/pub/simtelnet/gnu/djgpp/">ftp.uni-paderborn.de</a>
<br><dt><i>Trier, Germany:</i>
<dd><a href="ftp://ftp.uni-trier.de/pub/pc/mirrors/Simtel.net/gnu/djgpp/">ftp.uni-trier.de</a>
<br><dt><i>Wuerzburg, Germany:</i>
<dd><a href="ftp://ftp.rz.uni-wuerzburg.de/pub/pc/simtelnet/gnu/djgpp/">ftp.rz.uni-wuerzburg.de</a>
<br><dt><i>Athens, Greece:</i>
<dd><a href="ftp://ftp.ntua.gr/pub/pc/simtelnet/gnu/djgpp/">ftp.ntua.gr</a>
<br><dt><i>Hong Kong:</i>
<dd><a href="ftp://ftp.comp.hkbu.edu.hk/pub/simtelnet/gnu/djgpp/">ftp.comp.hkbu.edu.hk</a>
<br><dt><i>Hong Kong:</i>
<dd><a href="ftp://ftp.cs.cuhk.hk/pub/simtelnet/gnu/djgpp/">ftp.cs.cuhk.hk</a>
<br><dt><i>Hong Kong:</i>
<dd><a href="ftp://ftp.hkstar.com/pub/simtelnet/gnu/djgpp/">ftp.hkstar.com</a>
<br><dt><i>Hong Kong:</i>
<dd><a href="ftp://sunsite.ust.hk/pub/simtelnet/gnu/djgpp/">sunsite.ust.hk</a>
<br><dt><i>Hungary:</i>
<dd><a href="ftp://ftp.iif.hu/pub/simtelnet/gnu/djgpp/">ftp.iif.hu</a>
<br><dt><i>Dublin, Ireland:</i>
<dd><a href="ftp://ftp.heanet.ie/pub/simtelnet/gnu/djgpp/">ftp.heanet.ie</a>
<br><dt><i>Dublin, Ireland:</i>
<dd><a href="ftp://ftp.iol.ie/pub/simtelnet/gnu/djgpp/">ftp.iol.ie</a>
<br><dt><i>Rome, Italy:</i>
<dd><a href="ftp://cis.uniroma2.it/simtelnet/gnu/djgpp/">cis.uniroma2.it</a>
<br><dt><i>Italy:</i>
<dd><a href="ftp://ftp.flashnet.it/pub/simtelnet/gnu/djgpp/">ftp.flashnet.it</a>
<br><dt><i>Naples, Italy:</i>
<dd><a href="ftp://ftp.unina.it/pub/simtelnet/gnu/djgpp/">ftp.unina.it</a>
<br><dt><i>Italy:</i>
<dd><a href="ftp://mcftp.mclink.it/pub/simtelnet/gnu/djgpp/">mcftp.mclink.it</a>
<br><dt><i>Saitama, Japan:</i>
<dd><a href="ftp://ftp.saitama-u.ac.jp/pub/simtelnet/gnu/djgpp/">ftp.saitama-u.ac.jp</a>
<br><dt><i>Saitama, Japan:</i>
<dd><a href="ftp://ftp.riken.go.jp/pub/pc/simtelnet/gnu/djgpp/">ftp.riken.go.jp</a>
<br><dt><i>Japan:</i>
<dd><a href="ftp://ftp.iij.ad.jp/pub/simtelnet/gnu/djgpp/">ftp.iij.ad.jp</a>
<br><dt><i>Japan:</i>
<dd><a href="ftp://ftp.u-aizu.ac.jp/pub/PC/simtelnet/gnu/djgpp/">ftp.u-aizu.ac.jp</a>
<br><dt><i>Japan:</i>
<dd><a href="ftp://ftp.web.ad.jp/pub/simtelnet/gnu/djgpp/">ftp.web.ad.jp</a>
<br><dt><i>Latvia:</i>
<dd><a href="ftp://ftp.lanet.lv/pub/mirror/simtelnet/gnu/djgpp/">ftp.lanet.lv</a>
<br><dt><i>Malaysia:</i>
<dd><a href="ftp://ftp.jaring.my/pub/simtelnet/gnu/djgpp/">ftp.jaring.my</a>
<br><dt><i>Mexico:</i>
<dd><a href="ftp://ftp.gdl.iteso.mx/pub/simtelnet/gnu/djgpp/">ftp.gdl.iteso.mx</a>
<br><dt><i>Netherlands:</i>
<dd><a href="ftp://ftp.euro.net/d5/simtelnet/gnu/djgpp/">ftp.euro.net</a>
<br><dt><i>Utrecht, Netherlands:</i>
<dd><a href="ftp://ftp.nic.surfnet.nl/mirror/simtelnet/gnu/djgpp/">ftp.nic.surfnet.nl</a>
<br><dt><i>Bergen, Norway:</i>
<dd><a href="ftp://ftp.bitcon.no/pub/simtelnet/gnu/djgpp/">ftp.bitcon.no</a>
<br><dt><i>Krakow, Poland:</i>
<dd><a href="ftp://ftp.cyf-kr.edu.pl/pub/mirror/Simtel.Net/gnu/djgpp/">ftp.cyf-kr.edu.pl</a>
<br><dt><i>Warsaw, Poland:</i>
<dd><a href="ftp://ftp.icm.edu.pl/pub/simtelnet/gnu/djgpp/">ftp.icm.edu.pl</a>
<br><dt><i>Poznan, Poland:</i>
<dd><a href="ftp://ftp.man.poznan.pl/pub/simtelnet/gnu/djgpp/">ftp.man.poznan.pl</a>
<br><dt><i>Timisoara, Romania:</i>
<dd><a href="ftp://ftp.dnttm.ro/pub/simtelnet/gnu/djgpp/">ftp.dnttm.ro</a>
<br><dt><i>Singapore:</i>
<dd><a href="ftp://ftp.nus.edu.sg/pub/simtelnet/gnu/djgpp/">ftp.nus.edu.sg</a>
<br><dt><i>Singapore:</i>
<dd><a href="ftp://ftp.singnet.com.sg/pub/systems/simtelnet/gnu/djgpp/">ftp.singnet.com.sg</a>
<br><dt><i>Slovakia:</i>
<dd><a href="ftp://ftp.uakom.sk/pub/simtelnet/gnu/djgpp/">ftp.uakom.sk</a>
<br><dt><i>Slovenia:</i>
<dd><a href="ftp://ftp.arnes.si/software/simtelnet/gnu/djgpp/">ftp.arnes.si</a>
<br><dt><i>Johannesburg, South Africa:</i>
<dd><a href="ftp://ftp.is.co.za/pub/simtelnet/gnu/djgpp/">ftp.is.co.za</a>
<br><dt><i>Stellenbosch, South Africa:</i>
<dd><a href="ftp://ftp.sun.ac.za/pub/simtelnet/gnu/djgpp/">ftp.sun.ac.za</a>
<br><dt><i>South Africa:</i>
<dd><a href="ftp://ftp.netactive.co.za/pub/simtelnet/gnu/djgpp/">ftp.netactive.co.za</a>
<br><dt><i>South Africa:</i>
<dd><a href="ftp://ftp.saix.net/pub/simtelnet/gnu/djgpp/">ftp.saix.net</a>
<br><dt><i>South Korea:</i>
<dd><a href="ftp://ftp.sogang.ac.kr/pub/simtelnet/gnu/djgpp/">ftp.sogang.ac.kr</a>
<br><dt><i>South Korea:</i>
<dd><a href="ftp://sunsite.snu.ac.kr/pub/simtelnet/gnu/djgpp/">sunsite.snu.ac.kr</a>
<br><dt><i>Spain:</i>
<dd><a href="ftp://ftp.rediris.es/mirror/simtelnet/gnu/djgpp/">ftp.rediris.es</a>
<br><dt><i>Stockholm, Sweden:</i>
<dd><a href="ftp://ftp.sunet.se/pub/simtelnet/gnu/djgpp/">ftp.sunet.se</a>
<br><dt><i>Zurich, Switzerland:</i>
<dd><a href="ftp://sunsite.cnlab-switch.ch/mirror/simtelnet/gnu/djgpp/">sunsite.cnlab-switch.ch</a>
<br><dt><i>Chung-Li, Taiwan:</i>
<dd><a href="ftp://ftp.ncu.edu.tw/Packages/simtelnet/gnu/djgpp/">ftp.ncu.edu.tw</a>
<br><dt><i>Taipei, Taiwan:</i>
<dd><a href="ftp://nctuccca.edu.tw/mirror/simtelnet/gnu/djgpp/">nctuccca.edu.tw</a>
<br><dt><i>London, UK:</i>
<dd><a href="ftp://ftp.demon.co.uk/pub/simtelnet/gnu/djgpp/">ftp.demon.co.uk</a>
<br><dt><i>London, UK:</i>
<dd><a href="ftp://ftp.globalnet.co.uk/pub/simtelnet/gnu/djgpp/">ftp.globalnet.co.uk</a>
<br><dt><i>London, UK:</i>
<dd><a href="ftp://ftp.easynet.net/pub/simtelnet/gnu/djgpp/">ftp.easynet.net</a>
<br><dt><i>Lancaster, UK:</i>
<dd><a href="ftp://mic5.hensa.ac.uk/mirrors/simtelnet/gnu/djgpp/">mic5.hensa.ac.uk</a>
<br><dt><i>London, UK:</i>
<dd><a href="ftp://sunsite.doc.ic.ac.uk/packages/simtelnet/gnu/djgpp/">sunsite.doc.ic.ac.uk</a>
<br><dt><i>Arizone, USA:</i>
<dd><a href="ftp://ftp.datacanyon.com/pub/simtelnet/gnu/djgpp/">ftp.datacanyon.com</a>
<br><dt><i>Concord, California, USA:</i>
<dd><a href="ftp://ftp.cdrom.com/pub/simtelnet/gnu/djgpp/">ftp.cdrom.com</a>
<br><dt><i>California, USA:</i>
<dd><a href="ftp://ftp.digital.com/pub/micro/pc/simtelnet/gnu/djgpp/">ftp.digital.com</a>
<br><dt><i>Georgia, USA:</i>
<dd><a href="ftp://ftp.peachnet.edu/pub/mirrors/simtelnet/gnu/djgpp/">ftp.peachnet.edu</a>
<br><dt><i>Urbana, Illinois, USA:</i>
<dd><a href="ftp://uarchive.cso.uiuc.edu/pub/systems/pc/simtelnet/gnu/djgpp/">uarchive.cso.uiuc.edu</a>
<br><dt><i>Massachusets, USA</i>
<dd><a href="ftp://ftp.bu.edu/pub/mirrors/simtelnet/gnu/djgpp/">ftp.bu.edu</a>
<br><dt><i>Rochester, Michigan, USA:</i>
<dd><a href="ftp://OAK.Oakland.Edu/pub/simtelnet/gnu/djgpp/">OAK.Oakland.Edu</a>
<br><dt><i>Missouri, USA:</i>
<dd><a href="ftp://galileo.galilei.com/pub/simtelnet/gnu/djgpp/">galileo.galilei.com</a>
<br><dt><i>New York, NY, USA:</i>
<dd><a href="ftp://ftp.rge.com/pub/systems/simtelnet/gnu/djgpp/">ftp.rge.com</a>
<br><dt><i>Oklahoma, USA:</i>
<dd><a href="ftp://ftp.ou.edu/pub/simtelnet/gnu/djgpp/">ftp.ou.edu</a>
<br><dt><i>Corvallis, Oregon, USA:</i>
<dd><a href="ftp://ftp.orst.edu/pub/simtelnet/gnu/djgpp/">ftp.orst.edu</a>
<br><dt><i>Pennsylvania, USA:</i>
<dd><a href="ftp://ftp.epix.net/pub/simtelnet/gnu/djgpp/">ftp.epix.net</a>
<br><dt><i>Pennsylvania, USA:</i>
<dd><a href="ftp://ftphost.simtel.net/pub/simtelnet/gnu/djgpp/">ftphost.simtel.net</a>
<br><dt><i>Virginia, USA:</i>
<dd><a href="ftp://mirrors.aol.com/pub/simtelnet/gnu/djgpp/">mirrors.aol.com</a>

</dl>

<p><hr>
Node:&nbsp;<a name="How%20to%20download">How to download</a>,
Next:&nbsp;<a rel=next href="#DJGPP%20by%20WWW">DJGPP by WWW</a>,
Previous:&nbsp;<a rel=previous href="#SimTel">SimTel</a>,
Up:&nbsp;<a rel=up href="#Getting%20DJGPP">Getting DJGPP</a>
<br>

<h2>4.2 How do I download DJGPP?</h2>

<p><em><strong>Q</strong>: How do I download files from these sites?</em>

<br><p>
<p><strong>A</strong>: FTP to the nearest site, log in as <kbd>anonymous</kbd>, give your
full e-mail address as password, and chdir to the <code>djgpp</code>
subdirectory (the exact path to it might be different on different
mirrors, check out <a href="#SimTel">the DJGPP archive path</a>, for your nearest mirror).  Then issue the <kbd>binary</kbd>
command and download the files you need (see <a href="#What%20to%20download">the list of required files</a>) with the <code>get</code> or
<code>mget</code> commands.

<p><hr>
Node:&nbsp;<a name="DJGPP%20by%20WWW">DJGPP by WWW</a>,
Next:&nbsp;<a rel=next href="#What%20to%20download">What to download</a>,
Previous:&nbsp;<a rel=previous href="#How%20to%20download">How to download</a>,
Up:&nbsp;<a rel=up href="#Getting%20DJGPP">Getting DJGPP</a>
<br>

<h2>4.3 What if I don't know what <code>FTP</code> is?</h2>

<p><em><strong>Q</strong>: What is that <code>FTP</code> thing?  I only use <code>Netscape</code> and
<code>IE4</code> for Internet access.</em>

<br><p>
<p><strong>A</strong>:  The SimTel.NET site is <a href="http://www.simtel.net/simtel.net/gnu/djgpp/">on the Web</a>.

<p>You can also convert any of the mirrors' addresses listed in
<a href="#SimTel">the list of SimTel.NET mirrors</a>,
above to a valid URL by prepending <code>ftp://</code> to it.  For example,
the URL for FTP from SimTel.NET is
&lt;<code>ftp.simtel.net/pub/simtelnet/gnu/djgpp/</code>&gt;.  Typing such a URL into your
Web browser will cause it to display the directory contents, and you can
then click on individual files to download them.

<p>For those of you who only have an e-mail connection to the Internet,
there is an ftp-mail server at
&lt;<code>mailto:ftpmail@pub1.bryant.vix.com</code>&gt;.  Send a message with a single
word "help" in the body to the above address, to get instructions.

<p>Walnut Creek, the company which maintains the SimTel.NET collection
where the DJGPP archives are held, also sells a <cite>DJGPP Development
System CDROM</cite>.  It includes <strong>everything</strong> from the DJGPP sites on
SimTel.NET (even the old version 1.12 of DJGPP), some example source
code packages to get you started, and a ready-to-run feature, which
allows you to use DJGPP directly from the CDROM; you can also use a
provided install program to copy some or all of the packages to your
hard disk.  To order the CDROM, go to the <a href="http://www.cdrom.com/titles/prog/x2ftp.htm">Walnut Creek Web site</a>.

<p>The FSF, the organization behind the GNU project, sells a CD-ROM with
a full DJGPP development environment and most of the DJGPP ports of GNU
software.  For details, see the <a href="http://www.gnu.org">FSF Web site</a>.

<a href="mailto:salvador@inti.gov.ar">Salvador Eduardo Tropea (SET)</a>, himself a
veteran DJGPP user and developer, sells a low-cost CDROM with all the
DJGPP v2 files, plus a lot of related stuff downloaded from the net. 
For information, send email to <a href="mailto:set-soft@usa.net">set-soft@usa.net</a>.

<p><hr>
Node:&nbsp;<a name="What%20to%20download">What to download</a>,
Next:&nbsp;<a rel=next href="#Disk%20space">Disk space</a>,
Previous:&nbsp;<a rel=previous href="#DJGPP%20by%20WWW">DJGPP by WWW</a>,
Up:&nbsp;<a rel=up href="#Getting%20DJGPP">Getting DJGPP</a>
<br>

<h2>4.4 What Files to Download?</h2>

<p><em><strong>Q</strong>: What's the minimum set of <code>.zip</code> files I need to download?</em>

<br><p>
<p><strong>A</strong>:  This depends on what you are planning to use DJGPP for.

<p>The following table lists required and recommended files by category. 
An alternative method of choosing the files suitable for your needs is
to <a href="http://www.delorie.com/djgpp/zip-picker.html">use the DJGPP zip-picker feature</a> which will guide you through the
process.

<br><p>
<ul>
<li>To only run DJGPP-compiled programs, you MUST download all of
these<a rel=footnote href="#fn-10"><sup>10</sup></a>:

<dl>
<dt><code>v2/readme.1st</code>
<dd>This explains how to install DJGPP and get started with using it.

<br><dt><code>v2/faq230b.zip</code>
<dd>The latest edition of this FAQ list.  Use it whenever you have problems
installing and using DJGPP.

<br><dt><code>v2/frfaq21b.zip</code>
<dd>This FAQ list translated into French by <a href="mailto:deef@pobox.oleane.com">Francois Charton</a>.

<br><dt><code>v2misc/csdpmi4b.zip</code>
<dd>CWSDPMI, the DJGPP free DPMI server.  DJGPP programs require DPMI
services, which provide a way to run 32-bit protected-mode programs
under real-mode MS-DOS.  (If you can get DPMI services in your
environment, like if you run under Windows, QDPMI, or OS/2, you don't
need CWSDPMI, but I recommend downloading it nonetheless so you can try
it in case you have trouble with other DPMI servers.)

<br><dt><code>v2misc/pmode11b.zip</code>
<dd>This is an alternative DPMI server, PMODE/DJ.  Its memory footprint is
smaller than CWSDPMI and it can be bundled with DJGPP programs to make a
stand-alone executable that doesn't require a DPMI server to run. 
PMODE/DJ doesn't support virtual memory and its implementation of the
DPMI spec is a bit more restricted than that of CWSDPMI, but it is
faster, and therefore more appropriate for high-performance interrupt
handling.

<br><dt><code>v2/djtzn203.zip</code>
<dd>This archive includes the <dfn>timezone</dfn> files, which are used by
several library functions and programs that call those functions, to
translate file time stamps between different time zones.  You will need
this archive if you run DJGPP-compiled programs that set file times for
files downloaded from a distant place; one example is an archiving
program such as <code>unzip</code> or Tar.  Most people will only need a
single file from this distribution.  See <a href="#Zoneinfo">zoneinfo files</a>, for a detailed explanation
of these files. 
</dl>

<li>For developing C programs (no C<tt>++</tt>), you MUST download all of the above,
plus the following:

<dl>
<dt><code>v2gnu/gcc2952b.zip</code>
<dd>The GNU C Compiler binaries and docs (including the docs for the C<tt>++</tt>
compiler).

<br><dt><code>v2gnu/bnu281b.zip</code>
<dd>The GNU Binutils, including <code>as</code>, the GNU assembler; <code>ld</code>, the
GNU linker; and their docs.  GCC calls these utilities during
compilation.

<br><dt><code>v2/djdev203.zip</code>
<dd>C header files and libraries, library reference, minimal development
environment (including assembly-level debuggers), DJGPP-specific
utilities and their documentation.  Required to compile/link C programs.

<br><dt><code>v2gnu/txi40b.zip</code>
<dd>Info, a stand-alone program to read GNU hypertext documentation files, and
an environment to produce such files.  Without <code>info</code>, you cannot
read the C library reference and the docs included with the ported GNU
software packages.  This package also includes the <code>install-info</code>
utility, which helps to install Info docs of optional utilities that you
download.  Several files required to format Texinfo docs for printing
are also included. 
</dl>

<li>For developing C<tt>++</tt> programs, you will need all of the above, plus the
following:

<dl>
<dt><code>v2gnu/gpp2952b.zip</code>
<dd>The GNU C<tt>++</tt> compiler, (the docs are part of the gccNNNb.zip package,
see above), the C<tt>++</tt> header files and standard C<tt>++</tt> class
libraries, including the STL, and their docs.

<br><dt><code>v2gnu/lgp2952b.zip</code>
<dd>Additional GNU C<tt>++</tt> class libraries.  This library is now deprecated
and no longer maintained.  I suggest not to use it.

<br><dt><code>v2gnu/objc2952b.zip</code>
<dd>If you want to develop Objective-C programs, you will need this file,
which includes the Objective-C compiler and header files.  More
information about Objective-C is available <a href="http://www.virtualschool.edu/lang/objectivec/">from Brad Cox's home page</a>.  Many Objective-C related
links can be found at
&lt;<code>http://www.sente.ch/cetus/oo_objective_c.html</code>&gt;. 
</dl>

<li>For developing Fortran programs, you will need the C development tools
(no need to download C<tt>++</tt> compilers and libraries), plus the
following:

<dl>
<dt><code>v2gnu/g772952b.zip</code>
<dd>The GNU f77 compiler and libraries. 
</dl>

<li>The following are some optional packages which you might want:

<ul>
<li>Debugging:

<dl>
<dt><code>v2gnu/gdb418b.zip</code>
<dd>GDB, the GNU Debugger and its docs.  (Note that the <code>djdev</code>
distribution includes two simpler, assembly-level debuggers,
<code>edebug</code> and <code>fsdb.</code>  The latter presents a user interface
similar to that of Turbo Debugger.) 
</dl>

<li>Additional development tools (consider getting at least the Make
distribution):

<dl>
<dt><code>v2gnu/mak3781b.zip</code>
<dd>GNU Make program with its docs.  (Make is a program that can
automatically compile/link a program given the description of
dependencies between the various source and object files, on a special
file called <code>Makefile</code>.)  You should install Make 3.75 or later if
you use DJGPP v2.01 (previous ports of Make have subtle
incompatibilities with v2.01 tools).  The DJGPP port of Make supports
Unix-style shells (as well as DOS <code>COMMAND.COM</code> and its
<code>4DOS</code>/<code>NDOS</code> replacements) and can be used to run Unix
Makefiles if you install a Unix-style shell (e.g., <code>bash</code>) and
auxiliary utilities.  It also supports long filenames on Windows 9X and
MS-DOS pathnames with drive letters.

<br><dt><code>v2apps/rhide14b.zip</code>
<dd>The <small>RHIDE</small> integrated development environment for DJGPP (similar to
Borland IDE), written by <a href="mailto:robert.hoehne@gmx.net">Robert Hoehne</a>. 
The latest version features an integrated debugger, based on GDB code; a
stand-alone version of GDB with a Turbo Vision interface (but not all
GDB features can be used); and support for user interface in languages
other than English (using a port of GNU <code>gettext</code> library).  Latest
developments and beta versions of <small>RHIDE</small> are available <a href="http://www.tu-chemnitz.de/~sho/rho/rhide.html">from <small>RHIDE</small> home page</a>.  Binaries
of an improved beta version is available <a href="http://www.lanet.lv/~pavenis/rhide.html">from Andris Pavenis's home page</a>; this version uses TVision
v1.0.9, <small>SETEdit</small> v0.4.39, and its debugging engine is based on
GDB 4.18 and DJGPP debug support from a pretest version of v2.03.

<br><dt><code>v2/djlsr203.zip</code>
<dd>The sources of the DJGPP C library and utilities written specifically
for DJGPP.  If you can afford the disk space (it requires about 10MB), I
recommend installing or at least downloading it, so you can easily fix
possible library bugs.  Note that beginning with DJGPP v2.02, the
sources for the time-zone-related programs and files are available
separately, in the <code>djtzs203.zip</code> archive.

<br><dt><code>v2gnu/bsh203b.zip</code>
<dd>Bash (<code>Bourne-Again SHell</code>), the GNU shell, and its docs.  If you
mostly work in Unix environment, you will feel right at home using
<code>bash</code> as your interactive shell.  It is also great as a batch
shell for running Unix-born shell scripts and Makefiles when these are
too complex to convert them to MSDOS.  If you install <code>bash</code>, you
should also install auxiliary utilities (Fileutils, Textutils, Sh-utils,
Grep, Diffutils, Findutils, Sed and Gawk) as these are usually invoked
from many shell scripts and Makefiles.

<br><dt><code>v2gnu/bsn125b.zip</code>
<dd>Bison, a Yacc-like parser generator, and its docs.  You will need it if
you intend to build a compiler or a parser for some language.

<br><dt><code>v2gnu/acnf213b.zip</code>
<dd>Gnu Autoconf, a tool for producing shell scripts that automatically
configure software source code packages to adapt to target platforms.

<br><dt><code>v2gnu/dif272b.zip</code>
<dd>GNU Diffutils (diff, cmp, diff3, sdiff), and their docs.  If you need to
submit patches or changes to DJGPP or GNU sources, you will need the GNU
<code>diff</code> program from this package.  <code>diff</code> is also required by
almost all configuration-management packages, such as <small>RCS</small> and
<small>CVS</small>.

<br><dt><code>v2gnu/emacs.README</code>
<dt><code>v2gnu/em2005*.zip</code>
<dd>GNU Emacs, the most powerful, customizable, extensible programmer's
editor known today.  The DJGPP port supports mouse, menu bar, pop-up
menus, color syntax highlighting, reading Info documentation and
compilation from within the editor, long filenames on Windows 9X, and
much more.  Emacs can and should be used as an integrated development
environment (another alternative is <small>RHIDE</small>, see above).  Please
read the file <code>emacs.README</code> before you begin downloading the rest.

<br><dt><code>v2gnu/fil316b.zip</code>
<dd>GNU Fileutils, including <code>ls</code>, <code>rm</code>, <code>cp</code>, <code>mv</code>, and
others.  Highlights of the latest port: <code>ls</code> supports colorization
of files (like on Linux), <code>ln -s</code> knows about DJGPP-style
"symlinks" (see <a href="#Symlinks">symlink feature of DJGPP</a>, elsewhere in this document), <code>install
-s</code> will strip executables on the fly, and all the utilities support
long filenames on Windows 9X and numbered backups (even on plain DOS). 
This package is a must if you want to run Unix shell scripts, as they
use some of these utilities <em>a lot</em>.

<br><dt><code>v2gnu/find41b.zip</code>
<dd>GNU Findutils, including <code>find</code>, <code>xargs</code>, and <code>locate</code>. 
These programs are used to process a group of files which share some
common attributes, like the file name pattern, read/write permissions,
file time-stamps, etc.  Since DOS has its own, incompatible program
called <code>find.exe</code>, you will need either to make sure DJGPP's
<code>bin</code> subdirectory is before the <code>C:\DOS</code> directory (for
DOS and Windows 3.X) and <code>C:\WINDOWS\COMMAND</code> directory
(for Windows 9X) on your <code>PATH</code>, or to rename the DOS <code>find</code>
program to some other name.  If you don't, you might see the following
message when you try to run <code>find</code>:

<pre> FIND: Parameter format not correct
</pre>

<br><dt><code>v2gnu/flx254b.zip</code>
<dd>Flex, a Lex-like lexical analyzer generator, and its docs.  Required to
build compilers or programs which break streams of characters into
lexical tokens.  Used a lot in conjunction with Bison, a parser
generator.

<br><dt><code>v2gnu/gwk304b.zip</code>
<dd>GNU Awk, an interpreter for a powerful text-processing language with
many built-in functions.  Gawk is also invoked by many shell scripts, so
if you use Bash or need to run shell scripts, you should download Gawk.

<br><dt><code>v2gnu/grep24b.zip</code>
<dd>GNU Grep package and its docs.  The programs of this package are used to
search for strings or regular expressions within files.  You will also
need this if you use Emacs (which has commands that invoke Grep) or if
you want to run Unix shells and Makefiles.

<br><dt><code>v2gnu/idu32db.zip</code>
<dd>GNU Id-utils and their docs.  These utilities are used to quickly search
for tokens in all the files that comprise a directory tree (e.g., a
large project).  They are similar to <code>Grep</code>, but much faster, and
their notion of a token is sensitive to the source language of the
scanned file, so they are more appropriate e.g. for searching variable
names in C source files.

<br><dt><code>v2gnu/pat254b.zip</code>
<dd>GNU Patch program and docs.  Required to apply patches to sources given
a source-level patch-file generated by <code>diff</code>.

<br><dt><code>v2gnu/perl552b.zip</code>
<dd>Perl, a powerful scripting and text-processing language implemented as
an interpreter.  Many sophisticated scripts, like
<code>texi2html</code><a rel=footnote href="#fn-11"><sup>11</sup></a>, use Perl.  In particular, the GNU Automake package is
implemented as a Perl script.

<br><dt><code>v2gnu/sed302b.zip</code>
<dd>GNU Sed (a batch editor) program and its docs.  Many ported packages
require it during the build process on MSDOS.

<br><dt><code>v2gnu/shl112b.zip</code>
<dd>GNU Sh-utils.  A must if you use the port of <code>bash</code> or want to run
Unix Makefiles, but some utilities (such as <code>env</code> or <code>test</code>)
can also be very useful on their own right.

<br><dt><code>v2gnu/txt20b.zip</code>
<dd>GNU Textutils.  Includes many useful programs, such as <code>sort</code>,
<code>wc</code>, <code>cat</code>, <code>join</code>, <code>paste</code>, <code>od</code>, and
<code>uniq</code>.  Unix shell scripts and Makefiles call some of these
<em>a lot</em>, so you should install this package if you run them. 
</dl>

<li>Developing text-mode and graphics GUI applications:

<dl>
<dt><code>v2tk/grx23.zip</code>
<dd>A graphics library for DJGPP.  Note that it is still in development, so
some advanced features might not work.  GRX is quite portable to other
operating systems: it is known to work with several DOS compilers,
including Borland and Watcom; on Linux with svgalib and X11, and on
several Unix platforms with X11R5 or later version of X-Windows.  Also,
GRX is the only library that supports printing out graphics images
(check out the <code>addons/print</code> directory in the GRX distribution). 
A significant drawback of GRX is that its docs is <em>very</em> outdated
and incomplete.

<a href="mailto:hsc@techfak.uni-kiel.de">Hartmut Schirmer</a> is the current
maintainer of GRX.  GRX is distributed under the GNU Library License
(a.k.a. LGPL).  Latest versions of GRX, including fixes to known
problems and plans for future developments can be found on the <a href="http://www.gnu.de/software/GRX/">GRX home page</a>.

<br><dt><code>v2tk/bcc2grx.zip</code>
<dd><a name="BCC2GRX"></a>
The interface library to convert Borland graphics calls into calls to
GRX library functions.

<br><dt><code>v2tk/allegro/alleg312.zip</code>
<dd>A recursive acronym for <dfn>Allegro Low LEvel Game ROutines</dfn>, Allegro
is a powerful game-writing and graphics library.  It is also an
alternative to GRX (see above), even if you don't need to develop a
game.  It is somewhat less portable than GRX to other operating systems,
but its documentation is significantly better and up-to-date.  Unlike
GRX, Allegro is <em>not</em> under LGPL, it is free.  A port of Allegro to
Win32 and to Linux is in the works (initial versions are available).

<p>By popular demand, Allegro now has its mailing list.  To post a message
to the list, send email to <a href="mailto:allegro@canvaslink.com">allegro@canvaslink.com</a>.  To
subscribe to the Allegro list, send a message to
<a href="mailto:listserv@canvaslink.com">listserv@canvaslink.com</a> with the text <code>subscribe allegro
{your full name}</code>.  Another related resource is the <a href="http://www.talula.demon.co.uk/allegro/">Allegro home page</a>.

<br><dt><code>v2tk/pdc22.zip</code>
<dd>A public-domain Curses library, for programming text-mode user-interfaces
which are portable to Unix or ported from Unix.

<p>Version 2.3 of PDCurses was released.  It is available <a href="ftp://ftp.lightlink.com/pub/hessling/PDCurses/">via FTP</a>. 
</dl>

</ul>

<p>Note that all of the packages have source distributions
(<code>*s.zip</code>) which you can download in case you discover a bug, or
want to know more about how the tools work.  The companion <code>*d.zip</code>
files hold the documentation for the package converted into HTML, DVI
and PostScript formats.

<p>For description of additional files not mentioned here, get the file
<code>00_index.txt</code>; it contains a full list of the distribution files and a
short description of every file. 
</ul>

<p><hr>
Node:&nbsp;<a name="Disk%20space">Disk space</a>,
Next:&nbsp;<a rel=next href="#DJGPP%20Fatware">DJGPP Fatware</a>,
Previous:&nbsp;<a rel=previous href="#What%20to%20download">What to download</a>,
Up:&nbsp;<a rel=up href="#Getting%20DJGPP">Getting DJGPP</a>
<br>

<h2>4.5 How much disk space will I need?</h2>

<p><em><strong>Q</strong>: Wow, that's a lot of files.  How much disk storage will I need?</em>

<br><p>
<p><strong>A</strong>:  The following lists the approximate disk space required for
several major configurations, and additional storage required for some
optional packages:

<p><table><tr align="left"><td>Execution-only environment                  <td>300 KBytes
<br></tr><tr align="left"><td>Developing C programs                       <td>15 MBytes
<br></tr><tr align="left"><td>Developing C++ programs                     <td>20 MBytes
<br></tr><tr align="left"><td>Developing Objective-C programs             <td>16 MBytes
<br></tr><tr align="left"><td>Additional storage for RHIDE                <td>4 MBytes
<br></tr><tr align="left"><td>Additional storage for DJGPP sources        <td>6 MBytes
<br></tr><tr align="left"><td>Additional storage for GDB                  <td>1.1 MBytes
<br></tr><tr align="left"><td>Additional storage for Emacs                <td>30 MBytes
<br></tr><tr align="left"><td>Additional storage for Flex                 <td>280 KBytes
<br></tr><tr align="left"><td>Additional storage for Bison                <td>310 KBytes
<br></tr><tr align="left"><td>Additional storage for Diffutils            <td>560 KBytes
<br></tr><tr align="left"><td>Additional storage for Make                 <td>650 KBytes
<br></tr><tr align="left"><td>Additional storage for Patch                <td>180 KBytes
<br></tr><tr align="left"><td>Additional storage for Sed                  <td>200 KBytes
<br></tr><tr align="left"><td>Additional storage for Graphics libraries   <td>4 MBytes
<br></tr></table>

<p>Note that the above lists only approximate numbers.  In particular, the
disk cluster size can significantly change the actual disk space
required by some of the distributions (those with a large number of
files).  The numbers above are for disks which have 8KB or smaller
clusters.

<p>In addition to the space for installing the software, you will need some
free disk space for the swap file.  You should leave enough free disk
space to make the total virtual memory at least 20 MBytes; that will be
enough for most applications.  Invoke the <code>go32-v2.exe</code> program
without arguments to see how much DPMI memory and swap space DJGPP
applications can use.  Depending on your DPMI host, you might need to
review its virtual memory settings in addition to leaving free disk
space; CWSDPMI only requires that enough free disk space be available,
but other DPMI hosts have special settings to specify how much virtual
memory they let their clients use, as explained in <a href="#How%20much%20memory">how to set up memory</a>, below.

<p><hr>
Node:&nbsp;<a name="DJGPP%20Fatware">DJGPP Fatware</a>,
Next:&nbsp;<a rel=next href="#Uninstall">Uninstall</a>,
Previous:&nbsp;<a rel=previous href="#Disk%20space">Disk space</a>,
Up:&nbsp;<a rel=up href="#Getting%20DJGPP">Getting DJGPP</a>
<br>

<h2>4.6 Can I get away with less megabytes?</h2>

<p><em><strong>Q</strong>: The above table means that I need more about 20 MBytes for
C/C<tt>++</tt> development environment; that's about 7 1.44MB diskettes to
hold even the compressed archive!!  Seems to me DJGPP is afflicted by
the <strong>fatware</strong> disease<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: Pulling that many megabytes through the net from my overloaded
SimTel.NET mirror is almost impossible.  Can't you prepare a ZIP archive
which only includes stuff I can't do without?</em>

<br><p>
<p><strong>A</strong>: There are a number of shareware/freeware programs floating around
which allow formatting DOS diskettes to almost twice their usual capacity,
so you can use less floppies.  One such program is <a href="ftp://ftp.simtel.net/pub/simtelnet/msdos/diskutil/2m30.zip">2M</a>.

<p>Also, with the proliferation of drives that can burn CD-ROMs and the
availability of high-capacity removable media, like Zip drives, using
floppies is no longer the only solution for a movable DJGPP.

<p>To make downloading DJGPP easier, download and compile the
<code>BatchFTP</code> program.  It allows you to submit a script of FTP
commands and will repeatedly try to login into the FTP site you specify
until the script is successfully completed.  It is smart enough to
understand the messages which the FTP server sends to you (like
<code>login refused</code> etc.) and also is nice to the remote server by
sleeping for some time between login attempts.  <code>BatchFTP</code> is free
software and can be found on <a href="ftp://oak.oakland.edu/pub/unix-c/networks/batchftp.tar.Z">many FTP sites</a>.

<p><code>BatchFTP</code> is a Unix program; those who access the net from their
PC (not by dialing into some Unix host with a shell account), can use
one of the available programs for automated FTP access.

<p>As for the minimal DJGPP installation, volunteers are welcome to
prepare such an archive and make it publicly available, in the same
spirit as <code>EZ-GCC</code> did for DJGPP v1.x.

<p><hr>
Node:&nbsp;<a name="Uninstall">Uninstall</a>,
Previous:&nbsp;<a rel=previous href="#DJGPP%20Fatware">DJGPP Fatware</a>,
Up:&nbsp;<a rel=up href="#Getting%20DJGPP">Getting DJGPP</a>
<br>

<h2>4.7 How to uninstall a DJGPP package.</h2>

<p><em><strong>Q</strong>: How can I uninstall a certain package?</em>

<br><p>
<p><em><strong>Q</strong>: How can I install a newer version of some package without leaving
traces of the older installation?</em>

<br><p>
<p><strong>A</strong>:  The <code>*.mft</code> files in the <code>manifest</code> subdirectory hold
the lists of all the files included in every package you install.  For
example, when you unzip <code>gcc2951b.zip</code>, it puts a file called
<code>gcc2951b.mft</code> into the <code>manifest</code> subdirectory.  The easiest
way to remove all those files is to use the <code>*.mft</code> files as
response files to a command which deletes files.  For example:

<pre>  rm -f @manifest/gcc2951b.mft
</pre>

<p>The <code>rm</code> program is part of the GNU Fileutils package, available as
<code>v2gnu/fil316b.zip</code> from the usual DJGPP FTP sites.

<p>Some packages might not have the <code>*.mft</code> files.  In general, you
should complain about such cases; however, if a package installs
entirely into its own directory tree, you can uninstall it by simply
removing that tree:

<pre> rm -rf <var>package-dir</var>
</pre>

<p>(The <code>-r</code> option tells <code>rm</code> to recursively remove all
subdirectories of the named directory <var>package-dir</var>).

<p>When you install a new version of a package, it is best to uninstall the
previous version first, like in the above example, and then install the
new one.  Otherwise, you might leave behind old files that the new
version doesn't overwrite, and that will cause problems due to
incompatibilities with the new version.

<p><hr>
Node:&nbsp;<a name="Docs">Docs</a>,
Next:&nbsp;<a rel=next href="#Trouble">Trouble</a>,
Previous:&nbsp;<a rel=previous href="#Getting%20DJGPP">Getting DJGPP</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>5 The DJGPP Documentation</h1>

<p>This chapter explains where to find and how to read DJGPP documentation,
and how to solve occasional problems with the docs system.

<ul>
<li><a href="#Where%20is%20the%20docs">Where is the docs</a>:           Where to find the docs and how to read them. 
<li><a href="#No%20Info">No Info</a>:                     For those who can't stand Info. 
<li><a href="#Printed%20docs">Printed docs</a>:                Where to find a printed manual. 
<li><a href="#Cannot%20find%20docs">Cannot find docs</a>:            For some programs it's tricky <small>...</small>
<li><a href="#Man%20pages">Man pages</a>:                   How to read these. 
<li><a href="#Last%20resort">Last resort</a>:                 Look in the source, of course! 
</ul>

<p><hr>
Node:&nbsp;<a name="Where%20is%20the%20docs">Where is the docs</a>,
Next:&nbsp;<a rel=next href="#No%20Info">No Info</a>,
Previous:&nbsp;<a rel=previous href="#Docs">Docs</a>,
Up:&nbsp;<a rel=up href="#Docs">Docs</a>
<br>

<h2>5.1 Where are the documentation files?</h2>

<p><em><strong>Q</strong>: I don't see any documentation files<small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  The documentation files are in the <code>info/</code> subdirectory of
your main DJGPP installation directory.  You will need a program to read
these docs, which are hypertext structured files.  You have several
choices:

<ol type=a start=1>
<li>Use the stand-alone <code>Info</code> reader.

<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/txi40b.zip">Texinfo</a>
includes <code>INFO.EXE</code> and its docs.  Unzip it and type <kbd>info
&lt;Enter&gt;</kbd>.  It will bring up a (hopefully) self-explanatory online
help system.  Confused?  Press &lt;?&gt; to see the list of all Info
commands.  Still confused?  Press &lt;h&gt; to have <code>Info</code> take you
on a guided tour through its commands and features.

<li>Use the <code>Info</code> command of your favorite editor.

<p>If you use Emacs, you already know about <code>Info</code>.  (What's that?  You
don't?  Type <kbd>C-h &lt;i&gt;</kbd> and you will get the top-level menu of all
the Info topics.)  <small>RHIDE</small> also has an integrated Info reader, which
is the core of its help system.

</p><li>Use SET's <code>InfView</code> browser.  This is a replacement for the
stand-alone Info reader from the GNU Texinfo distribution, but with a
better user interface.  It is written and maintained by <a href="mailto:salvador@inti.gov.ar">Salvador Eduardo Tropea (SET)</a>, and is the same Info
viewer that is part of <small>RHIDE</small> and <small>SETEdit</small>.

<li>Get and install TkInfo, a graphical browser for Info documentation that
runs on MS-Windows and uses a port of Tcl/Tk.  TkInfo is free and
available <a href="http://math-www.uni-paderborn.de/~axel/tkinfo/">from the Web</a>.
</ol>

<p><hr>
Node:&nbsp;<a name="No%20Info">No Info</a>,
Next:&nbsp;<a rel=next href="#Printed%20docs">Printed docs</a>,
Previous:&nbsp;<a rel=previous href="#Where%20is%20the%20docs">Where is the docs</a>,
Up:&nbsp;<a rel=up href="#Docs">Docs</a>
<br>

<h2>5.2 How to read the docs without <code>Info?</code></h2>

<p><em><strong>Q</strong>: I'm too old/lazy/busy to learn yet another browser, and I despise
uGNUsable programs like Emacs.  How in the world can I read the DJGPP
docs??</em>

<br><p>
<p><strong>A</strong>: Info files are almost plain ASCII files, so you should be able to
view them with your favorite text file browser or editor.  You will lose
the hypertext structure and you might have a hard time finding the next
chapter (hint: look up the name of the Next node at the beginning of
this node, then use the search commands of the browser, or the Grep
program, to find that name), but other than that, you should be able to
read all the text.

<p>You can also produce pure ASCII files yourself, if you have their Texinfo
sources.  These are usually called <code>*.txi</code> or <code>*.texi</code> and
should be included with the source distribution of every package.  (You
can use the <a href="http://www.delorie.com/djgpp/dl/ofc/">DJGPP server's downloading services</a>, to download individual files.)  To
produce an ASCII file <code>foo.txt</code> from the Texinfo file
<code>foo.txi</code>, invoke the <code>Makeinfo</code> program like this:

<pre> makeinfo --no-split --no-headers --output=foo.txt foo.txi
</pre>

<p><code>Makeinfo</code> is one of the programs which come with the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/txi40b.zip">GNU Texinfo distribution</a>.

<p>If you prefer reading the docs through the Web, point your Web browser
to the <a href="http://www.delorie.com/gnu/docs/">docs page of the DJGPP Web site</a>.

<p>The full documentation of the DJGPP C library in HTML format is
available for downloading from <a href="http://www.delorie.com/djgpp/doc/libc-203.zip">the DJGPP server</a>.

<p><hr>
Node:&nbsp;<a name="Printed%20docs">Printed docs</a>,
Next:&nbsp;<a rel=next href="#Cannot%20find%20docs">Cannot find docs</a>,
Previous:&nbsp;<a rel=previous href="#No%20Info">No Info</a>,
Up:&nbsp;<a rel=up href="#Docs">Docs</a>
<br>

<h2>5.3 How to print the docs?</h2>

<p><em><strong>Q</strong>: I like my docs the old way: printed on paper, right near my
workplace.  How can I print the documentation files which come with
DJGPP?</em>

<br><p>
<p><strong>A</strong>: Most of the DJGPP packages already have their docs converted to a
printable format, look for the files named <code>*d.zip</code> at the same
place where you got the binary <code>*b.zip</code> distribution.  For example,
the ready-to-print docs of GCC 2.95.1 should be in the
<code>v2gnu/gcc2951d.zip</code> archive.  These archives include a <code>.dvi</code>
and a <code>.ps</code> file.  The latter can be printed directly on a
PostScript printer.  If you don't have access to such a printer, you can
use the <code>.dvi</code> file in conjunction with a <dfn>DVI driver</dfn> for your
printer to produce a printed copy of the docs.  A DVI driver is a
program that reads the <code>.dvi</code> file and translates it into commands
for a particular printer device which cause it to print the document. 
DJGPP ports of DVI drivers for LaserJet series of printers are available
<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2apps/tex/dvlj26.zip">on SimTel.NET mirrors in the v2apps/tex directory</a>. 
Drivers for DeskJet series are also available from there, in the
<code>dvdjNNb.zip</code> archive.  For other devices, download and install the
Ghostscript interpreter which supports a lot of popular printers.

<p>You can also get the GNU documentation in DVI, PostScript, and two-up
PostScript formats in <code>.tar.gz</code> format from <a href="http://www.delorie.com/gnu/docs/">the DJGPP server</a>.

<p>Note that some documentation files (notably, the one for GCC and Emacs)
will produce voluminous print-outs.  <em>You have been warned!</em>

<p>If you cannot find a ready archive with printable files anywhere, you
will need to get and install a program called TeX or its work-alike,
like emTeX.  A DJGPP port of TeX is available <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2apps/tex/TeX.README">via FTP</a>.  Install
TeX, then run the <code>texi2dvi</code> shell script<a rel=footnote href="#fn-12"><sup>12</sup></a> on the docs' <em>source</em> files (called <code>*.txi</code> or
<code>*.texi</code>) which you get with the source distribution of every
package you download.  TeX produces a <code>.dvi</code> file which you can
then print using one of the available DVI drivers, as explained above. 
To convert a <code>.dvi</code> file into PostScript, use the <code>DVIPS</code>
program; you can find it as dvps584.zip on the
above-mentioned site, together with the TeX port.

<p>If TeX won't run, check that you have the file <code>texinfo.tex</code>
which defines the TeX macros specific to Texinfo files.  If you
don't, get the latest GNU or DJGPP Texinfo distribution which includes
that file.

<p>If you'd like to produce printed docs of the library reference, TeX
might complain that it cannot find a file named <code>libc2.tex</code>.  This
file is generated from all the <code>*.txh</code> files in the DJGPP source
distribution (<code>djlsr203.zip</code>) and is usually
built as part of the library build procedure.  In order to generate this
file without building the entire library, you need to install
<code>djlsr203.zip</code> and the C<tt>++</tt> compiler, then go
to the <code>src/libc</code> directory and type this from the DOS command
prompt:

<pre>  make misc.exe ../hostbin
  make -C mkdoc
  make -C libc info
</pre>

<p>DJGPP comes with a program called <code>TEXI2PS</code> which can convert
<code>*.txi</code> files into a crude PostScript; try it if you don't care
much about the appearance of the printed docs.  Its advantage is that
you don't need to install any additional packages, just to fetch the
Texinfo sources of the docs.

<p>Finally, if you don't mind paying for the printed documentation, the
Free Software Foundation sells printed copies of manuals for GNU
packages.  You can contact <a href="mailto:fsforder@gnu.org">the FSF</a> for
details.

<p>For those who prefer reading docs with a Web browser, many GNU manuals
in <code>HTML</code> (hypertext) format, suitable for reading with your Web
browser, can be viewed at the <a href="http://www.delorie.com/gnu/docs/">DJGPP Web site</a>.  The <code>*d.zip</code> archives also include the
docs converted to <code>HTML</code>, which you can browse locally on your
machine.

<p><hr>
Node:&nbsp;<a name="Cannot%20find%20docs">Cannot find docs</a>,
Next:&nbsp;<a rel=next href="#Man%20pages">Man pages</a>,
Previous:&nbsp;<a rel=previous href="#Printed%20docs">Printed docs</a>,
Up:&nbsp;<a rel=up href="#Docs">Docs</a>
<br>

<h2>5.4 Some docs are nowhere to be found<small>...</small></h2>

<p><em><strong>Q</strong>: I looked in my <code>info/</code> subdirectory, but I can't find docs
for some of the utilities, like <small>SED</small> or <small>GPROF</small>.</em>

<br><p>
<p><em><strong>Q</strong>: STL, the C<tt>++</tt> Standard Template Library, seems to be
undocumented<small>...</small>.</em>

<br><p>
<p><strong>A</strong>: <small>SED</small> and <small>GPROF</small> are documented in the latest GNU
releases, <code>v2gnu/sed302b.zip</code> and
<code>v2gnu/bnu281b.zip</code>.  Download the latest releases,
and you will get the missing docs.

<p>The STL documentation is not included in the GNU GCC distribution (it
appears that nobody has bothered to write a free documentation for it). 
But you can find the STL docs <a href="http://www.sgi.com/Technology/STL/">on the net</a>; this includes the full documentation and a
tutorial.  Many books that describe C<tt>++</tt> programming also include
documentation of large parts of the STL.  Another place to look for the
reference material about C<tt>++</tt> language and classes is the
<a href="http://www.dinkumware.com/htm_cpl/index.html">Dinkumware site</a>. 
(Dinkumware is a company founded by P.J. Plauger, one of the world's
leading experts on C<tt>++</tt> and the STL, which produces the C<tt>++</tt>
library used by the <small>MSVC</small> compiler.)

<p>The <a href="http://www.ansi.org">ANSI organization</a> is selling the official ANSI
C<tt>++</tt> Standard (full document, about 800 pages) for $18 in PDF format.

<p>If you have some other package without any docs, try downloading the
source archive (<code>*s.zip</code>) for that package and look inside it,
usually in the directory called <code>man/</code> or <code>doc/</code>.  Omitting
documentation from the binary (<code>*b.zip</code>) distribution is generally
considered a bug, so if you find the docs in source distribution only,
please report these cases on the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a>, so that next
binary release could fix this.

<p><hr>
Node:&nbsp;<a name="Man%20pages">Man pages</a>,
Next:&nbsp;<a rel=next href="#Last%20resort">Last resort</a>,
Previous:&nbsp;<a rel=previous href="#Cannot%20find%20docs">Cannot find docs</a>,
Up:&nbsp;<a rel=up href="#Docs">Docs</a>
<br>

<h2>5.5 What are these <code>foo.1</code> files?</h2>

<p><em><strong>Q</strong>: Some docs files are called <code>foo.1</code> or <code>bar.man</code> or
<code>baz.nroff</code>, and they seem to be written in some weird format which
is very difficult to read.  How can I convert them to readable text files?</em>

<br><p>
<p><strong>A</strong>: That weird format is the <code>troff</code> format which is used for
writing Unix <dfn>manual pages</dfn>.  The Unix command <code>man</code> converts
them to formatted text files which are usually displayed with a program
like <code>more</code> or <code>less</code> (and here <code>less</code> is considered to
be more than <code>more</code> <b>:-)</b>).  The formatted file includes bold and
underlined letters produced by over-typing using Backspace characters.

<p>DJGPP binary <code>*b.zip</code> distributions include such man pages already
formatted and ready to be browsed.  To browse formatted man pages, you
will need to install a clone for the Unix <code>man</code> command.  One such
clone is available <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2apps/man12b.zip">from the DJGPP sites</a>.

<p><code>man</code> knows how to find a manual page file, and will format it if
it isn't formatted already, but to browse these files you will need a
program that can page through a text file and which understands how to
show bold and underlined letters instead of backspace-over-typed
characters.  I suggest to download the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/lss340b.zip">DJGPP port of GNU Less</a>,
which uses colors to show bold and underlined letters.

<p>Having installed <code>man</code> and Less, you should be able to view
<code>*.1</code> files like e.g. <code>patch.1</code> with several alternative
tools:

<ul>
<li>Using the <code>man</code> command itself: simply typing <kbd>man patch</kbd> from
the DOS prompt will cause <code>man</code> to look for the man page
<code>patch.1</code> and pipe it to Less.

<li>Using the stand-alone Info reader: type <kbd>info patch</kbd>, and Info will
invoke <code>man</code> as its back-end and display the manual page found by
<code>man</code>.

<p>Using Info to display man pages has an advantage of displaying the Info
version of documentation if it is available, and the man page version if
it's not.  So, by using Info, you don't need to bother to remember which
version of the docs is available for every topic.  Info also knows about
special sections in man pages, such as "SEE ALSO", which refer to
other man pages, and treats them as hypertext links (i.e., you can press
&lt;TAB&gt; to move between the references and press &lt;Enter&gt; to
display the man page under cursor).

</p><li>Emacs, the GNU editor, can also display man pages.  Type <kbd>M-x man
RET patch RET</kbd>, and Emacs will display the <code>patch</code> man page
highlighted with colors.  (You will need to install <small>SED</small> and Gawk,
since Emacs invokes them when processing the man page.)  Emacs also
supports the special sections like "SEE ALSO".

<li>Latest versions of <small>SETEdit</small> can also display man pages. 
<small>SETEdit</small> is on <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2apps/edi0441i.zip">DJGPP sites</a>. 
</ul>

<p>Note that all of these alternatives <em>require</em> <code>man</code> and Less
to be installed.

<p>The binary distribution of the DJGPP port of <code>bash</code> includes a
simple <small>SED</small> script called <code>man2txt.sh</code> which will convert
formatted man pages into plain text; you can then read them with any
text browser or editor.  To convert, invoke Sed like so:

<pre>  sed -f man2txt.sh &lt; file.1 &gt; file.txt
</pre>

<p>If you want to be able to browse <em>unformatted</em> man pages, get and
install the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/gro115b.zip">DJGPP port of Groff</a>. 
<code>man</code> will automatically call Groff if it finds an unformatted
page, so all the ways mentioned above to browse man pages will work with
unformatted pages as well, once you install Groff.

<p>Note that, for GNU packages, the man pages aren't always updated on a
regular basis.  If you need more up-to-date information, see the Info
docs.

<p><hr>
Node:&nbsp;<a name="Last%20resort">Last resort</a>,
Previous:&nbsp;<a rel=previous href="#Man%20pages">Man pages</a>,
Up:&nbsp;<a rel=up href="#Docs">Docs</a>
<br>

<h2>5.6 What if the docs don't say enough?</h2>

<p><em><strong>Q</strong>: OK, I've got the docs and have read them, but I still can't figure
out some details.</em>

<br><p>
<p><strong>A</strong>:  Some ported packages include DJGPP-specific or MSDOS-specific
<code>README</code> files (named <code>README.dj</code>, <code>README.dos</code> or some
such), which explain DOS-specific issues; you should read them before
any serious use of the package, or in case of any problems.  If this
doesn't help, download the sources and look there, or ask on the
net--either the DJGPP News group or appropriate GNU News groups.

<p><hr>
Node:&nbsp;<a name="Trouble">Trouble</a>,
Next:&nbsp;<a rel=next href="#Compiler%20performance">Compiler performance</a>,
Previous:&nbsp;<a rel=previous href="#Docs">Docs</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>6 When the Compiler (or <code>Make</code>, or <code>Info</code>, or <small>...</small>) Crashes<small>...</small></h1>

<p>This chapter explains how to deal with certain problems which may
prevent DJGPP programs from running on your machine.  The first 13
items on the next menu
describe specific problems; if yours isn't solved with these techniques,
read
the description of
<a href="#General%20trouble">the general debugging procedure</a>.

<ul>
<li><a href="#Programs%20hang">Programs hang</a>:             Some DJGPP programs hang. 
<li><a href="#No%20DPMI">No DPMI</a>:                   You must have or install a DPMI server. 
<li><a href="#Buggy%20DPMI">Buggy DPMI</a>:                It might crash all of your v2.x programs. 
<li><a href="#GCC%20optimizations">GCC optimizations</a>:         GCC sometimes crashes when optimizing. 
<li><a href="#Missing%20subprograms">Missing subprograms</a>:       GCC says <strong>``cannot exec as''</strong>. 
<li><a href="#Internal%20error">Internal error</a>:            GCC says <strong>``Internal compiler error''</strong>. 
<li><a href="#Unknown%20filetype">Unknown filetype</a>:          GCC says <strong>``Unknown filetype''</strong>. 
<li><a href="#Make%20hangs">Make hangs</a>:                Compiler hangs, but only under Make. 
<li><a href="#Info%20cannot%20find%20Top">Info cannot find Top</a>:      Info won't display some files. 
<li><a href="#Info%20crashes">Info crashes</a>:              Info crashes upon startup. 
<li><a href="#Bash%20crashes">Bash crashes</a>:              Possible reasons for Bash to crash. 
<li><a href="#ThinkPad">ThinkPad</a>:                  DJGPP programs crash on an IBM ThinkPad. 
<li><a href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>: 
<li><a href="#General%20trouble">General trouble</a>:           Look here for any problem not covered above. 
<li><a href="#Redirect">Redirect</a>:                  How to redirect GCC messages to a file. 
<li><a href="#Archive%20search">Archive search</a>:            Look up your problem in the DJGPP archives. 
<li><a href="#Totally%20lost">Totally lost</a>:              When nothing seems to help, ask on the net. 
</ul>

<p><hr>
Node:&nbsp;<a name="Programs%20hang">Programs hang</a>,
Next:&nbsp;<a rel=next href="#No%20DPMI">No DPMI</a>,
Previous:&nbsp;<a rel=previous href="#Trouble">Trouble</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.1 GCC or some other DJGPP programs hang</h2>

<p><em><strong>Q</strong>: When I try to compile anything, GCC just hangs!</em>

<br><p>
<p><em><strong>Q</strong>: Some programs, like Info and Less, hang on my Windows 9X machine
after some time, requiring to close the DOS box.  Help!!</em>

<br><p>
<p><em><strong>Q</strong>: Bash hangs on Windows 9X after the first DJGPP program I run from
it!</em>

<br><p>
<p><strong>A</strong>: If you are using GCC 2.8.1, and if only GCC hangs, then chances
are that you have set the <code>DJGPP</code> environment variable incorrectly,
or didn't set it at all, or messed up your <code>DJGPP.ENV</code> file by
editing it.  Refer to <a href="#Missing%20headers%20or%20libraries">what to do if GCC hangs</a>, later in this FAQ, for
details about possible problems with setting <code>DJGPP</code>.  When
<code>DJGPP</code> is not set, or points to a non-existent directory, the
first release of GCC 2.8.1 would enter an endless loop (the <code>NTDVM</code>
process on Windows/NT will go nuts allocating memory, as a result of
this).

<p>The latest uploads of the GCC binary (<code>v2gnu/gccNNNb.zip</code>) were
modified to prevent them from hanging.  They abort with an error message
instead of hanging.  You should upgrade to the latest binaries of GCC,
and also set your <code>DJGPP</code> variable correctly.

<p>Some people fail to read the release notes which come with GCC, and do
not install it incorrectly.  If you installed GCC recently and it began
to hang, now is the time to read those instructions again (they are
installed as <code>gnu/gcc-X.YZ/problems.txt</code>).

<p>If interactive programs like Bash, Less, Info, Emacs, and <small>RHIDE</small> are
those which hang, and if it only happens on Windows 9X after running
another DJGPP program from within those programs, then your Windows 9X
installation is afflicted by a subtle bug whereby programs which call
function 1680h of the Interrupt 2Fh (to release the rest of their time
slice when they are idle) hang after they spawn another DJGPP program. 
A modified version of the library function <code>__dpmi_yield</code>, which
works around that bug in Windows, is available in DJGPP v2.02 and later,
and latest uploads of the binaries for the affected programs should be
free from this problem.  If you cannot find a pre-compiled binary that
works, get the sources and rebuild the program with the latest DJGPP
release.

<p><hr>
Node:&nbsp;<a name="No%20DPMI">No DPMI</a>,
Next:&nbsp;<a rel=next href="#Buggy%20DPMI">Buggy DPMI</a>,
Previous:&nbsp;<a rel=previous href="#Programs%20hang">Programs hang</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.2 GCC says "No DPMI"</h2>

<p><em><strong>Q</strong>: I'm trying to run <code>gcc</code>, but all I get is a message saying
"Load error: no DPMI - Get csdpmi*.zip".  What am I doing wrong?</em>

<br><p>
<p><strong>A</strong>: You don't have a DPMI server installed, and DJGPP v2 requires it
to run.  You can either use one of the commercial DPMI servers (e.g.,
run GCC in a DOS box from Windows) or download and install CWSDPMI
(<code>v2misc/csdpmi4b.zip</code> from SimTel.NET
mirrors) which is a free DPMI server written for DJGPP.

<p>If you already have CWSDPMI installed, and these messages still appear,
it might be because of a messed up <code>PATH</code> setting.  The DJGPP
startup code looks for <code>cwsdpmi.exe</code> along the <code>PATH</code>, and,
being optimized for size, it might not be robust enough to cope with
all possible cases of weirdness in the value of <code>PATH</code>.  Try to
copy <code>cwsdpmi.exe</code> into the same directory as the program you are
invoking, and if that helps, change your <code>PATH</code> as appropriate.

<p>If you see the message "Load error: no DPMI - Get csdpmi*.zip" on
Windows/NT, it most probably means that you have disabled the DPMI
services built into NT.  One way that this might happen is if you edit
the <code>autoexec.nt</code> file and remove the line which loads
<code>dosx.exe</code>, or change some of the parameters on that line.  You
cannot use CWSDPMI on NT, so your only bet is to restore NT's built-in
DPMI services.

<p><hr>
Node:&nbsp;<a name="Buggy%20DPMI">Buggy DPMI</a>,
Next:&nbsp;<a rel=next href="#GCC%20optimizations">GCC optimizations</a>,
Previous:&nbsp;<a rel=previous href="#No%20DPMI">No DPMI</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.3 Buggy DPMI host or junk in DJGPP.ENV can crash v2.x programs</h2>

<p><em><strong>Q</strong>: I cannot run v2 applications: they all hang or reboot my system,
while v1.x apps run OK.  Is this what v2 is all about--getting me out
of the DJGPP community?</em>

<br><p>
<p><strong>A</strong>: No, believe it or not, we don't want to oust you.  Your problems
might be caused by a buggy <dfn>DPMI</dfn> (see <a href="#DPMI%20Spec">DOS Protected Mode Interface</a>) host installed on
your machine.  One DPMI host which is particularly known to be a source
of trouble is the one which comes with Novell NWDOS (and also with early
versions of Caldera's DR-DOS, a.k.a. OpenDOS, which is a derivative of
NWDOS).  Please see if DJGPP programs run when you disable DPMI services
of your usual configuration (DJGPP programs will then use the CWSDPMI
host supplied with DJGPP).  To turn off the DPMI host built into Novell
NWDOS and Caldera's DR-DOS, either remove the <code>DPMI=TRUE</code> parameter
from the EMM386 command line, or type <code>DPMI OFF</code> from the DOS
command prompt.

<p>Version 7.03 and later of Caldera's DR-DOS reportedly don't have this
bug in their DPMI server, so upgrade to a latest DR-DOS version if you
can.

<p>Another DPMI host which is known to cause problems in DJGPP is
Quarterdeck's QDPMI which comes with QEMM 7.5.  It was reported to cause
<code>Info</code> and all DJGPP debuggers to crash.  If you use QDPMI, upgrade
to the version 7.53 or later (patches for that version are available
from the Quarterdeck's ftp site), or disable QDPMI and use CWSDPMI.

<p><hr>
Node:&nbsp;<a name="GCC%20optimizations">GCC optimizations</a>,
Next:&nbsp;<a rel=next href="#Missing%20subprograms">Missing subprograms</a>,
Previous:&nbsp;<a rel=previous href="#Buggy%20DPMI">Buggy DPMI</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.4 GCC can crash during optimization</h2>

<p><em><strong>Q</strong>: When I compile my program, the compiler crashes, but the problem
seems to go away if I compile without optimization.</em>

<br><p>
<p><em><strong>Q</strong>: The compiler prints "Virtual memory exhausted" and dies while
compiling some long functions with some optimization options, such as
-funroll-loops or -fforce-addr.</em>

<br><p>
<p><strong>A</strong>:  For some programs, this can be caused by an insufficient stack. 
Some source files make <code>cc1.exe</code> or <code>cc1plus.exe</code> need
preposterously large amounts of stack space, but only when you turn on
optimizations.  (One user reported that an innocent-looking C source
file required 700KB of stack before <code>cc1.exe</code> was able to compile
it with optimizations!)  Try stubediting the compiler to enlarge its
stack, as described elsewhere in this FAQ, <a href="#Internal%20error">how to enlarge the stack</a>, before
you try any other remedies in this section.

<p>If GCC reports that it has exhausted virtual memory, you should first
see if your DPMI memory plus the swap space is large enough (run
<code>go32-v2</code> with no arguments to display the available memory) and
make more memory available, if the reported amount is too small.  Some
programs really need large amounts of memory to compile and/or link. 
For example, linking <code>cc1.exe</code> is known to consume more than 12MB
of memory.  On Windows 9X, be sure to set the amount of DPMI memory
available to the DOS box to the maximum value of 65535K (64MB) in the
DOS box property sheets, under <code>Memory</code>, as explained in
<a href="#Windows9X%20alloc">how to enlarge memory in the DOS box</a>.

<p>Some users have reported that GCC seems to run out of virtual memory if
TMPDIR environment variable points to a RAM disk which doesn't have
enough free space.  Changing TMPDIR to point to a hard disk would
reportedly save the day in those cases.

<p>Compiling with PGCC or EGCS variants of the GNU compiler, as well as
GCC versions 2.95 and later (which are descendants of EGCS) can also
sometimes run out of virtual memory.  These versions of the compilers
are memory hogs, especially when compiling C<tt>++</tt> programs, and at high
optimization levels.  One particular case is when your program makes use
of many STL classes.  Try lowering the optimization level, or compile
without optimizations.

<p>With GCC 2.95 and later, using <code>-pedantic</code> or
<code>-Wreturn-type</code> can cause an explosion in the amount of memory
needed to compile template-heavy C<tt>++</tt> code, such as code that uses
the STL.  Since <code>-Wall</code> includes <code>-Wreturn-type</code>, it can
also cause massive memory consumption; try <code>-Wall
-Wno-return-type</code> to work around the problem.

<p>One user reported that optimization switches force GCC to use a math
co-processor, which can cause it to crash on a machine that lacks a
numeric processor.  Be sure you didn't delete the <code>emu387.dxe</code> file
from your <code>bin</code> subdirectory, when you compile on such machines,
and that your emulation-related setup is right.  See <a href="#Emulation">how to set up FP emulation</a>, for details.

<p>GCC can sometimes crash when optimizing, especially when compiling
C<tt>++</tt> programs, in particular if your code has some syntactic or
semantic bug.  (This is usually a genuine GCC bug, not something special
to DJGPP.)  Upgrade to the latest version of GCC.  If that doesn't help,
then narrow the offending code fragment using the <code>#if 0 <small>...</small>
#endif</code> paradigm.  If this fragment includes an error, correct it and
try again; if it is syntactically and semantically correct, then rewrite
it as equivalent, but syntactically different one.

<p>A GCC switch can sometimes help you zero in on the code fragment that
causes GCC to crash.  If you add <code>-Q</code> to the GCC command line, it
will print the name of every function it compiles.  The function that
makes it crash is probably the one whose name is the last one printed,
or the one after that.

<p>As an extreme measure, don't optimize at all, if that's the only way to
make your program compile.

<p>Another reason for crashes could be some problem with your system
hardware or the BIOS (like if you set an incorrect number of wait states
when accessing memory, or overclock the CPU too much).  To check, try
running the same compilation on another machine, or review your BIOS
settings and hardware configuration.

<p>Yet another cause for such crashes can be connected with excess memory
usage that GCC needs when compiling certain programs, which makes some
DPMI hosts fail.  For details about this, see <a href="#Internal%20error">CWSDPMI allocation problems</a>, below.

<p><hr>
Node:&nbsp;<a name="Missing%20subprograms">Missing subprograms</a>,
Next:&nbsp;<a rel=next href="#Internal%20error">Internal error</a>,
Previous:&nbsp;<a rel=previous href="#GCC%20optimizations">GCC optimizations</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.5 Why does GCC say "cannot exec <code>as</code>"?</h2>

<p><em><strong>Q</strong>: When I try compiling a program, GCC aborts saying "Installation
problem, cannot exec `as': No such file or directory (ENOENT)".  What
does that mean?</em>

<br><p>
<p><em><strong>Q</strong>: When I try compiling a program, GCC aborts saying "Installation
problem, cannot exec `cpp': No such file".  Huh?</em>

<br><p>
<p><strong>A</strong>: This usually means that GCC couldn't find some program it needs
to run to compile your source.  Check the <code>COMPILER_PATH</code>
environment variable or what the <code>COMPILER_PATH</code> line in the
<code>DJGPP.ENV</code> file says, and make sure they point to the directory
where DJGPP programs reside.  Also check that the named directory has
all the required programs: <code>cpp.exe</code>, <code>cc1.exe</code>,
<code>cc1plus.exe</code>, <code>cxxfilt.exe</code>, <code>gasp.exe</code>, <code>as.exe</code>,
<code>ld.exe</code>, and (for Objective-C) <code>cc1obj.exe.</code>  A typical case
is when people fail to install the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/bnu281b.zip">Binutils package</a> and
GCC cannot find <code>as.exe</code> (the assembler) and <code>ld.exe</code> (the
linker).  You can use the <code>-v</code> switch to GCC to see what programs
it invokes and which one of them causes the fatal error.

<p>Beginning with version 2.8.0 of GCC, the place where the pre-processor,
<code>cpp.exe</code>, and the C and C<tt>++</tt> compilers, <code>cc1.exe</code> and
<code>cc1plus.exe</code>, are installed, has changed: they are no more in the
same directory as <code>gcc.exe</code> itself.  If you are using GCC version
2.8.0 or later, and the compiler cannot find <code>cpp.exe</code> or
<code>cc1plus.exe</code>, read the installation instructions carefully: the
file <code>problems.txt</code> explains how to change the settings on
<code>DJGPP.ENV</code> so that GCC will find the pre-processor.  Also, be sure
to remove all traces of the previous compiler installation, since mixing
different compiler versions can be another cause for such problems. 
See <a href="#Uninstall">uninstalling a package</a>.

<p><hr>
Node:&nbsp;<a name="Internal%20error">Internal error</a>,
Next:&nbsp;<a rel=next href="#Unknown%20filetype">Unknown filetype</a>,
Previous:&nbsp;<a rel=previous href="#Missing%20subprograms">Missing subprograms</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.6 What does "Internal compiler error" mean?</h2>

<p><em><strong>Q</strong>: During compilation, GCC prints "Fatal: Error in DJGPP
installation.  Environment variable DJGPP is not defined" and then
aborts<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: GCC aborts with "Internal compiler error" when compiling a
large C<tt>++</tt> program.</em>

<br><p>
<p><em><strong>Q</strong>: GCC behaves erratically when compiling programs, sometimes
crashes with register dump, sometimes compiles okay, sometimes reports
"Internal compiler error".  Why is this happening?</em>

<br><p>
<p><em><strong>Q</strong>: When I try to compile any program, GCC prints "Abort!" and
doesn't compile anything<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: The compiler crashes or dies with "Virtual memory exhausted"
when I compile my simple program!</em>

<br><p>
<p><strong>A</strong>: The fatal error message about <code>DJGPP</code> not being defined
means just that--that your <code>DJGPP</code> environment variable is not
defined.  The other two messages you could see are:

<pre> Environment variable DJGPP point to file `XXYYZZ'
 which doesn't exist
</pre>

<p>or

<pre> Environment variable DJGPP points to wrong or corrupt file `ABCDE'
</pre>

<p>(In both cases, you will see an actual file name instead of
<code>XXYYZZ</code> and <code>ABCDE</code>.)  These messages mean that
<code>DJGPP</code> points to a non-existing directory, or to a file whose
contents are too messed up.  Beginning  with version 2.8.1, GCC refuses
to work when the <code>DJGPP</code> variable doesn't point to the actual path
name of a valid <code>DJGPP.ENV</code> file, because GCC uses the value of the
<code>DJGPP</code> variable to find out where to look for its subprograms like
<code>cpp.exe</code>, <code>cc1.exe</code>, etc.  To solve this, set the
<code>DJGPP</code> variable as the installation instructions (in the file
<code>readme.1st</code>) describe.  Also, make sure you didn't mess up the
beginning of the <code>DJGPP.ENV</code> file, where the value of the
<code>DJDIR</code> variable is computed (when in doubt, compare it with the
stock <code>DJGPP.ENV</code> from the <code>djdevNNN.zip</code> distribution).

<p>A possible cause for the "Abort!" message is that the <code>TMPDIR</code>
environment variable points to a non-writable directory.  If you don't
set <code>TMPDIR</code> from your <code>AUTOEXEC.BAT</code> or from the DOS prompt,
the DJGPP startup code sets it to the <code>tmp</code> subdirectory of the
main DJGPP installation directory.  If DJGPP is installed on a read-only
drive, like CD-ROM or an unwritable networked drive, this default will
not work.  To solve this, set <code>TMPDIR</code> to point to a writable
temporary directory.  If <code>TMPDIR</code> is not set at all, GCC tries to
use <code>TEMP</code> and <code>TMP</code>, in that order, so make sure these also
point to a valid directory.

<p>Internal compiler errors (a.k.a. bugs) can also cause GCC to print
"Abort!".  This FAQ describes a procedure that allows you to find the
spot in the sources where the compiler aborts, see <a href="#GCC%20optimizations">use of the -Q switch</a>, above.  Once you find the offending code, you could
rewrite it and/or submit a bug report to the GCC maintainers.

<p>When GCC aborts with a message such as "Internal compiler error" or
"Exiting due to signal SIGSEGV", it might mean a genuine bug in GCC
(which should be reported to FSF), but it can also happen when GCC
requests additional chunk of memory, and the DPMI server fails to
allocate it because it exhausts available memory for its internal
tables.  Old releases of CWSDPMI could fail like this if an application
asks for a large number of small memory chunks.  Beginning
with release 2, CWSDPMI defines a larger (6KB) default heap that is
configurable by CWSPARAM program to be anywhere between 3K and 40K
bytes, without recompiling CWSDPMI.  You should upgrade to the latest
CWSDPMI if you experience such problems, and if that doesn't help, bump
up the size of CWSDPMI heap using CWSPARAM.

<p>Some innocent-looking programs are known to cause GCC to gobble
preposterous amounts of memory, which could cause it to crash or abort
after printing "Virtual memory exhausted".  One particular case of
such programs is when you initialize very large arrays.  For example,
to compile a source which initializes a char array of 300,000 elements
requires more than 60MB(!) of memory.  You should avoid such constructs
in your programs.

<p>Some programs require very large amounts of stack to compile.  DJGPP
programs have a fixed-size stack that is by default 256KB (512KB in
DJGPP v2.02 and later).  If the compiler, <code>cc1.exe</code> or
<code>cc1plus.exe</code>, doesn't have enough stack to compile a program, it
will overflow its stack and crash, or hang, or die with "Internal
compiler error".  You can enlarge the stack size of any DJGPP program
by running the <code>stubedit</code> program, like this:

<pre>  stubedit cc1.exe minstack=1024k
</pre>

<p>I recommend to enlarge the maximum stack size of <code>cc1.exe</code> to at
least 1024K bytes and that of <code>cc1plus.exe</code> to at least 1.5MB. 
Some people report that they needed to enlarge both the heap of CWSDPMI
and the stack of the C<tt>++</tt> compiler to make such problems go away.

<p>For a program that you wrote, another work-around for the cases where a
program crashes due to failure of CWSDPMI to allocate more RAM is to use
an alternative algorithm for <code>sbrk</code>, by putting the following
somewhere in your program:

<pre>  #include &lt;crt0.h&gt;
  int _crt0_startup_flags = _CRT0_FLAG_UNIX_SBRK;
</pre>

<p>Note that the Unix algorithm for <code>sbrk</code> might cause trouble in
programs that install hardware interrupts handlers.

<p>Note that the problems with insufficient stack size have nothing to do
with the total available memory as reported by <code>go32-v2</code>.  A
compiler can crash because of insufficient stack size even though it has
gobs of memory available to it.  When in doubt, always enlarge the
compiler stack size.

<p>Sometimes, GCC can crash due to problems with your system hardware.  In
particular, bad memory chips can cause GCC to behave erratically, since
the compiler is a memory-intensive program: it moves large buffers
around alot, and uses lots of memory.  One cause of problems with
accessing memory is incorrect setting of the wait states in your BIOS
setup, or too aggressive CPU cache mode that your motherboard cannot
support reliably, or overclocking the CPU.  Try to play with your BIOS
setup and see if that helps.  If you overclocked the CPU, try resetting
it back to its normal speed.

<p>One user reported that he had random crashes and seemingly-missing files
due to a disk without proper cooling.  So if your system sometimes
cannot find files that you <em>know</em> are there, check whether your
disk gets proper cooling and generally works okay.

<p>Another rare case of crashes in GCC was reported on Windows 3.X.  It
seems to be related to the small probability of getting non-contiguous
memory blocks from the Windows' DPMI server.  In general, the DJGPP
library handles these cases, so it is possible that the problem is
actually somewhere in GCC (more accurately, in <code>cc1</code>, the C
compiler).  A tell-tale sign of this problem is that the <small>CS</small> and
<small>DS</small> limit value printed in the crash message is very close to the
end of the 4GB address space, like <code>fffeffff</code>.  The only known cure
for these cases is to patch or rebuild GCC with the Unix <code>sbrk</code>
algorithm, see above.

<p><hr>
Node:&nbsp;<a name="Unknown%20filetype">Unknown filetype</a>,
Next:&nbsp;<a rel=next href="#Make%20hangs">Make hangs</a>,
Previous:&nbsp;<a rel=previous href="#Internal%20error">Internal error</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.7 What does "Unknown filetype" mean?</h2>

<p><em><strong>Q</strong>: I get error messages saying "Unknown filetype" from GCC.</em>

<br><p>
<p><em><strong>Q</strong>: Since a few days ago, whenever I try to run most of the DJGPP
programs, they print a message "C:\DJGPP\BIN\prog.exe: not
COFF" and just terminate.  Help!!!</em>

<br><p>
<p><strong>A</strong>:  It might be that your DJGPP programs and/or <code>STUBIFY.EXE</code>
are infected by a virus.  (This is <em>not</em> a joke!  It did happen to
a few of us and can happen even to you.)  As the DOS stub prepended to
the DJGPP programs is very short, many viruses cannot attach themselves
to it without overwriting the beginning of the DJGPP COFF image which
specifies vital information such as location and length of various
program sections, therefore triggering this error from the code in the
stub that loads the COFF image.

<p>Another possible cause of the "Unknown filetype" message is that you
mix a v2.0 <code>gcc.exe</code> driver with <code>cc1plus.exe</code>, <code>cc1.exe</code>
or other programs from an old v1.x distribution.

<p><hr>
Node:&nbsp;<a name="Make%20hangs">Make hangs</a>,
Next:&nbsp;<a rel=next href="#Info%20cannot%20find%20Top">Info cannot find Top</a>,
Previous:&nbsp;<a rel=previous href="#Unknown%20filetype">Unknown filetype</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.8 Compiler hangs, but only when invoked from Make</h2>

<p><em><strong>Q</strong>: My compiles run OK from the command line, but hang or crash when
I invoke the compiler from Make.</em>

<br><p>
<p><em><strong>Q</strong>: When I try to compile something, I get a message "16-bit DPMI
not supported".</em>

<br><p>
<p><strong>A</strong>: Be sure you aren't inadvertently invoking some 16-bit programs,
such as Borland's Make or <code>cpp.exe</code> from Borland C.  GCC cannot run
them, and cannot run under Borland's Make (because Borland's programs
are 16-bit DPMI clients, and the DPMI 0.9 spec doesn't allow mixing them
with 32-bit DPMI clients such as the DJGPP programs).  It might be that
another program called <code>make.exe</code> or <code>cpp.exe</code> is found
earlier on your <code>PATH</code> than the Make and the preprocessor which
came with DJGPP.  Moving DJGPP's <code>bin</code> directory to the beginning
of your <code>PATH</code> will usually solve these problems.

<p>Note that if you try to mix 16-bit and 32-bit DPMI clients in Windows
DOS box (like use Borland's Make to run GCC, or invoking Borland's
<code>cpp.exe</code> under GCC), the DOS box will usually crash.  So this
problem is not specific to CWSDPMI.

<p>If you <em>must</em> use a non-DJGPP compiler or another utility together
with DJGPP programs, one solution would be to find a version of that
utility that doesn't use the 16-bit DPMI services.  For example, many
DOS compilers have a real-mode version that won't conflict with DJGPP.

<p>If you use Make compiled under DJGPP v1.x, you will also experience all
kinds of trouble when invoking programs compiled under DJGPP v2.  That's
because v1.x programs cannot spawn v2 programs directly (the v1.x
program sees that the child is a DJGPP program and tries to call
<code>go32</code> to run it, but v1's <code>go32</code> cannot run v2 programs). 
The result usually will be that the child either crashes or silently
exits.  If that's your problem, be sure to upgrade your <code>Make</code> to
the port distributed with v2. (Note that v2.x programs generally know
how to spawn both v1.x and v2.x programs.)  You can use <code>go32-v2</code>
to work around this limitation (see <a href="#go32-v2">description of go32-v2</a>, below), but I suggest doing
that only if you absolutely cannot upgrade to v2's <code>Make</code>.

<p>Some users report that v1.x programs might sometimes hang or reboot the
machine when invoked from v2.x Make.  The reason for this is a known bug
in the versions of <code>go32-v2.exe</code> program distributed with DJGPP
v2.0 and 2.01: it would not restore the keyboard handler after the COFF
image it runs exits.  To work around that bug, don't touch the keyboard
throughout the entire run of Make; to solve it, upgrade.

<p><hr>
Node:&nbsp;<a name="Info%20cannot%20find%20Top">Info cannot find Top</a>,
Next:&nbsp;<a rel=next href="#Info%20crashes">Info crashes</a>,
Previous:&nbsp;<a rel=previous href="#Make%20hangs">Make hangs</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.9 Info doesn't like some files</h2>

<p><em><strong>Q</strong>: When I run the Info browser, it tells me it cannot find the node
"Top".</em>

<br><p>
<p><em><strong>Q</strong>: Sometimes, when I mistype the name of the Info topic,
<code>info.exe</code> seems to hang<small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  Check your installation of info files.  The file <code>DJGPP.ENV</code>
in the root of your DJGPP installation mentions the variable
<code>INFOPATH</code> which should point to the directory where Info looks for
its files.  It must find there a file named <code>DIR</code>, the file you are
trying to read, and other files with <code>.iNN</code> or <code>.NN</code> extension,
where <code>NN</code> is a number.  Also, make sure you didn't edit the
beginning of <code>DJGPP.ENV</code>, where the value of <code>%DJDIR%</code> is
computed; if you did, try the original <code>DJGPP.ENV</code>.

<p>Also, the <code>DJGPP</code> environment variable should be set to point to
the full pathname of the file <code>DJGPP.ENV</code>.  See <a href="#Missing%20headers%20or%20libraries">problems with DJGPP variable setting</a>, for a description of some frequent problems
with setting the <code>DJGPP</code> variable.

<p>Assuming the above checks OK, and all the necessary info files are
indeed installed in those directories (did you remember to give that
<code>-d</code> switch to <code>PKUNZIP</code> when unzipping all DJGPP packages?),
it might be that you have an old version of <code>info.exe</code>.  Upgrading
to version 3.12 or later should solve several problems which cause Info
to complain about the "Top" node, or at least make its error messages
more self-explaining.

<p>Some people unzip the <code>txi40b.zip</code> file with
WinZip and fail to disable its feature whereby by default each zip file
is unzipped into a separate directory.  This disrupts the DJGPP
directory structure and break almost every DJGPP package, including
Info.  <em>You need to unzip all DJGPP files under the same
directory!</em>

<p>Another possibility is that the file <code>DIR</code> or the Info file that
you want to browse is corrupted.  For example, it might be a compressed
file, but without the tell-tale <code>.gz</code> or similar extension that
tells <code>info.exe</code> to decompress it.  You could examine the offending
file(s) with a text editor, and re-install them as needed.

<p>If you invoke Info with a name of a topic that is non-existent or not
installed on your system, and you don't have a <code>man</code> command or its
clone installed, versions of Info before 3.12 would wait for 15 seconds
before they print an error message and exit.  If you think Info is
wedged, wait for 15 seconds and see what happens then.  The DJGPP port
of Texinfo 3.12 removes this misfeature, so upgrade if you can.

<p><hr>
Node:&nbsp;<a name="Info%20crashes">Info crashes</a>,
Next:&nbsp;<a rel=next href="#Bash%20crashes">Bash crashes</a>,
Previous:&nbsp;<a rel=previous href="#Info%20cannot%20find%20Top">Info cannot find Top</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.10 Info Crashes During Startup</h2>

<p><em><strong>Q</strong>: Whenever I invoke <code>info.exe</code>, it immediately crashes!  How
can I use DJGPP without reading all those wonderful docs??</em>

<br><p>
<p><strong>A</strong>: One possible reason for this is a bug in <code>EMM386</code> shipped
with some versions of DOS 6.x.  This bug is only triggered if your
system loads the <code>DISPLAY.SYS</code> driver, usually to display non-US
characters supported by your national codepage.  In addition, this bug
causes Info to crash only if it is run in 35- or 40-line display mode;
any other display size avoids the problem.  (The default display mode is
40 lines, as set in the <code>[info]</code> section of <code>DJGPP.ENV</code>.)  So
either switching to another display size, or removing either
<code>EMM386</code> or <code>DISPLAY.SYS</code> from <code>CONFIG.SYS</code>, should
prevent Info from crashing.

<p>If you use DJGPP v2.0, yet another cause of crashes in <code>Info</code> might
be trailing whitespace in the <code>DJGPP.ENV</code> file.  The tell-tale signs
of this failure are a stack dump that is bogus or doesn't start with
your `main' function, or a series of SIGSEGV that won't stop.  Actually,
this is a bug in the DJGPP v2.0 startup code, so any v2.0 program could
crash in this way, but since the last section of stock v2.0
<code>DJGPP.ENV</code> belongs to <code>Info</code>, it is the one which suffers
most from this bug.  Make sure your <code>DJGPP.ENV</code> doesn't have a
<kbd>^Z</kbd> character at the end (some DOS editors put it if you edit the
file), and doesn't end with a blank line.  Alternatively, upgrade to
DJGPP v2.01 or later, where that bug is fixed.

<p><hr>
Node:&nbsp;<a name="Bash%20crashes">Bash crashes</a>,
Next:&nbsp;<a rel=next href="#ThinkPad">ThinkPad</a>,
Previous:&nbsp;<a rel=previous href="#Info%20crashes">Info crashes</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.11 Why does Bash crash?</h2>

<p><em><strong>Q</strong>: Bash crashes on me when I invoke shell scripts<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: Why does Bash say "pipe error: Access denied" when I try to run
two programs via a pipe?</em>

<br><p>
<p><em><strong>Q</strong>: When I run certain complex shell scripts, Bash sometimes prints a
message saying "Cannot make a child for command substitution:
(null)".  What gives??</em>

<br><p>
<p><em><strong>Q</strong>: What does it mean when Bash says "Can't make pipes for command
substitution!"?</em>

<br><p>
<p><strong>A</strong>: If Bash crashes when you invoke shell scripts, check whether
those scripts have <code>#!/bin/sh</code> on their first line.  If they do,
the most probable reason for the crashes is that you don't have
<code>sh.exe</code> anywhere on your <code>PATH</code> (it does <em>not</em> have to
be in <code>/bin</code>!).  Either copy <code>bash.exe</code> into <code>sh.exe</code>, or
create a "symlink" to <code>bash.exe</code>, like this:

<pre> ln -s c:/djgpp/bin/bash.exe c:/djgpp/bin/sh.exe
</pre>

<p>(replace <code>c:/djgpp</code> with the actual pathname of your DJGPP
installation).

<p>Error messages about pipes and command substitution usually mean that
your <code>TMPDIR</code> environment variable points to an invalid drive; make
sure <code>TMPDIR</code> is set and points to an existing directory, and that
the drive where it points is writable and not full.  Old ports of Bash
had problems with <code>`command`</code> substitution, so make sure you have
the latest binaries.

<p><hr>
Node:&nbsp;<a name="ThinkPad">ThinkPad</a>,
Next:&nbsp;<a rel=next href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>,
Previous:&nbsp;<a rel=previous href="#Bash%20crashes">Bash crashes</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.12 DJGPP programs crash on a ThinkPad</h2>

<p><em><strong>Q</strong>: I cannot run any DJGPP program on my ThinkPad!  They all cause
the Windows DOS box to crash with a message about a General Protection
Exception at some cryptic addres like 0277:0044!</em>

<br><p>
<p><strong>A</strong>:  This is a known problem with the ThinkPad: it is supplied with a
set of PCMCIA device drivers from CardWorks that conflict with many
DOS-extended programs, not only DJGPP (the CardWorks <code>README</code> file
mentions problems with <code>PKZIP</code> which also uses protected-mode
instructions).

<p>The only known solution is to uninstall the PCMCIA drivers.  Obvioulsy,
this is a solution only if you don't actually use any of the PCMCIA
devices.

<p><hr>
Node:&nbsp;<a name="Linker%20accesses%20other%20drives">Linker accesses other drives</a>,
Next:&nbsp;<a rel=next href="#General%20trouble">General trouble</a>,
Previous:&nbsp;<a rel=previous href="#ThinkPad">ThinkPad</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.13 Why does the Linker Access my CD Drive or the network?</h2>

<p><em><strong>Q</strong>: Why is it that every time I link a program, the CD-ROM drive is
accessed?</em>

<br><p>
<p><em><strong>Q</strong>: Whenever I link programs, GCC invokes something called `collect2'
which accesses my LAN when it runs.  Why?</em>

<br><p>
<p><strong>A</strong>: CD-ROMs or other drives being accessed during linking is due to a
bug in Binutils 2.7 and in an early release of Binutils 2.8.1: the
linker would always try to look for its script <code>djgpp.djl</code> in a
certain directory on the <code>D:</code> or <code>E:</code> drive (the former in
Binutils 2.7, the latter in 2.8.1), no matter which disk uses that
letter (these accesses usually go unnoticed with hard disks, but are
visible with CD-ROMs, Zip drives, or other slower devices).  Download
and install the latest <code>bnuNNNb.zip</code> archive you can find on
SimTel.NET mirrors, and the problem should go away.

<p>If <code>collect2</code> seems to be accessing the network, it is due to a
bug in the early ports of GCC 2.95: if a root directory of some drive
appeared in your <code>PATH</code> setting, <code>collect2</code> would try to
access a file whose name has two slashes, like <code>C:\/foo</code>.  This
causes Windows 9X to treat this as a UNC (a.k.a. network share) name,
and search the network for such a server which exports this share.  The
ports of GCC 2.95.1 and later don't have this bug.

<p>You can see which directories on what drives does the linker try to
access by passing the <code>--verbose</code> option to the linker.  Here's an
example:

<pre> gcc -o hello.exe hello.o -Xlinker --verbose &gt; linker.log
</pre>

<p>This redirects the linker log to a file which you can then examine. 
Since the list of directories accessed by the linker doesn't depend on
the program being linked, you can try this with any trivial program.

<p>Sometimes, accesses to other drives come from some over-zealous
anti-virus software.  If you have one of these installed, check out its
options: perhaps there are some superflous drive letters there.

<p><hr>
Node:&nbsp;<a name="General%20trouble">General trouble</a>,
Next:&nbsp;<a rel=next href="#Redirect">Redirect</a>,
Previous:&nbsp;<a rel=previous href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.14 Other kinds of trouble</h2>

<p><em><strong>Q</strong>: I've installed DJGPP just like explained in the <code>README.*</code>
files, but when I run gcc, my machine crashes/hangs/needs cold boot.</em>

<br><p>
<p><em><strong>Q</strong>: I get errors I can't figure out when I try to compile something.</em>

<br><p>
<p><strong>A</strong>:  Add the <code>-v</code> switch to the GCC command line and run it again. 
It will print all the subprograms (compiler passes) it is running.  Then
you can see which subprogram caused the error, or where your machine
crashes.  This might give you a hint on what's wrong.

<p>One cause of such problems might be that your system is set up
inefficiently.  If GCC doesn't get enough free RAM, it will run very
slowly, and you might think it crashed when in fact it didn't.  (This
kind of problem usually happens on memory-starved machines.)  Invoking
<code>go32-v2</code> with no arguments will report the amount of memory
available to DJGPP programs; large programs might require up to 20MBytes
to compile, sometimes more.  If you run from the DOS box on Windows 9X,
set its DPMI memory property to 65535KB (64MB) and try again.  Check out
the <a href="#Config">system configuration advice</a>, earlier in this FAQ list, for other suggestions about
your system configuration.

<p>Sometimes, if the <code>TMPDIR</code> environment variable points to a full
disk, GCC may hang or crash as well.  Make sure you have enough free
disk space where <code>TMPDIR</code> points.

<p>A similar case is when DJGPP programs are run off a CD-ROM: in this
case, the default setting of <code>TMPDIR</code> points to the CD drive, which
is unwritable.  You need to point <code>TMPDIR</code> to a writable directory.

<p><hr>
Node:&nbsp;<a name="Redirect">Redirect</a>,
Next:&nbsp;<a rel=next href="#Archive%20search">Archive search</a>,
Previous:&nbsp;<a rel=previous href="#General%20trouble">General trouble</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.15 I cannot keep up with the error messages</h2>

<p><em><strong>Q</strong>: I want to read all the error messages that GCC throws at me, but
there are so many that I can't keep up.  How can I redirect them to a
file?</em>

<br><p>
<p><em><strong>Q</strong>: When I add <code>-v</code> to the GCC command line, how can I put all the
voluminous output into a file, so I don't miss anything when reporting a
problem?</em>

<br><p>
<p><em><strong>Q</strong>: I have this nifty graphics program which bombs from time to time,
but the registers and traceback info are hidden by the graphics display. 
How can I see it?</em>

<br><p>
<p><strong>A</strong>:  Error messages are usually written to <code>stderr</code>, and stock
<code>COMMAND.COM</code> cannot redirect it.  There are several alternatives
to do that:

<ol type=a start=1>

</p><li>You can use a shell smarter then <code>COMMAND.COM</code>, such as <code>4DOS</code>
or <code>bash</code>, which knows how to redirect standard error stream to a
file.  4DOS is shareware and can be found <a href="ftp://ftp.simtel.net/pub/simtelnet/msdos/4dos/4dos601.zip">on SimTel.NET</a>, while <code>bash</code>
is available from the <code>v2gnu</code> directory of DJGPP archives
<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/bsh203b.zip">on SimTel.NET</a>.

<li>You can also run your program under any one of the programs which save
all screen output of programs they spawn in a file.  I suggest using a
program called <code>SCRIPT</code>, which is similar to its Unix namesake.  It
has an advantage of saving everything which goes to screen <em>and</em>
showing it on the screen at the same time.  You can find <a href="ftp://ftp.simtel.net/pub/simtelnet/msdos/screen/script11.zip">SCRIPT on SimTel.NET</a>.

<li>Or you can use the <code>REDIR</code> program which comes with DJGPP.  It also
redirects standard output and/or standard error to a file, but you don't
get a chance to look at the output while the program runs.  Here's how
to run GCC with <code>REDIR</code>:

<pre>  redir -o gcc.log -eo gcc -v ...
</pre>

<p>(put the rest of the GCC command line instead of the dots).  The
messages printed by GCC will be written to the file <code>gcc.log</code>.
</ol>

<p>Windows/NT has its own program named <code>redir.exe</code>, so make sure the
DJGPP's <code>bin</code> subdirectory is listed in the <code>PATH</code> variable
before the NT directories.

<p><hr>
Node:&nbsp;<a name="Archive%20search">Archive search</a>,
Next:&nbsp;<a rel=next href="#Totally%20lost">Totally lost</a>,
Previous:&nbsp;<a rel=previous href="#Redirect">Redirect</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.16 How to search DJGPP archives</h2>

<p><em><strong>Q</strong>: OK, I have all this voluminous output of <code>gcc -v</code>, but I
still have no clue.</em>

<br><p>
<p><strong>A</strong>:  Your problem might be one which has already been posted and
solved on the DJGPP News group.  <a href="mailto:dj@delorie.com">DJ Delorie</a> has set up a searchable News group
archive on <a href="http://www.delorie.com/djgpp/archives/">his Web server</a>. 
You can search the <em>entire</em> mailing list archives in just a few
seconds.  DJ's archives are always up to date, as they receive and store
all posted messages automatically, but the index is updated every 24
hours, so the last day might not be searchable yet.  To search the DJGPP
archives, point your Web browser to the URL above and specify a list of
keywords pertinent to your problem.  You will get a list of messages
which include those keywords; clicking on any of the messages will get
the full text of that message.

<p><hr>
Node:&nbsp;<a name="Totally%20lost">Totally lost</a>,
Previous:&nbsp;<a rel=previous href="#Archive%20search">Archive search</a>,
Up:&nbsp;<a rel=up href="#Trouble">Trouble</a>
<br>

<h2>6.17 How to ask DJGPP gurus for help</h2>

<p><em><strong>Q</strong>: I've read this monstrously-large FAQ, searched the news group
archives, but didn't find anything helpful.  I am totally lost. 
<strong>Help!!!</strong></em>

<br><p>
<p><em><strong>Q</strong>: I don't have time to download all these messages, not to mention
looking through them.  Can't you DJGPP gurus help me? 
<strong>Please??</strong></em>

<br><p>
<p><strong>A</strong>:  DJGPP News group is famous for its outstanding user support.  To
get a fast and effective solution to your problem, you will have to
supply the relevant info about your system, and describe exactly how
things went wrong for you.  To gather this info, do the following:

<ul>
<li>At the DOS command prompt, type <kbd>set &gt; environ.txt</kbd>, then press
&lt;Enter&gt;.

<li>Invoke the <code>go32-v2</code> program (it's in your <code>bin/</code>
subdirectory) and save its output.

<li>Post to the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a> or send electronic mail to the
<a href="mailto:djgpp@delorie.com">DJGPP mailing list</a> and put into your message
the description of your calamity, the contents of the file
<code>ENVIRON.TXT</code>, the output of <code>go32-v2</code>, the contents of your
<code>AUTOEXEC.BAT</code> and <code>CONFIG.SYS</code>, and what GCC printed during
compilation with the <code>-v</code> switch (if your problem is that GCC won't
work).

<li>If your problem involves a program that crashes and prints a stack dump,
please post that stack dump in its entirety; do <strong>not</strong> omit any
details from the crash dump.  It's best to run <code>symify</code> on the
stack dump, and post the output of <code>symify</code>:

<pre>  symify -o dumpfile yourprog
</pre>

<p>(See <a href="#Crash%20traceback">detailed description of symify</a>, for more details.

</p><li>Allow for 2-3 days (more on weekends) for all the reply messages to come
in, then act according to what they recommend. 
</ul>

<p>Be warned that you might get several dozen messages in reply to your
request; this is not meant to overflow your mailbox or sabotage your
relationship with your system manager, it's just the usual friendly
response of fellow DJGPP'ers to your lonely cry for help.  Some of the
replies might suggest what you already checked and reported in your
original message, or even miss the point altogether.  Be ready for this
and don't flame us for trying to help you as much as we can.

<p><hr>
Node:&nbsp;<a name="Compiler%20performance">Compiler performance</a>,
Next:&nbsp;<a rel=next href="#Compiling">Compiling</a>,
Previous:&nbsp;<a rel=previous href="#Trouble">Trouble</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>7 Compiler and Linker Performance</h1>

<p>This chapter deals with speed of compilation and linking under DJGPP,
and how they could be improved.

<p>If you already know whether the compiler or the linker is the slow
part, go to the appropriate section; if not, add <code>-v</code> to your GCC
command line and run it again.  With the <code>-v</code> switch, GCC will
print all the programs it invokes, and you will be able to tell which
one is taking most of the time.

<ul>
<li><a href="#Slow%20compiler">Slow compiler</a>:                How to make the compiler faster. 
<li><a href="#Slow%20linker">Slow linker</a>:                  How to boost the linking speed. 
</ul>

<p><hr>
Node:&nbsp;<a name="Slow%20compiler">Slow compiler</a>,
Next:&nbsp;<a rel=next href="#Slow%20linker">Slow linker</a>,
Previous:&nbsp;<a rel=previous href="#Compiler%20performance">Compiler performance</a>,
Up:&nbsp;<a rel=up href="#Compiler%20performance">Compiler performance</a>
<br>

<h2>7.1 Slow Compilation</h2>

<p><em><strong>Q</strong>: Why GCC is compiling sooo slooowww?</em>

<br><p>
<p><strong>A</strong>:  That depends on what you mean by "slow".  The following table
gives "normal" gcc compilation speed, in source lines per second, on a
166-MHz Pentium:

<p><table><tr align="left"><td>Source language <td>Without optimizations <td>With -O2
<br></tr><tr align="left"><td>C<tt>++</tt>         <td>800                   <td>400
<br></tr><tr align="left"><td>C               <td>1800                  <td>1000
<br></tr></table>

<p>Note that the numbers for compilation with <code>-O2</code> are about 30%
slower for GCC 2.95 and later versions than for previous versions.  This
is because GCC now does much more optimizations under <code>-O2</code> than
previous versions did.

<p>As another data point, compiling the Allegro library takes about 3
minutes on a P500 and about 50 minutes on a 486/DX2-66.

<p>On machines faster or slower than P166, scale these numbers
accordingly.  For example, 486/DX2-66 is about 4 times slower than
P166.  When comparing to this table, don't forget to count header files
your program <code>#include</code>s in the total line count.  And
<strong>don't</strong> check compilation speed on very short programs (like the
classic <code>Hello, world!</code>), because the overhead of loading the
multiple passes of the compiler will completely hide the compiler
performance.  It is also useful to run the compilation twice in
succession, especially if you have a disk cache installed, to prevent
the overhead of the first load from skewing the results.

<p>If your results are close to these (deviations of a few percent are
considered "close" here), then that's as fast as you can get with GCC. 
If they are <em>significantly</em> slower, you may indeed have a problem;
read on.

<p>First, check to see if GCC pages to disk when it compiles.  This is
manifested by a heavy disk traffic which won't go away even if you have
a large write-back disk cache installed.  To be sure, disable the
virtual memory services for your DPMI host (for <code>CWSDPMI</code>, load it
before your program with the <code>-s-</code> switch, or use the
<code>CWSPARAM</code> program to point the swap file to a non-existent drive),
or use <code>CWSDPR0</code> or <code>PMODE/DJ</code> as the DPMI host, and then
run the compilation again; if the compiler aborts with an error message
saying there isn't enough memory, then it <em>was</em> paging in your
original environment.

<p>If paging does happen, you need to free more extended memory.  If you
have a RAM disk, make it smaller, or don't use it at all (it only makes
compiles run about 20% faster), or make your disk cache smaller (but
don't discard the disk cache altogether); if you have other programs
which use extended RAM, make them use less of it.  Failing all of the
above, buy more RAM (see <a href="#Reasonable%20hardware">the description of reasonable configuration</a>). 
Also see <a href="#Config">recommendations for optimal software configuration</a>.

<p>If GCC doesn't page, check the settings of your disk cache.  If you don't
use a cache, install one--this can slash your compilation times by as much
as 40%, more so when compiling a large number of small files.  If you
already have a cache, enable its delayed-write (a.k.a. write-back, a.k.a. 
staggered-write) operation.  Some people disable the delayed-write feature
for safety reasons, to avoid losing files due to system crashes.  If you
are worried about this, you can usually gain performance without
sacrificing safety by enabling delayed-write together with an option
that causes the cache to flush the write-behind data before the system
returns to the DOS prompt.  (For <code>SmartDrv</code> disk cache, this is
achieved by specifying <code>/N/F</code> switches instead of <code>/X</code>.)  GCC
usually gains a lot when you set up your cache in such a way, because
each compiler pass (pre-processor, compiler, assembler) must write
temporary files that are used by the following passes.

<p>It is also worthwhile to check the settings of your system BIOS.  In
particular, the following items should be checked against your motherboard
vendor recommendations:

<p><table><tr align="left"><td>Internal and external CPU cache <td>set to Enable
<br></tr><tr align="left"><td>CPU cache scheme                <td>set to Write-back, if possible
<br></tr><tr align="left"><td>DRAM and SRAM wait states       <td>vendor-recommended optimal values
<br></tr></table>

<p>Incorrect or suboptimal settings of the above items can explain as much as
30% performance degradation on 486 machines, and as much as 500% (!) if
you have a Pentium CPU.

<p><hr>
Node:&nbsp;<a name="Slow%20linker">Slow linker</a>,
Previous:&nbsp;<a rel=previous href="#Slow%20compiler">Slow compiler</a>,
Up:&nbsp;<a rel=up href="#Compiler%20performance">Compiler performance</a>
<br>

<h2>7.2 Slow Linking</h2>

<p><em><strong>Q</strong>: The compiler finishes in a few seconds, but then the linker
grinds away for more than a minute, even on a very short
program<small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  Try linking the trivial <code>Hello, world!</code> program; it
should take no more than 7-10 seconds on a 486, 3-5 seconds on a
Pentium.  If you see much slower linking on your system, then the
following advice might help you.

<p>If you use a disk cache, make sure you enable its write-back (a.k.a. 
delayed-write) operation.  Some people disable the delayed-write feature
for safety reasons, to avoid losing files due to system crashes.  If you
are worried about this, you can usually gain performance without
sacrificing safety by enabling delayed-write together with an option
that causes the cache to flush the write-behind data before the system
returns to the DOS prompt.  For <code>SmartDrv</code> disk cache, this is
achieved by specifying <code>/N/F</code> switches instead of <code>/X</code>.

<p>For very large (several MBytes) executables which are built from a large
number of small source files, the link (as opposed to the compilation)
stage might be the one which needs more RAM than you have free, and thus
be the bottleneck of the time it takes to build your program.  Check
that the size of the executable isn't larger than the amount of your
free RAM.  If it is, then it might make sense to use a smaller (or even
no) disk cache, and allow the linker as much physical RAM as it needs. 
Make sure that the linker wasn't stub-edited to make its transfer buffer
too small.

<p>The first release of GCC 2.95 ported to DJGPP had a bug in the
<code>collect2</code> program (used during the link stage) whereby if a
root directory of any drive appeared in the <code>PATH</code> environment
variable, <code>collect2</code> would try to look for files with names like
<code>C:\/foo</code>, which caused Windows 9X to search the network
(because two slashes in a row would look like a network share name). 
This would create an illusion of a very slow link, when in fact
<code>collect2</code> simply waited for the network operation to time out.

<p>Another reason for slow linking might be that the <code>DJGPP.ENV</code> file
by default sets <code>TMPDIR</code> to a <code>tmp/</code> subdirectory of the main
DJGPP installation directory; if DJGPP is installed on a networked
drive, this means all your temporary files go back and forth through the
network (and networked disks are usually not cached on your PC).  In
such cases, setting <code>TMPDIR</code> to a directory on your local drive, or
to a RAM disk, would probably make linking faster.

<p>DJGPP can be slow if it is installed on a networked drive.  Generally,
this is not recommended.  If you have to, you should configure your
network interface for best performance.  Consult your network
administrator.

<p><hr>
Node:&nbsp;<a name="Compiling">Compiling</a>,
Next:&nbsp;<a rel=next href="#Running">Running</a>,
Previous:&nbsp;<a rel=previous href="#Compiler%20performance">Compiler performance</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>8 Compile-time and Link-time Problems</h1>

<p>Being of a Unix origin, GCC has a somewhat different flavor of
command-line syntax and its peculiar compilation and link algorithms.  It
also has a plethora of optional switches, some of them obscure or
semi-documented.  These are known to confuse users, especially those who
had previous experience with DOS-based C compilers.

<p>This chapter explains how to solve some of those problems which tend to
appear when compiling and linking your programs.

<ul>
<li><a href="#No%20input%20files">No input files</a>:              GCC cannot find the source file. 
<li><a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>:   GCC can't find header files/libraries. 
<li><a href="#Missing%20C++%20headers">Missing C++ headers</a>:         GCC can't find C<tt>++</tt> header files. 
<li><a href="#C++%20comments">C++ comments</a>:                Avoid C<tt>++</tt> comments in C programs. 
<li><a href="#Which%20language">Which language</a>:              GCC resolves it by looking at filename
                                 extensions. 
<li><a href="#Objective%20C">Objective C</a>:                 Problems with Objective C compiler. 
<li><a href="#DJGPP-specific">DJGPP-specific</a>:              How to write DJGPP-specific fragments. 
<li><a href="#Unresolved%20externals">Unresolved externals</a>:        Where are those library functions? 
<li><a href="#Which%20library">Which library</a>:               Which library has which functions? 
<li><a href="#Libraries%20order">Libraries order</a>:             Which libraries to put first? 
<li><a href="#Still%20unresolved">Still unresolved</a>:            C<tt>++</tt> misses complex and iostream functions. 
<li><a href="#djgpp_first_ctor">djgpp_first_ctor</a>:            Why are these unresolved? 
<li><a href="#Large%20image">Large image</a>:                 Static arrays bloat C<tt>++</tt> program image. 
<li><a href="#Large%20executable">Large executable</a>:            Why is DJGPP .EXE so large? 
<li><a href="#DJGPP%20and%20DLLs">DJGPP and DLLs</a>:              Why don't we use DLLs to make programs smaller. 
<li><a href="#No%20EXE">No EXE</a>:                      Novell Netware fails STUBIFY. 
<li><a href="#Allegro%20and%20GRX">Allegro and GRX</a>:             Problems building Allegro and GRX libraries. 
<li><a href="#NULL%20redefined">NULL redefined</a>:              Some C<tt>++</tt> headers redefine NULL. 
<li><a href="#C++%20exceptions">C++ exceptions</a>:              GCC before 2.8.1 doesn't support them. 
<li><a href="#Assembly%20output">Assembly output</a>:             How to generate assembly code with GCC. 
<li><a href="#movedata.h">movedata.h</a>:                  This header triggers compiler errors. 
<li><a href="#Libraries">Libraries</a>:                   How to create object libraries. 
<li><a href="#No%20stubify">No stubify</a>:                  GCC can't find stubify.exe. 
</ul>

<p><hr>
Node:&nbsp;<a name="No%20input%20files">No input files</a>,
Next:&nbsp;<a rel=next href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>,
Previous:&nbsp;<a rel=previous href="#Compiling">Compiling</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.1 GCC doesn't find the source files</h2>

<p><em><strong>Q</strong>: I created a simple source file <code>hello.c</code>, but when I invoke
the compiler, it says: "gcc.exe: hello.c: No such file or directory",
and then exits with the message "No input files."  But <code>hello.c</code>
is there, so why won't the compiler find it??</em>

<br><p>
<p><strong>A</strong>:  One popular reason for this problem is that you use one of those
Windows editors that think they know better how do you want them to name
the files.  For example, <code>Notepad</code> always attaches the
<code>.txt</code> extension to the file name you provide, so when you type
<code>hello.c</code> into the dialog box, <code>Notepad</code> actually creates
<code>hello.c.txt</code>.  In addition, the files listed by <code>My
Computer</code> by default have their extensions not shown, which creates an
illusion that <code>hello.c</code> really <em>is</em> there.

<p>Use the <code>DIR</code> command in the DOS Box to see what files are in
the directory where you run GCC.  (If you have the GNU Fileutils
installed, you can use <code>ls</code> as well.)  This will always show the
full names of the files, exactly like GCC sees them.

<p>You are generally advised to stay away of such "helpful" editors. 
<code>Notepad</code> is not suited well for editing programs, anyway.  If
you must use it, a work-around is to type the file name in quotes:
<code>"hello.c"</code>; then <code>Notepad</code> will leave it alone and not
append the <code>.txt</code> extension.

<p>Another reason for GCC to not be able to find the source file is because
you use long file names on Windows/NT.  Suppose you invoke GCC like
this:

<pre> gcc -c file_name.c
</pre>

<p>The name <code>file_name.c</code> exceeds the DOS 8+3 limits, so if you have
such a file, you probably created it with some Windows editor.  However,
DJGPP programs cannot access long file names on Windows/NT, so gcc
doesn't find such a file and complains.

<p>Type <kbd>dir /x</kbd> from the command line to see the short 8+3 alias name
of your file (in the example above, it should be <code>file_n~1.c</code> or
some such), and use that short name when you invoke GCC.  In general, if
you want to avoid such problems on Windows/NT, you should restrict
yourself to file names that are valid DOS 8+3 names.

<p><hr>
Node:&nbsp;<a name="Missing%20headers%20or%20libraries">Missing headers or libraries</a>,
Next:&nbsp;<a rel=next href="#Missing%20C++%20headers">Missing C++ headers</a>,
Previous:&nbsp;<a rel=previous href="#No%20input%20files">No input files</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.2 GCC can't find headers or libraries</h2>

<p><em><strong>Q</strong>: Why does GCC complain that it cannot open <code>-lstdcx</code>?</em>

<br><p>
<p><em><strong>Q</strong>: When I run the compiler it says it couldn't find header files
and/or libraries.  But the headers and libraries are all there, so why
won't it find them?</em>

<br><p>
<p><em><strong>Q</strong>: When I link my programs, ld.exe complains that it cannot open
crt0.o, although that file exists in the lib subdirectory<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: I tried to compile a program, but GCC complained about missing
header files <code>netdb.h</code> and <code>socket.h</code>.  Can somebody please
mail me those headers?</em>

<br><p>
<p><em><strong>Q</strong>: Why does GCC complain that it "cannot open -lgcc: File format
not recognized"?</em>

<br><p>
<p><strong>A</strong>: An error message about missing <code>-lstdcx</code> usually means that
the linker cannot find the standard C<tt>++</tt> library, <code>libstdcxx.a</code>
(it is truncated to <code>libstdcx.a</code> on DOS and NT systems).  Look into
your <code>lib/</code> subdirectory to see if it's there; if not, unzip it
from the <code>gppNNNb.zip</code> file.

<p>If <code>libstdcxx.a</code> exists but the linker still complains, you most
probably have a problem related to long file names on Windows 9X
(<code>libstdcxx.a</code> exceeds the DOS 8+3 limits).  For a quick fix, try
to <code>set LFN=y</code> in the environment and see if that helps.  If that
doesn't help, make sure you unpacked <code>gppNNNb.zip</code> with an unzip
program which supports long file names.

<p>This issue is further complicated if you use <small>RHIDE</small> v1.4, and is
described in full in the file <code>gnu/gcc-2.95/readme.DJGPP</code> which
comes with the GCC distribution (and which you should have read before
the installation).  Bottom line is that you need to add a line either to
<code>rhide.env</code> (the <small>RHIDE</small> distribution includes a file
<code>rhide_.env</code> which you should rename) or to <code>DJGPP.ENV</code> which
says this:

<pre> RHIDE_TYPED_LIBS_DJGPP.cc=stdcxx
 RHIDE_TYPED_LIBS_DJGPP.cxx=stdcxx
 RHIDE_TYPED_LIBS_DJGPP.cpp=stdcxx
</pre>

<p>When you add these lines, make sure neither they nor the <code>[rhide]</code>
line have trailing whitespace, otherwise <small>RHIDE</small> will not recognize
these lines.

<p>DJGPP version 2.03 and later come with these lines in the
<code>DJGPP.ENV</code> file right out of the box.

<p><small>RHIDE</small> v1.4.7 and later solves this bug, so upgrade to the latest
version if you can.

<p>See <a href="#Missing%20C++%20headers">C<tt>++</tt> headers not found</a>, for similar problems specific to C<tt>++</tt> header
files.

<p>In general, if the compiler complains about missing files, you need
first to find out whether they at all exist on your system.  For C
header files, look in the <code>include</code> directory and its
subdirectories; for C<tt>++</tt> header files, look in the <code>lang/cxx</code>
directory and its subdirectories; for libraries and the <code>crt0.o</code>
file, look in the <code>lib</code> directory.  Some header files and object
files which are specific to a certain GCC version unzip into the
<code>lib/gcc-lib/djgpp/X.YZ</code> directory (where <code>X.YZ</code> is the GCC
version number, e.g. 2.95), so look there as well.

<p>If a header file indeed is not there, and you cannot find it in the
<code>djdevNNN.zip</code> and <code>gppNNNb.zip</code> distributions, it probably
means that this header belongs to a package which isn't part of the
basic DJGPP distribution.  You need to find that package and install it. 
It is important to understand that if a package is missing, getting hold
of the header files like <code>socket.h</code> is not enough: you need the
library of the functions whose declarations and prototypes are in the
header.  For <code>socket.h</code>, you need a sockets library, such as
<code>libsock</code>; see <a href="#Packages">DJGPP packages</a>.  For <code>graphics.h</code>, you need GRX and the Borland-to-GRX
interface, BCC2GRX (rename the file <code>libbcc.h</code> to
<code>graphics.h</code>); see <a href="#BCC2GRX">BCC2GRX interface package</a>.

<p>If the header or the library <em>does</em> in fact exist on your machine,
then in order for the compiler to find them, you should have the
following variable set in your environment<a rel=footnote href="#fn-13"><sup>13</sup></a>:

<pre> set DJGPP=c:/djgpp/djgpp.env
</pre>

<p>and it should point to the correct path of the file <code>DJGPP.ENV</code> on
your system; the file itself is in <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2/djdev203.zip">djdev203.zip</a> in
the DJGPP distribution.  In the above example it is assumed to be in the
<code>C:\DJGPP</code> directory, but you should set it as appropriate for
your installation.

<p>Many of the problems with "missing" files, including the
highly-confusing message about <code>-lgcc</code> ("File format not
recognized"), are usually caused by having the <code>DJGPP</code> variable
set incorrectly.  The following describes some problems with defining
<code>DJGPP</code> which pop up frequently on the DJGPP forum.

<p>Sometimes, people make errors in their <code>AUTOEXEC.BAT</code> that cause
the <var>DJGPP</var> variable to be defined incorrectly, or not defined at
all (some of the more common errors are listed below).  To check what is
the actual setting, type from the DOS prompt:

<pre> set &gt; env.dat
</pre>

<p>then examine the contents of the file <code>env.dat</code>.  You should see
there a line like this:

<pre> DJGPP=c:/djgpp/djgpp.env
</pre>

<p>If a line such as this isn't there, you should investigate the cause
for this (see below for some of the possibilities).

<p>Many problems with setting <var>DJGPP</var> happen when people put excess
blanks around the <code>=</code> character, which has the effect of defining
"DJGPP " (with the blank) which is not the same as "DJGPP" (without
blanks).  You should make sure there are no such excess blanks, or DJGPP
won't find its files.

<p>Another possible cause of <var>DJGPP</var> variable not being set is that you
invoke another batch file from your <code>AUTOEXEC.BAT</code> before the line
that sets <var>DJGPP</var>.  Make sure such batch files are invoked with the
<code>CALL</code> statement, because otherwise the subsidiary batch file will
never return to process the rest of <code>AUTOEXEC.BAT</code> (that's a
"feature" of DOS batch file processing).

<p>The code that processes <code>DJGPP.ENV</code> assumes that this file resides
in the main DJGPP installation directory.  If that assumption is wrong,
the compiler (and some other DJGPP programs) might fail to find some of
the files or auxiliary programs they need.  <em>Do NOT move DJGPP.ENV
to any other directory!</em>

<p>Note that if you run DJGPP on Windows/NT, you <strong>cannot</strong> use long
names of the directories in the pathname of <code>DJGPP.ENV</code> when you
set the above variable in the environment; you should use their 8+3
aliases instead.  That's because Windows/NT doesn't support the LFN API
for DOS programs, so the DJGPP startup code won't be able to find the
<code>DJGPP.ENV</code> file using its long pathname.  For example, the
following setting <strong>won't work</strong> on Windows/NT because
<code>Development</code> is longer than 8 characters:

<pre> set DJGPP=c:/Programs/Development/Djgpp/djgpp.env
</pre>

<p>If the DJGPP variable is set correctly, then check the following possible
causes of this misbehavior:

<ul>
<li>You have edited the file <code>DJGPP.ENV</code> in a way that invalidated some
of the settings there; try restoring the original file from the
distribution to see if that fixes your problems.  Editing
<code>DJGPP.ENV</code> is <strong>not</strong> recommended, but if you must edit it,
make sure you are familiar with its syntax in advance.  The DJGPP server
has a page with a <a href="http://www.delorie.com/djgpp/doc/kb/kb_8.html">description of the <code>DJGPP.ENV</code> syntax</a>.

<p>The syntax of <code>DJGPP.ENV</code> is also described in the <cite>DJGPP
Knowledge Base</cite>,
which comes with the <code>djdev</code> distribution.

</p><li>You renamed the <code>gcc.exe</code> driver to some other name.  In this case,
you should edit the file <code>DJGPP.ENV</code> to add a section named after
the new name of GCC, which is an exact duplicate of the section called
<code>[gcc]</code>.  DJGPP start-up code uses this file to find environment
variables which it should put into the environment before the <code>main</code>
function is called, but it searches for the relevant variables using the
actual name of the program, so when you rename the executable, it can't
find its section and doesn't put the necessary variables into the
environment.

<li>You installed an add-on package based on DJGPP, which somehow redefines
the directories where GCC looks for the header files and libraries.

<p>One case where this might happen is if you install the GNAT (GNU Ada
Translator) package: its installation program alters the value of the
<code>PATH</code> environment variable so that when you invoke <code>gcc</code>,
you get GNAT's version of GCC, which searches header files in its own
directories.  This can prevent GCC from finding header files of other
add-on packages, such as Allegro.

</p><li>Your <code>FILES=</code> setting in <code>CONFIG.SYS</code> is insufficient, so GCC
runs out of available handles.

<p>You should have at least <code>FILE=15</code> in your <code>CONFIG.SYS</code>, more
on Windows.  See <a href="#File%20handles">details about FILES= directive</a>.

</p><li>You passed the <code>-B</code> switch to GCC.  This overrides the default
location of <code>crt0.o</code> and if you follow <code>-B</code> with a directory
other than that where <code>crt0.o</code> resides, the linker won't find it.

<p>You should not need to use the <code>-B</code> or <code>-L</code> switches at all if
your installation is correct and the <code>DJGPP</code> variable points to the
main installation directory, because GCC should be able to figure out
all the linker switches itself.  If linking fails without explicit
<code>-L</code> or <code>-B</code>, check out above for the possible causes. 
</ul>

<p><hr>
Node:&nbsp;<a name="Missing%20C++%20headers">Missing C++ headers</a>,
Next:&nbsp;<a rel=next href="#C++%20comments">C++ comments</a>,
Previous:&nbsp;<a rel=previous href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.3 GCC can't find C<tt>++</tt> headers</h2>

<p><em><strong>Q</strong>: I installed all the packages, but GCC complains it can't find
<code>iostream.h</code>, <code>_string.h</code> and other C<tt>++</tt> headers.  Where can I
find those header files?</em>

<br><p>
<p><em><strong>Q</strong>: GCC complains about being unable to find <code>Complex.h</code>,
<code>Regex.h</code> and other header files which start with a capital letter,
and I indeed don't see them in my <code>lang/cxx/</code> directory.  Where are
they?</em>

<br><p>
<p><em><strong>Q</strong>: My C<tt>++</tt> program needs header files whose filenames exceed the 8+3
DOS filename restrictions, like <code>stdiostream.h</code> and
<code>streambuf.h</code>, and GCC cannot find those files.  How in the world
can I write portable C<tt>++</tt> programs??</em>

<br><p>
<p><strong>A</strong>:  All C<tt>++</tt> include files are packaged as part of the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/gpp2952b.zip">GNU C<tt>++</tt> compiler distribution zip file</a>,
so if you didn't install it, GCC won't find them.  Files whose names
usually start with a capital letter, on MS-DOS have an underscore
<code>_</code> prepended so they can be distinguished from <code>complex.h</code>,
<code>regex.h</code> and the like under case-insensitive DOS.  Change
<code>Complex.h</code> to <code>_Complex.h</code>, and <code>String.h</code> to
<code>_String.h</code> in your source, and GCC will find them.  The same goes
for the header <code>iostreamP.h</code>--you should use <code>_iostreamP.h</code>
instead.  If you don't have the underscore <kbd>_</kbd> on your keyboard, you
might find using <code>strclass.h</code> instead of <code>_String.h</code> easier.

<p>Another possibility to handle header files like <code>Complex.h</code> in a
portable way is to pass the <code>-remap</code> switch (supported by GCC 2.8.0
and later) to the pre-processor; see the <code>cpp</code> docs and the
<code>readme.DJGPP</code> file in the GCC distribution, for more info about
this feature.

<p>The most probable cause of problems with header files whose names exceed
the DOS 8+3 limits is that you are compiling on Windows 9X, but the
<dfn>Long File Names</dfn> (a.k.a. LFN) support is disabled.  DJGPP v2.01
comes with LFN disabled by default on the <code>DJGPP.ENV</code> file.  To
enable it, set the environment variable <code>LFN</code> to <code>y</code>, like
this:

<pre>  set LFN=y
</pre>

<p>If the problems with long names of header files aren't solved by this,
it is possible that you unpacked the DJGPP distribution with a program
which doesn't support long file names.  The solution is to install DJGPP
again using a different unzip program.  <code>unzip32.exe</code>, available
from the DJGPP sites, is one possibility.

<p>Some users copy the DJGPP directories after unzipping to another place
on their disk, or backup and restore them.  If this is done by some
program that doesn't support long file names, the compiler won't be able
to find header files such as <code>strambuf.h</code>.  Editing the directory
with some disk-editing tool that doesn't support Windows 9X style long
file names can also cause such loss of long file names: when Windows 9X
starts up, it checks whether the long file names and their 8+3 aliases
are in sync, and if they aren't, the long file names are deleted from
the directory, leaving you only with the short file names such as
<code>stream~1.h</code>.  Type <code>dir *.h</code> to see what are the long file
names in the directory; the long names are printed on the right side of
the file listing, and the short aliases on the left side, like this:

<pre> stream   h           1,925  12-26-95  8:07p STREAM.H
 stream~1 h          17,020  01-24-96  2:11a streambuf.h
</pre>

<p>(The files' date, time, and size might be different in your case.)  The
easiest solution for these cases is to remove the entire DJGPP
installation, and unzip everything again.

<p>Another possible cause for lack of support for long file names is that
you switch to the so-called "DOS Mode" when running DJGPP programs
from Windows 9X.  This unloads from memory most of Windows, including
the VFAT Filesystem module that supports the LFN API used by DJGPP to
access long file names.  The solution is to make sure your DOS box's
Properties don't force a switch to "DOS Mode".

<p>If you have problems with header files with long filenames, and you run
under Windows NT, it usually means that you used an unzip program which
supports long file names on NT; unzip again using a DOS unzip program,
such as <code>unzip32.exe</code> that is available from the DJGPP sites. 
Alternatively, you could install an LFN driver for Windows NT, see
<a href="#WindowsNT">LFN driver for NT</a>,
earlier in this FAQ.

<p>Another possible cause for problems with C<tt>++</tt> include files is that your
source file has a <code>.c</code> extension.  GCC then thinks that this is a C
program and doesn't instruct the pre-processor to search the include
directories specific to C<tt>++</tt>.  Rename your file to <code>.cc</code> or
<code>.cpp</code> extension, or call GCC with the <code>-x c++</code> switch, and
the header files will be found.  A full list of extension rules which
GCC uses to determine the source language can be found in the <a href="#Which%20language">list of language-specific suffixes</a>, elsewhere in this FAQ.

<p><hr>
Node:&nbsp;<a name="C++%20comments">C++ comments</a>,
Next:&nbsp;<a rel=next href="#Which%20language">Which language</a>,
Previous:&nbsp;<a rel=previous href="#Missing%20C++%20headers">Missing C++ headers</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.4 GCC barfs on C<tt>++</tt>-style comments in C programs</h2>

<p><em><strong>Q</strong>: My C program compiles OK with Borland's C, but GCC complains
about "parse error before `/' " at a line where I have a "//"-style
comment.</em>

<br><p>
<p><strong>A</strong>: That's because // isn't a comment neither in ANSI C nor in K&amp;R C. 
Borland and Microsoft C compilers support it as an extension.  GCC also
supports this extension (beginning with version 2.7.0), but using the
<code>-ansi</code> or <code>-traditional</code> switches to GCC disables this
extension.  In general, it's a bad practice to use this extension in a
portable program until such time as the ANSI C standard includes it.  If
it's a C<tt>++</tt> program, then rename it to have a suffix which will cause gcc
to compile it as such (see <a href="#Which%20language">list of language-specific suffixes</a>), or use <code>-x
c++</code> switch.  If it's a C program, but you want to compile it as C<tt>++</tt>
anyway, try <code>-x c++</code>; it can help, but can also get you in more
trouble, because C<tt>++</tt> has its own rules.  For example, the following
program will print 10 if compiled as a C program, but 5 if compiled as
C<tt>++</tt><a rel=footnote href="#fn-14"><sup>14</sup></a>:

<pre>    #include &lt;stdio.h&gt;

    int
    main ()
    {
      printf ("%d \n", 10    //*
		     / 2    // */ 1
		       );
      return 0;
    }
</pre>

<p>If you must have both <code>-ansi</code> and C<tt>++</tt>-style comments, use
<code>-lang-c-c++-comments</code> preprocessor switch.  Gcc doesn't accept
the <code>-lang-XXX</code> switches on its command line, so you will have to
use the <code>-Wp</code> option, like this:

<pre> gcc -c -Wp,-lang-c-c++-comments myprog.c
</pre>

<p>Alternatively, you can add <code>-lang-c-c++-comments</code> to the <code>*cpp:</code>
section of your <code>lib/specs</code> file (but that will cause <code>gcc</code> to
pass it to <code>cpp</code> unconditionally).

<p>Bottom line: until the future ANSI/ISO C standard includes this as part
of the C language, it's best to change those <code>//</code> comments to
C-style ones, if you really mean to write a C program.  The following
<small>SED</small> command will convert a C program with C<tt>++</tt>-style comments
into a valid C source, provided you don't have the string "//" in a
character string:

<pre> sed "s?//\(.*\)?/*\1 */?" file.c &gt; newfile.c
</pre>

<p><small>SED</small> can be found with the DJGPP archives on SimTel.NET, in the
<code>v2gnu</code> directory.

<p>If you want the compiler to print a warning message about usage of
<code>//</code>-style comments in a C program, add the <code>-ansi
-pedantic</code> options to the GCC command line.  If you don't want to use
<code>-ansi</code> for some reason (e.g., because it rejects some other code
that you want to keep), try using <code>-Wp,-lang-c89</code> instead; this
tells the preprocessor to stick to the rules of the C89 standard.

<p><hr>
Node:&nbsp;<a name="Which%20language">Which language</a>,
Next:&nbsp;<a rel=next href="#Objective%20C">Objective C</a>,
Previous:&nbsp;<a rel=previous href="#C++%20comments">C++ comments</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.5 How does GCC recognize the source language?</h2>

<p><em><strong>Q</strong>: I type <kbd>GCC PROG.CC</kbd> and GCC complains that it can't recognize
<code>PROG.CC</code>'s file format.  How come a C<tt>++</tt> compiler doesn't recognize a
C<tt>++</tt> source??</em>

<br><p>
<p><em><strong>Q</strong>: I type <kbd>GCC PROG.C</kbd> to compile a C program which I already
remember to pass compilation without a single warning, and suddenly it
gives all kinds of strange error messages and unresolved externals.</em>

<br><p>
<p><strong>A</strong>:  That's because you typed your source file extension in
<em>UPPER</em> case.  GCC is <em>not</em> case-insensitive about filenames
like DOS is, and it uses the file's extension to determine how to compile
a file.  Valid extensions are:

<dl>
<dt><code>.cc</code>
<dt><code>.C</code>
<dt><code>.cxx</code>
<dt><code>.cpp</code>
<dd>C<tt>++</tt> source (passed through cpp).

<br><dt><code>.c</code>
<dd>C source that must be passed through cpp first.

<br><dt><code>.i</code>
<dd>Raw C source (no cpp pass).

<br><dt><code>.ii</code>
<dd>Raw C<tt>++</tt> source (not to be preprocessed).

<br><dt><code>.m</code>
<dd>Objective-C source.

<br><dt><code>.S</code>
<dd>Assembler that must be passed through cpp first.

<br><dt><code>.s</code>
<dd>Raw assembler source (no cpp pass). 
</dl>

<p>Any other file is passed to the linker, under the assumption that it's an
object file.

<p>In the examples above, <code>PROG.C</code> is taken as a C<tt>++</tt> program, not a C
one, and <code>PROG.CC</code> is passed to the linker as if it were an object
file.  You can see what GCC does by adding the <code>-v</code> switch to the GCC
command line; if you see that it's invoking <code>cc1plus.exe</code> (the C<tt>++</tt>
compiler) instead of <code>cc1.exe</code> (the C compiler), or calling
<code>ld.exe</code> (the linker) on a source file, then you'd know this is your
problem.  If you have problems keeping up with the verbose GCC output
triggered by <code>-v</code>, see <a href="#Redirect">how to capture GCC output</a>, earlier in this FAQ.

<p>You can override the default rules gcc uses to decide how each input
file should be treated, using the <code>-x <var>language</var></code> switch.  For
instance, the command

<pre> gcc -x c++ prog.c
</pre>

<p>compiles <code>prog.c</code> as C<tt>++</tt> source.  See <a href="http://www.delorie.com/gnu/docs/gcc/gcc_8.html#SEC11">The GNU C Compiler Manual</a>, for more info on
<code>-x</code> options.

<p><hr>
Node:&nbsp;<a name="Objective%20C">Objective C</a>,
Next:&nbsp;<a rel=next href="#DJGPP-specific">DJGPP-specific</a>,
Previous:&nbsp;<a rel=previous href="#Which%20language">Which language</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.6 Problems with Objective C</h2>

<p><em><strong>Q</strong>: How do I tell gcc my .cc file is to be compiled as Objective-C
source?</em>

<br><p>
<p><em><strong>Q</strong>: I compile an Objective-C program, but get unresolved symbols.</em>

<br><p>
<p><em><strong>Q</strong>: I can't compile the Objective-C test program which came with DJGPP.</em>

<br><p>
<p><strong>A</strong>:  Give your sources the <code>.m</code> extension, or use
<code>-x&nbsp;objective-c</code> switch to GCC, so it will <em>know</em> you mean
to compile with Objective&nbsp;C.

<p><hr>
Node:&nbsp;<a name="DJGPP-specific">DJGPP-specific</a>,
Next:&nbsp;<a rel=next href="#Unresolved%20externals">Unresolved externals</a>,
Previous:&nbsp;<a rel=previous href="#Objective%20C">Objective C</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.7 Writing codes fragments which are specific to DJGPP</h2>

<p><em><strong>Q</strong>: I must put a DJGPP-specific code fragment into my program.  What
symbol should I use in the <code>#ifdef</code> directive to make it only visible
under DJGPP?</em>

<br><p>
<p><strong>A</strong>:  Use <code>__DJGPP__</code>, like this:

<pre>    #ifdef __DJGPP__
    ... DJGPP-specific code ...
    #else
    ... not seen under DJGPP ...
    #endif
</pre>

<p><code>__DJGPP__</code> has the value of the DJGPP major revision number, so you
can write code fragments which have different behavior under different
versions of DJGPP:

<pre>    #ifdef __DJGPP__
    #if __DJGPP__ &gt; 2
    .... will work only in DJGPP v3.x and later ...
    #else
    .... get here for DJGPP v2.x ...
    #endif
    #else
    .... get here in DJGPP v1.x or non-DJGPP environment
    #endif
</pre>

<p>If you need to distinguish between minor DJGPP revision numbers, use the
symbol <code>__DJGPP_MINOR__</code>.  For example:

<pre>    #if defined(__DJGPP__) &amp;&amp; __DJGPP__ == 2 &amp;&amp; __DJGPP_MINOR__ == 1
    .... will work only in DJGPP v2.01 ....
    #endif
</pre>

<p>Another DJGPP-specific pre-processor symbol which DJGPP defines is
<code>__GO32__</code>; but it is only provided for compatibility with previous
versions of DJGPP (v1.x) and its use should be discouraged.

<p><hr>
Node:&nbsp;<a name="Unresolved%20externals">Unresolved externals</a>,
Next:&nbsp;<a rel=next href="#Which%20library">Which library</a>,
Previous:&nbsp;<a rel=previous href="#DJGPP-specific">DJGPP-specific</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.8 Undefined references when linking programs</h2>

<p><em><strong>Q</strong>: Why do I get so many undefined references when linking my
programs?</em>

<br><p>
<p><em><strong>Q</strong>: Why do I get "Undefined reference to yywrap" when linking
programs produced by Flex?</em>

<br><p>
<p><em><strong>Q</strong>: GCC complains that it cannot find -liostream.  Where can I find
this library?</em>

<br><p>
<p><strong>A</strong>: By default, GCC instructs the linker to only look in two
libraries: <code>libgcc.a</code> and <code>libc.a.</code>  Some functions aren't
included there, so the linker can't find them.  If you need to link
against some optional library, say <code>libxy.a</code>, put the library into
the DJGPP <code>lib/</code> subdirectory and append a <code>-lxy</code> to the link
command line.  The Standard C<tt>++</tt> Template classes are in
<code>libstdcxx.a</code> (it's called <code>libstdc++.a</code> on Unix); append
<code>-lstdcxx</code>.  To use the additional GNU C<tt>++</tt> classes in the
<code>libgpp.a</code> library (it's called <code>libg++.a</code> on Unix systems),
append <code>-lgpp</code>.  Flex-generated lexical analyzers call functions in
the <code>libfl.a</code> library; you need to append <code>-lfl</code> when linking
them.  Append <code>-lgrx</code> if you are using GRX library, and
<code>-lalleg</code> for linking with Allegro.

<p>When linking C<tt>++</tt> programs, you should use either the <code>gpp</code> or
<code>gxx</code> commands instead of <code>gcc</code>; they will then instruct the
linker to also scan the C<tt>++</tt> libraries automatically, so you don't
have to remember doing that yourself.

<p>Another reason for undefined references when linking C<tt>++</tt> programs is
that you mix GCC and <code>libstdcxx.a</code> from different releases: they
are usually incompatible.  In particular, sometimes people install an
additional compiler based on (old releases of) GCC, such as GNU Pascal
or GNAT, the GNU Ada development environment, and these additional
compilers overwrite some of the libraries, like <code>libgcc.a</code>, with
older and incompatible versions.  You should always make sure you don't
mix different releases of the compiler and libraries; if you must
install different releases, install them in separate directories and
prepare some batch files or shortcuts to set up the environments for
each of the compilers by pointing the <code>DJGPP</code> variable to different
directories and changing the order of directories in <code>PATH</code>.

<p>If your program uses a lot of floating-point math, or needs math
functions beyond those specified in the ANSI/ISO standard, consider
appending <kbd>-lm</kbd> to your link command line.  The basic math functions
required by ANSI/ISO standard are included in the <code>libc.a</code> library,
but <code>libm.a</code> includes different versions of these functions which
sometimes are more accurate or more compatible with widely-accepted
standards for numeric computations; <code>libm.a</code> also includes some
functions not included in the default library, like Gamma function and
Bessel functions, support for different standards of behavior in case of
errors, a <code>matherr</code> facility, etc.

<p>Old C<tt>++</tt> programs used to be built with the GNU iostream library,
<code>libiostream.a</code>.  The iostream classes are now part of the standard
C<tt>++</tt> library, <code>libstdcxx.a</code>, so if you come across a Makefile
that passes the <code>-liostream</code> option to the compiler, change that
to <code>-lstdcxx</code> instead.

<p>Further problems which cause the linker to fail with C<tt>++</tt> programs
are discussed in <a href="#Libraries%20order">listing libraries in the correct order</a>, and in <a href="#Still%20unresolved">exceptions and inline functions</a>.

<p><hr>
Node:&nbsp;<a name="Which%20library">Which library</a>,
Next:&nbsp;<a rel=next href="#Libraries%20order">Libraries order</a>,
Previous:&nbsp;<a rel=previous href="#Unresolved%20externals">Unresolved externals</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.9 How not to lose your head with all these libraries</h2>

<p><em><strong>Q</strong>: I'm lost with all those different libraries.  How in the world
can I find out which functions are included in which library?</em>

<br><p>
<p><strong>A</strong>:  You can use the <code>nm</code> program to check what functions are
included in a library.  Run it with the <code>-C</code> option and with the library
as its argument and look in the output for the name of your function (the
<code>-C</code>, or <code>--demangle</code> option makes the function names look
closer to what they are called in the source file).  Functions which have
their code included in the library have a capital <code>T</code> before their
name.  For example, the following is a fragment from the listing produced by
<code>nm</code>:

<pre>    c:\djgpp\lib&gt; nm --demangle libc.a
    .
    .
    .
    stdio.o:
    000000e4 b .bss
    000000e4 d .data
    00000000 t .text
    00000098 t L12
    0000001e t L3
    00000042 t L6
    0000004d t L7
    0000006a t L9
    00000000 t __gnu_compiled_c
	     U _filbuf
	     U _flsbuf
    00000000 T clearerr
    000000ac T feof
    000000c2 T ferror
    000000d8 T fileno
    0000000c T getc
    00000052 T getchar
    0000002a T putc
    0000007c T putchar
    00000000 t gcc2_compiled.
    .
    .
    .
</pre>

<p>Here we see that the module <code>stdio.o</code> defines the functions
<code>clearerr</code>, <code>feof</code>, <code>ferror</code>, <code>fileno</code>, <code>getc</code>,
<code>getchar</code>, <code>putc</code> and <code>putchar</code>, and calls functions
<code>_filbuf</code> and <code>_flsbuf</code> which aren't defined on this module.

<p>Alternatively, you can call <code>nm</code> with the <code>-s</code> or
<code>--print-armap</code>, which will print an index of what symbols are
included in what modules.  For instance, for <code>libc.a</code>, we will see:

<pre>    c:\djgpp\lib&gt; nm --print-armap libc.a
    .
    .
    .
    _feof in stdio.o
    _ferror in stdio.o
    _fileno in stdio.o
    .
    .
    .
</pre>

<p>which tells us that the functions <code>feof</code>, <code>ferror</code> and
<code>fileno</code> are defined in the module <code>stdio.o.</code>

<p><code>nm</code> is fully described in the GNU docs. See <a href="http://www.delorie.com/gnu/docs/binutils/binutils_6.html">GNU Binutils Manual</a>.

<p><hr>
Node:&nbsp;<a name="Libraries%20order">Libraries order</a>,
Next:&nbsp;<a rel=next href="#Still%20unresolved">Still unresolved</a>,
Previous:&nbsp;<a rel=previous href="#Which%20library">Which library</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.10 DJGPP uses a one-pass linker</h2>

<p><em><strong>Q</strong>: I give all the libraries to gcc, but I still get unresolved
externals when I link.  What gives?</em>

<br><p>
<p><strong>A</strong>:  <code>Ld</code> is a one-pass linker:  it only scans each library once
looking for unresolved externals it saw <em>until that point</em>.  This
means the relative position of object files and libraries' names on the
command line is significant.  You should put all the libraries
<em>after</em> all the object files, and in this order:

<pre> -lstdcxx -lm
</pre>

<p>E.g., to link files main.o and sub.o into a C<tt>++</tt> library, use the following
command line:

<pre> gcc -o main.exe main.o sub.o -lstdcxx -lm
</pre>

<p>or, if you compile and link in one command:

<pre> gcc -o main.exe main.cc sub.cc -lstdcxx -lm
</pre>

<p>If you have any libraries of your own, put them <em>before</em> the above
system libraries, like this:

<pre> gcc -o main.exe main.cc sub.cc -lmylib -lstdcxx -lm
</pre>

<p>When you use the <code>gpp</code> or the <code>gxx</code> drivers to compile a
C<tt>++</tt> program, it automatically names the C<tt>++</tt> libraries in the
correct order.  (<code>gpp</code> and <code>gxx</code> are the alternative names for
<code>g++</code> on DOS, which doesn't allow the <code>+</code> character in file
names.)

<p>You can also force the linker to repeatedly scan a group of libraries
until all externals are resolved.  To this end, put the names of these
libraries between the <code>-(</code> and the <code>-)</code> options (if you invoke
GCC to link, use the <code>-Wl</code> or <code>-Xlinker</code> options to pass
switches to the linker).  Check out the linker docs for more info about
<code>-( ... -)</code> groups.

<p>If your installation tree is different from the default, i.e., if you keep
the libraries <strong>not</strong> in the default <code>lib/</code> subdirectory, then
you should add that directory to the line in the <code>[gcc]</code> section of
your <code>DJGPP.ENV</code> file which starts with <code>LIBRARY_PATH</code>, or put
into your environment a variable called <code>LIBRARY_PATH</code> and point it
to the directory where you keep the libraries.  Note that if you invoke
the linker by itself (not through the gcc driver), then
<code>LIBRARY_PATH</code> will have no effect, because this variable is only
known to the gcc driver.  Invoking <code>ld</code> directly is not
recommended, but if you must do it, use the <code>-L</code> option to tell it
where to look for the libraries.

<p><hr>
Node:&nbsp;<a name="Still%20unresolved">Still unresolved</a>,
Next:&nbsp;<a rel=next href="#djgpp_first_ctor">djgpp_first_ctor</a>,
Previous:&nbsp;<a rel=previous href="#Libraries%20order">Libraries order</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.11 Some functions in C<tt>++</tt> programs still not found</h2>

<p><em><strong>Q</strong>: I put all the libraries in the above order, but the linker still
can't find some C<tt>++</tt> functions from <code>complex.h</code> and
<code>iostream.h.</code></em>

<br><p>
<p><em><strong>Q</strong>: I can't compile a program which uses the String class: the linker
complains about undefined functions!</em>

<br><p>
<p><em><strong>Q</strong>: I get many undefined references to symbols like <code>__eh_pc</code>,
<code>terminate</code>, and <code>__throw</code><small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  Some C<tt>++</tt> functions are declared <code>inline</code> and defined on
header files.  (One example of this is the string constructor of the GNU
<code>String</code> class.)  However, GCC won't inline them unless you compile
with optimizations enabled, so it tries to find the compiled version of
the functions in the library.  Workaround: compile with <code>-O2</code>.

<p>Another cause of missing external symbols might be that your versions of
<code>libgcc.a</code> and the compiler aren't in sync.  These cases usually
produce undefined references to symbols such as <code>__throw</code> and
<code>__eh_pc</code>.  You should only use <code>libgcc.a</code> from the same
distribution where you got the compiler binaries.  The reason for these
problems is that the setup for supporting C<tt>++</tt> exceptions is subtly
different in each version of the compiler.

<p>For C<tt>++</tt> programs, be sure to compile all of your object files and
libraries with the same version of the compiler.  If you cannot
recompile some of the old C<tt>++</tt> object files or libraries, try using
the <code>-fno-exceptions -fno-rtti</code> switches to GCC, it helps
sometimes.  However, note that <code>-fno-rtti</code> cannot be used with
GCC version 2.95 and later: programs that use exceptions will crash if
compiled with this option.

<p>If you call C functions from a C<tt>++</tt> program, you need to make sure
the prototype of the C function is declared with the <code>extern "C"</code>
qualifier.  DJGPP header files take care about this, but headers you get
with third-party libraries, or write yourself, might not.  Failure to
use <code>extern "C"</code> will cause the linker to look for a C<tt>++</tt>
function instead of a C function, which will fail because names of
C<tt>++</tt> functions are mangled by the compiler (to include the types of
their arguments, since there can be many functions with the same name
but different argument types).

<p>Yet another possible cause for the linker to complain about undefined
references is that you link files compiled using RSXNTDJ headers, or
link RSXNTDJ-compiled object files with DJGPP libraries, or vice versa. 
DJGPP and RSXNTDJ are really incompatible as far as header files and
libraries are concerned, so you cannot mix them.  Add <code>-v</code> to the
<code>gcc</code> command line and watch the order of searching the include
directories and libraries printed by GCC: if you are compiling/linking a
DJGPP program, but the RSXNTDJ directories appear first in the search
order, you should change the order of the directories in the
<code>C_INCLUDE_PATH</code>, <code>CPLUS_INCLUDE_PATH</code> and <code>LIBRARY_PATH</code>
environment variables.  Similarly, if you are compiling an RSXNTDJ
program, but the DJGPP's <code>include</code> and <code>lib</code> subdirectories
appear first in the list printed by <code>gcc -v</code>, you need to put
the RSXNTDJ directories first in the environment variables mentioned
above.

<p><hr>
Node:&nbsp;<a name="djgpp_first_ctor">djgpp_first_ctor</a>,
Next:&nbsp;<a rel=next href="#Large%20image">Large image</a>,
Previous:&nbsp;<a rel=previous href="#Still%20unresolved">Still unresolved</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.12 Unresolved djgpp_first_ctor</h2>

<p><em><strong>Q</strong>: I do everything like your praised FAQ says, but the linker
complains about unresolved symbols with strange names like
<code>djgpp_first_ctor</code>, <code>djgpp_last_dtor</code>, etc.  I looked in every
library with <code>nm</code>, and I cannot find these creatures.  Where in the
world are they??</em>

<br><p>
<p><strong>A</strong>: These symbols are defined by the <code>djgpp.djl</code> linker script
that should be in your <code>lib/</code> subdirectory.  When you call
<code>gcc</code> to link a program, it invokes <code>ld.exe</code> with the option
<code>-T djgpp.djl</code>.  If you invoke <code>ld</code> directly (this is generally
not recommended), be sure to include that switch.  If you did invoke it
through <code>gcc</code>, maybe your linker is set up incorrectly.  Add
<code>-v</code> to the GCC switches and check that the command line that GCC
gives to LD includes that switch, that your <code>lib/</code> subdirectory
includes that script file, and that the script file is intact and
includes the definition of the above symbols.

<p>Another reason might be that you have edited your <code>DJGPP.ENV</code> file
in a way that prevents the linker from finding its <code>djgpp.djl</code> script.

<p>Mixing an old v1.x installation with a v2.x one can also cause such
problems.  Be sure to delete the entire v1.x tree, or rename it, before
installing the v2.x distribution.

<p><hr>
Node:&nbsp;<a name="Large%20image">Large image</a>,
Next:&nbsp;<a rel=next href="#Large%20executable">Large executable</a>,
Previous:&nbsp;<a rel=previous href="#djgpp_first_ctor">djgpp_first_ctor</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.13 C<tt>++</tt> programs yield large <code>.exe</code> file</h2>

<p><em><strong>Q</strong>: It seems that declaring a large <code>static</code> array has the effect
of bloating the program image on disk by that many bytes.  Surely there is
a more compact way of telling the loader to set the next N bytes of RAM to
zero?</em>

<br><p>
<p><strong>A</strong>:  This only happens in C<tt>++</tt> programs and is a (mis-)feature of GCC. 
You can use the <code>-fconserve-space</code> switch to GCC to prevent this from
happening, but that switch also turns off the diagnostics of duplicate
definitions, which, if uncaught, might cause your program to crash. 
Thus, this switch isn't recommended for programs which haven't been
completely debugged (if there is such a creature).  The
<code>-fconserve-space</code> switch is described in the GCC docs, see <a href="http://www.delorie.com/gnu/docs/gcc/gcc_11.html">GNU C Compiler Manual</a>.

<p>If the problems with using this switch doesn't deter you, you can even
add this switch to your <code>lib/specs</code> file to make it permanent.

<p>GCC versions 2.95.1 and later don't have this problem, even in C<tt>++</tt>
programs.

<p><hr>
Node:&nbsp;<a name="Large%20executable">Large executable</a>,
Next:&nbsp;<a rel=next href="#DJGPP%20and%20DLLs">DJGPP and DLLs</a>,
Previous:&nbsp;<a rel=previous href="#Large%20image">Large image</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.14 Why are DJGPP <code>.exe</code> files so large?</h2>

<p><em><strong>Q</strong>: I compiled a trivial "Hello world" program and got a 280KB
executable file.  That's ridiculously bloated!</em>

<br><p>
<p><em><strong>Q</strong>: I switched to GCC 2.95.1, and my C<tt>++</tt> executables are
considerably larger than when compiled with GCC 2.7.2.1!</em>

<br><p>
<p><strong>A</strong>:  Did you link with <code>-s</code> switch to <code>gcc</code>, or run
<code>strip</code> on the output of the linker?  If not, the executable
includes the debugging symbols, which makes it quite a lot larger.  (It
is not recommended to strip the symbols except when distributing
production programs, because this makes debugging very hard indeed; that
is why <code>-s</code> is not passed to gcc by default.)

<p>A stripped "Hello world" program written in C should be about 42KB on
disk; an analogous program written in C<tt>++</tt> should be about 140KB on
disk (the additional overhead is due to the C<tt>++</tt> classes that are
linked in to support <code>cout</code>).

<p>C<tt>++</tt> programs could be further bloated because the release of
Binutils 2.8.1 was configured in a way that caused the assembler to put
into the symbol table local labels generated when compiling code that
uses exceptions.  Later uploads of GNU Binutils should solve this
problem, so consider upgrading to the latest <code>bnuNNNb.zip</code>.

<p>Some other compilers with which people keep comparing the size of DJGPP
programs use shared libraries or DLLs, so the size of the executable
doesn't include the libraries.  If you have an immediate question "Why
won't DJGPP use DLLs as well", read the following section.

<p>In general, judging code sizes by looking at the size of "Hello"
programs is meaningless, because such programs consist mostly of the
startup code.  The DJGPP startup code does many things in preparation
for running a protected-mode program in a Posix-compliant environment. 
This includes switching the processor to protected mode (which requires
a lot of code), wildcard expansion, long command-line support, and
loading the environment from a disk file; these usually aren't available
with other DOS compilers.  Exception and signal handling (not available
at all in v1.x), FPU detection and emulator loading (which were part of
<code>go32</code> in v1.x), are now also part of the startup code.

<p>Most of the power of all these features goes wasted in "Hello"
programs.  There is no point in running all that code just to print a
15-byte  string and exit.  However, the overhead induced by the code
needed to set up the DJGPP run-time environment is additive; the larger
the program, the smaller the overhead relative to the program size.  For
non-trivial programs, the code produced by DJGPP is usually smaller than
what other compilers produce.  For example, the DJGPP version of the
<code>Povray</code> program is smaller by about 200KB than the same program
compiled with the Watcom compiler.

<p>If your program doesn't need parts of the startup code, it can be made
smaller by defining certain functions with empty bodies.  These
functions are <code>__crt0_glob_function</code>,
<code>__crt0_load_environment_file</code>, and <code>__crt0_setup_arguments.</code>
If you define empty substitutes for all three of these, and compile with
<code>-O2 -s</code>, you can make the "Hello" program be 31KB on disk. 
These functions are documented in the DJGPP libc reference, which see. 
Here's an example of definitions for these functions that will make the
startup code as small as it gets<a rel=footnote href="#fn-15"><sup>15</sup></a>:

<pre>  #include &lt;crt0.h&gt;

  char **__crt0_glob_function (char *arg) { return 0; }
  void   __crt0_load_environment_file (char *progname) { }
  void   __crt0_setup_arguments (void) { }
</pre>

<p>(To do this in a C<tt>++</tt> program, prepend the <code>extern "C"</code>
qualifier to each one of the three lines that define the substitute
functions.)

<p>Note that if you define an empty substitute for
<code>__crt0_setup_arguments</code>, your program will not be able to access
its command-line arguments via the <code>argv[]</code> array.  So this is only
recommended for programs which don't accept any arguments at all.

<p>You can make your program image still smaller by compressing it with
a compressor called <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2misc/mlp107b.zip"><small>DJP</small></a>. <small>DJP</small> is
a DJGPP-specific executable file compressor.  It is fast and has no
memory overhead.  It also knows about DJGPP <dfn>Dynamically Loaded
Modules</dfn> (DLM) technology.  (Note that <small>DJP</small> before version 1.06 was
incompatible with Binutils 2.8.1 and later<a rel=footnote href="#fn-16"><sup>16</sup></a>, so
you should always use the latest <small>DJP</small> version available on
SimTel.NET mirrors.)

<p><small>DJP</small> is not actively developed anymore; its successor is the
<small>UPX</small> compressor, currently in beta testing.  <small>UPX</small> is written by
the same people who wrote <small>DJP</small>, compresses better, and supports a
broader class of executable formats, including DOS <code>.exe</code>,
<code>.com</code> and <code>.sys</code>, DJGPP's COFF, Watcom's LE, Win32 PE, and
Linux's ELF.  <small>UPX</small> is available <a href="http://wildsau.idv.uni-linz.ac.at/mfx/upx.html">via the Web</a>.

<p><hr>
Node:&nbsp;<a name="DJGPP%20and%20DLLs">DJGPP and DLLs</a>,
Next:&nbsp;<a rel=next href="#No%20EXE">No EXE</a>,
Previous:&nbsp;<a rel=previous href="#Large%20executable">Large executable</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.15 Why don't we use DLLs to make programs smaller?</h2>

<p><em><strong>Q</strong>: Many other compilers use shared libraries and DLLs to make the
programs' size smaller; why don't you do the same?</em>

<br><p>
<p><strong>A</strong>:  DLLs are really a mixed blessing, because they introduce an
additional dimension into configuration management and subtle system
differences.

<p>Consider a DJGPP developer who is maintaining a package.  Let's say that
this developer finds a bug in one of the library functions that
adversely affects his/her package.  The obvious solution is to fix the
library bug, and then relink the application against the fixed library. 
In the current setup, the only thing that the developer needs to do is
to upload a binary distribution with the new executables, which will
ensure that all users can reliably use the fixed program.

<p>Now imagine that we ditch the static linking and instead distribute the
standard libraries as DLLs to be installed on every machine.  Our
developer will now need to put a fixed DLL into the binary distribution,
otherwise the package will still exhibit the bug when it uses an old DLL
on the end-user's machine.  Installing the fixed package would then need
to overwrite the DLLs on users' machines with the fixed version.

<p>But now suppose that the bugfix in that single library function made it
subtly incompatible with other library functions, which the program of
our developer didn't use (and so these problems went unnoticed during
testing).  When users will install the fixed DLL, they will now have a
broken system, where programs which are unrelated to the upgraded
package, and which worked perfectly before, would now mysteriously
fail or crash.

<p>Moreover, since there are quite a few DJGPP packages, all maintained
separately by different individuals, and since users are installing the
new-and-improved versions all the time, after some time there's no way
to know what versions of system DLLs are installed on any given
machine.  The result is that no developer can be sure that their
programs would work on any particular system, because the precise mix of
the system DLLs on that system cannot be predicted.  What you have is an
environment where major programs constantly crash.

<p>Sounds familiar?  Of course! this is <em>precisely</em> the reason that
most Windows systems are so unstable: people are constantly installing
the hottest new versions of Office, IE, etc., and are constantly
overwriting their system DLLs with new and subtly incompatible
versions.  If you can afford it, try to install Windows 9X and run it
for a year without installing any add-on packages which come with a
replacement for system DLLs--you will see a rock-solid system that can
be run for weeks without crashing.  (Yes, I actually tried that; yes, it
really didn't crash.)

<p>In addition, DLLs in the DJGPP environment make much less sense than on
Unix or Windows, because the DJGPP DLLs will only be used by DJGPP
program, whereas Unix shared libraries and Windows DLLs are used by the
OS itself as well.  When the OS itself uses the same libraries, the
libraries are most of the time in memory when the applications need
them, and running several applications only loads the library once. 
DJGPP cannot take advantage of this, even on Windows, because each DJGPP
program runs in a separate Virtual Machine with a separate address space. 
The only case where DJGPP program can benefit from shared libraries is
when one DJGPP program invokes another.

<p>So bottom line, I think wasting some disk space due to static linking is
much cheaper than having to deal with the user frustration and outcry
that would result from using the DLL approach.  Perhaps a behemoth such
as Microsoft can afford ignoring all the mess that DLLs bring to the end
users, but around here, a good name of the product still counts.

<p><hr>
Node:&nbsp;<a name="No%20EXE">No EXE</a>,
Next:&nbsp;<a rel=next href="#Allegro%20and%20GRX">Allegro and GRX</a>,
Previous:&nbsp;<a rel=previous href="#DJGPP%20and%20DLLs">DJGPP and DLLs</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.16 Linker fails to produce the EXE program</h2>

<p><em><strong>Q</strong>: When I link my program, it fails to produce the .EXE
executable<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: I run STUBIFY on a networked drive under
Novell, but it doesn't produce a .EXE file.  How come?</em>

<br><p>
<p><strong>A</strong>:  One possible reason for this is that your disk is full, or
there's no swap space available for the DOS box on Windows.  Run
<code>go32-v2</code> with no arguments and see what it reports, then follow
the advice in <a href="#Config">configuring your system</a>, for the optimal configuration.

<p>If you are running DJGPP on a networked drive, you might have another
copy of the file with the same name that GCC is creating in another
directory somewhere on that networked drive.  If that other directory is
on your <code>PATH</code>, it is searched by Novell when the linker and
<code>STUBIFY</code> try to create the executable file, because that file
doesn't exist in the current directory.  So what might actually happen
is that the linker and <code>STUBIFY</code> are overwriting the files they
find on your <code>PATH</code> instead of creating new files in the current
directory.

<p>You can verify that this indeed is the problem by searching your
networked disks for files with the same name as those you are trying to
build, and looking at their time stamps.  If that is indeed the problem,
then you have several possible ways of solving it:

<ol type=1 start=1>
</p><li>You can remove the other files, rename them, or move them to another
directory that isn't searched by Novell.

<li>You can rename the program you are trying to link.

<li>You can change the way Novell searches for files (a.k.a. <dfn>the
search mode</dfn>), so that it won't look in the directories on your
<code>PATH</code>.

<li>You can change your access rights to the directory on the <code>PATH</code>
where the other files reside, so that you won't have write privileges to
that directory.

<li>You can change the search mode for <code>STUBIFY</code> and the linker (or for
any other program that gives you that trouble) by running commands like
these:

<pre>  SMODE stubify.exe 2
  SMODE ld.exe 2
</pre>

</ol>

<p><hr>
Node:&nbsp;<a name="Allegro%20and%20GRX">Allegro and GRX</a>,
Next:&nbsp;<a rel=next href="#NULL%20redefined">NULL redefined</a>,
Previous:&nbsp;<a rel=previous href="#No%20EXE">No EXE</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.17 Building Allegro or GRX library fails</h2>

<p><em><strong>Q</strong>: When I try to build the Allegro library, liballeg.a, I get some
cryptic message about register-opcode mismatch.  What am I doing wrong?</em>

<br><p>
<p><em><strong>Q</strong>: Why do I get these messages saying "fixed or forbidden register
0 (ax) was spilled" when I try to build Allegro?</em>

<br><p>
<p><em><strong>Q</strong>: It seems I miss one of the source files from the Allegro
distribution, because Make cannot find it when I try to build Allegro.</em>

<br><p>
<p><em><strong>Q</strong>: I can't build Allegro: it keeps telling me that I "need to
install gcc2721b.zip".  But I already have GCC installed!</em>

<br><p>
<p><strong>A</strong>:  You should get the latest version of Allegro that is available
either <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/allegro/alleg312.zip">from SimTel.NET</a>
or <a href="http://www.talula.demon.co.uk/allegro/">from Shawn Hargreaves' site</a>.

<p>Versions of Allegro before 3.0 are known to have bugs which triggered
register-opcode mismatch messages.

<p>GCC 2.95 became more picky about some invalid use of clobber specifiers
in Allegro's inline assembly, so what compiled with GCC 2.8.1 won't
compile anymore; latest versions of Allegro (3.12 and above) correct
that.

<p>GRX versions 2.3 and older also have a few places where the newer GCC
releases won't compile the inline assembly code.  <a href="mailto:Ian@shelob.force9.co.uk">Ian Miller</a> created two patch files that solve two
different classes of problems with GRX 2.3 inline assembly, and made
them available from his Web page: <a href="http://www.shelob.force9.co.uk/djgpp/patgrx23.dif">patches for the clobber list problem</a> and <a href="http://www.shelob.force9.co.uk/djgpp/grxasm.dif">patch for indirect calls</a>.  You will
need to use the <code>patch</code> utility to apply these patch files, and
then recompile the offending library.  A DJGPP port of the GNU
<code>patch</code> is available <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/pat254b.zip">from SimTel</a>.

<p>For a general explanation of how to correct clobber list specifications
in inline asm code so that they will compile with GCC 2.95 and later,
see the <a href="http://egcs.cygnus.com/faq.html#asmclobber">GCC FAQ list</a>.

<p><hr>
Node:&nbsp;<a name="NULL%20redefined">NULL redefined</a>,
Next:&nbsp;<a rel=next href="#C++%20exceptions">C++ exceptions</a>,
Previous:&nbsp;<a rel=previous href="#Allegro%20and%20GRX">Allegro and GRX</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.18 C<tt>++</tt> compiler says "NULL redefined"</h2>

<p><em><strong>Q</strong>: When I compile a C<tt>++</tt> program which includes some standard C
header files, the compiler prints error messages about redefinition of
<code>NULL</code><small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  This is because GCC 2.8.1 comes with C<tt>++</tt> header files which
redefine <code>NULL</code> in a way that conflicts with the DJGPP headers. 
It's a bug in the GNU C<tt>++</tt> headers, but until it is fixed, you will
need to make sure you include the C<tt>++</tt> headers <em>after</em> the C
headers.  If that doesn't help in your case, you will need to hack your
headers to reconcile them.

<p>The C header files that come with DJGPP v2.02 work around this problem,
so upgrading to the latest DJGPP release should make these messages go
away.

<p><hr>
Node:&nbsp;<a name="C++%20exceptions">C++ exceptions</a>,
Next:&nbsp;<a rel=next href="#Assembly%20output">Assembly output</a>,
Previous:&nbsp;<a rel=previous href="#NULL%20redefined">NULL redefined</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.19 C<tt>++</tt> exceptions support</h2>

<p><em><strong>Q</strong>: I've written a program that uses C<tt>++</tt> exceptions, but instead of
catching an exception, the program prints "Abort!" and dies<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: When linking C<tt>++</tt> programs, I get messages about undefined
references to <code>__EH_FRAME_BEGIN__</code> and such likes.  Huh?</em>

<br><p>
<p><em><strong>Q</strong>: I cannot compile C<tt>++</tt> programs that include the header
<code>math.h</code>: the compiler complains about redefinition of class
exception!</em>

<br><p>
<p><strong>A</strong>: C<tt>++</tt> exceptions were not fully supported in DJGPP before version
2.8.1 of GCC.  Either upgrade to the latest version or compile with the
<code>-fsjlj-exceptions</code> switch to GCC.  GCC support of exceptions
before v2.8.0, was minimal, so even this special switch won't work with
previous versions.  If you still use GCC 2.7.2.1 and cannot upgrade, you
need to compile with the <code>-frtti</code> compiler switch and include the
<code>typeinfo</code> header in your program.

<p>Beginning with EGCS 1.1.2 and GCC 2.95, C<tt>++</tt> exception support
requires DJGPP v2.02 or later, and will not work with v2.01 or earlier,
so you might need to upgrade your DJGPP library.

<p>Note that exception support with <code>-fsjlj-exceptions</code> is very slow,
since it has a significant runtime overhead, even if the exception
doesn't occur.

<p>If you already use GCC 2.8.1, these problems could happen if you failed
to replace the <code>specs</code> file with the version which comes with the
GCC 2.8.1 distribution.  Read the file <code>readme.DJGPP</code> in the GCC
distribution, for more details.  GCC 2.95 and later should work with the
<code>specs</code> file from <code>djdev202.zip</code> (or later) or with the
<code>specs</code> file that comes with GCC itself.

<p>Exception support in GCC is generally not stable enough yet, so you need
to treat with some suspicion code produced by GCC 2.8.1 for programs
that use exceptions.  Latest versions of GCC support exceptions better,
so upgrade to GCC 2.95 or later.

<p>Undefined references to symbols like <code>__EH_FRAME_BEGIN__</code> are a
symptom of using an old linker script <code>djgpp.djl</code>.  You should
make sure that <code>djgpp.djl</code> in your <code>lib</code> subdirectory is from
<code>djdevNNN.zip</code> file that belongs to DJGPP v2.02 or later.  (GCC
2.8.1 distribution required to replace <code>djgpp.djl</code> with a version
that came with the compiler, but the reason for that is no longer valid
with newer GCC versions, and the compiler no longer comes with
<code>djgpp.djl</code>.  So you must restore <code>djgpp.djl</code> from
<code>djdevNNN.zip</code>.)  Again, <code>readme.DJGPP</code> in the GCC
distribution has more on this.

<p>If GCC complains about "Redefinition of class exception" when you
compile C<tt>++</tt> programs which include the header <code>math.h</code>, you
need to replace that header.  GCC 2.8.1 comes with a header
<code>exception</code> that conflicts with <code>math.h</code> from DJGPP v2.01,
which defines a <code>struct exception</code>.  Version 2.02 of DJGPP
corrects its <code>math.h</code>, but if you still use v2.01, a corrected
version is included in the <code>gcc281b.zip</code> distribution.  The
corrected <code>math.h</code> is installed into the
<code>lib/gcc-lib/djgpp/2.81/include</code> directory, so either delete or
rename the old version in the <code>include</code> directory, or copy the
corrected version into <code>include</code>.  Another solution is to compile
with the <code>-posix</code> or <code>-ansi</code> compiler switch, which cause
<code>math.h</code> to not define <code>struct exception</code>.

<p><hr>
Node:&nbsp;<a name="Assembly%20output">Assembly output</a>,
Next:&nbsp;<a rel=next href="#movedata.h">movedata.h</a>,
Previous:&nbsp;<a rel=previous href="#C++%20exceptions">C++ exceptions</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.20 How to get GCC to generate assembly code</h2>

<p><em><strong>Q</strong>: How can I peek at the assembly code generated by GCC?</em>

<br><p>
<p><em><strong>Q</strong>: How can I create a file where I can see the C code and its
assembly translation together?</em>

<br><p>
<p><strong>A</strong>: Use the <code>-S</code> (note: <em>capital</em> S) switch to GCC, and it
will emit the assembly code to a file with a <code>.s</code> extension.  For
example, the following command:

<pre>  gcc -O2 -S -c foo.c
</pre>

<p>will leave the generated assembly code on the file <code>foo.s</code>.

<p>If you want to see the C code together with the assembly it was
converted to, use a command line like this:

<pre> gcc -c -Wa,-a,-ad [other GCC options] foo.c &gt; foo.lst
</pre>

<p>which will output the combined C/assembly listing to the file
<code>foo.lst</code>.

<p>If you need to both get the assembly code <em>and</em> to compile/link the
program, you can either give the <code>-save-temps</code> option to GCC (which
will leave all the temporary files including the <code>.s</code> file in the
current directory), or use the <code>-Wa,aln=foo.s</code> option which
instructs the assembler to output the assembly translation of the C code
(together with the hex machine code and some additional info) to the
file named after the <code>=</code>.

<p><hr>
Node:&nbsp;<a name="movedata.h">movedata.h</a>,
Next:&nbsp;<a rel=next href="#Libraries">Libraries</a>,
Previous:&nbsp;<a rel=previous href="#Assembly%20output">Assembly output</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.21 What's wrong with <code>sys/movedata.h</code>?</h2>

<p><em><strong>Q</strong>: Whenever I try to compile a program that includes the
<code>sys/movedata.h</code> header file, I get "parse error" messages from
the compiler.  Can't you guys make your system headers right?</em>

<br><p>
<p><strong>A</strong>: This is a bug in the <code>sys/movedata.h</code> header file which
comes with DJGPP v2.01.  The bug is fixed in v2.02, but if you are stuck
with v2.01, you should always include the <code>sys/types.h</code> header
before <code>sys/movedata.h</code> in your programs.

<p><hr>
Node:&nbsp;<a name="Libraries">Libraries</a>,
Next:&nbsp;<a rel=next href="#No%20stubify">No stubify</a>,
Previous:&nbsp;<a rel=previous href="#movedata.h">movedata.h</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.22 How do I create a library of object files?</h2>

<p><em><strong>Q</strong>: I would like to distribute my package as a library that can be
linked into programs, but I'm unsure how to go about it<small>...</small>.</em>

<br><p>
<p><strong>A</strong>: First, you need to compile all your sources into object <code>.o</code>
files, like this:

<pre> gcc -c -Wall -O2 file1.c
 gcc -c -Wall -O2 file2.c
 gcc -c -Wall -O2 file3.c
 ...
</pre>

<p>The only GCC switch in this example that's required is <code>-c</code>, the
rest are just recommended for better code generation and diagnostics.

<p>Once you have the object files ready, use the <code>ar</code> ("Archiver")
utility to create a library, let's call it <code>libacme.a</code>, like this:

<pre> ar rvs libacme.a file1.o file2.o file3.o ...
</pre>

<p>The <code>rvs</code> flags tell <code>ar</code> to put named files into the
library, replacing any previous versions of these files if necessary,
print the names of object files as it puts them into the library, and
add an object-file index to the library, which makes it link faster.

<p>If you use <small>RHIDE</small>, you can create a library by specifying a file
with a <code>.a</code> extension as the main target in the project (choose
<code>Project | Main Target Name</code> and enter a file name such as
<code>libacme.a</code>).

<p>The library is now ready to use.  The simplest way to force the compiler
to use it while linking is to mention its name in the link command line,
like this:

<pre> gcc -o myprog.exe myprog.c libacme.a
</pre>

<p>This is better than just listing in the command line all the object
files in the library, since the latter will cause the linker to link in
<strong>all</strong> the object files, even those which aren't used by the
program.

<p>The name of the library which begins with a <code>lib</code> and ends with a
<code>.a</code> extension is a convention used for convenience.  When the link
command line includes an argument <code>-lXXYYZZ</code>, GCC (and all Unix
compilers) will look for a file <code>libXXYYZZ.a</code> in every directory
they search by default.  So, if your library <code>libacme.a</code> is
installed in the DJGPP <code>lib</code> subdirectory, the user can instruct
GCC to look into it by appending <code>-lacme</code> to the link command line. 
Other systems might be configured to look for different names when a
switch such as <code>-lfoo</code> is mentioned.  For example, Linux might look
in <code>/usr/lib</code> for files <code>libfoo.so.*</code>, while Alpha/VMS will
look for <code>SYS$GNU:[LIBRARIES]FOO.LIB;*</code>.  Windows 98, of course,
will look for something monstrously long like
<code>C:\Windows\Program&nbsp;Files\Vendors\GNU\gcc\libraries\foo.lib</code>. 
If you don't follow this convention, you will need to type the full name
of the library file.

<p>If you need to update a certain object file in a library, use the same
command <kbd>ar rvs library-name object-name</kbd> as above, but only with
the name(s) of the object file(s) you need to replace.

<p><code>ar</code> is documented in the Binutils docs.  To read, type this from
the DOS prompt:

<pre> info binutils ar
</pre>

<p><hr>
Node:&nbsp;<a name="No%20stubify">No stubify</a>,
Previous:&nbsp;<a rel=previous href="#Libraries">Libraries</a>,
Up:&nbsp;<a rel=up href="#Compiling">Compiling</a>
<br>

<h2>8.23 GCC Cannot find <code>stubify</code>.</h2>

<p><em><strong>Q</strong>: Whenever I try to compile something, GCC says "Installation
problem, cannot exec stubify: No such file or directory (ENOENT)".  The
compiler came on a CD with one of those "Teach yourself C<tt>++</tt>"
books<small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  Blame the vendor who created the CD: their installation program
failed to copy the program <code>stubify.exe</code> to your hard disk.  The
compiler needs <code>stubify.exe</code> when it links your programs.

<p>To solve the problem, find <code>stubify.exe</code> on the CD and manually
copy it into the same directory where <code>gcc.exe</code> lives.

<p><hr>
Node:&nbsp;<a name="Running">Running</a>,
Next:&nbsp;<a rel=next href="#Graphics">Graphics</a>,
Previous:&nbsp;<a rel=previous href="#Compiling">Compiling</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>9 Running Compiled Programs</h1>

<p>This chapter discusses various problems which may happen when running
DJGPP programs under different environments, and gives solutions to them.

<ul>
<li><a href="#v2%20crash">v2 crash</a>:                   Program which was OK in v1.x bombs in v2.0. 
<li><a href="#malloc%20crash">malloc crash</a>:               Program crashes inside <code>malloc</code>/<code>free</code>. 
<li><a href="#Crash%20traceback">Crash traceback</a>:            How to make sense out of stack dumps. 
<li><a href="#File%20data%20corrupted">File data corrupted</a>:        The DOS <em>TEXT</em>/<em>BINARY</em> file issue. 
<li><a href="#Screen%20IO">Screen IO</a>:                  Beware of the buffering! 
<li><a href="#Distributing">Distributing</a>:               DJGPP programs are <strong>not</strong> self-contained. 
<li><a href="#File%20handles">File handles</a>:               How many file handles can your program use. 
<li><a href="#Virus">Virus</a>:                      Anti-virus false alarms. 
</ul>

<p><hr>
Node:&nbsp;<a name="v2%20crash">v2 crash</a>,
Next:&nbsp;<a rel=next href="#malloc%20crash">malloc crash</a>,
Previous:&nbsp;<a rel=previous href="#Running">Running</a>,
Up:&nbsp;<a rel=up href="#Running">Running</a>
<br>

<h2>9.1 My program crashes only in v2.0!</h2>

<p><em><strong>Q</strong>: My v2 program crashes, but only under CWSDPMI; it runs OK under
other DPMI hosts like Windows, OS/2 or QDPMI.  Is this a bug in CWSDPMI?</em>

<br><p>
<p><strong>A</strong>: No, it probably is a bug in your program which just goes
unnoticed on Windows.  Unlike other DPMI hosts, CWSDPMI supports some
DPMI 1.0 extensions which allow DJGPP to capture and disallow
dereference of pointers which point to addresses less than 1000h
(a.k.a. <dfn>NULL pointer protection</dfn>).  The tell-tale sign of these
problems is a message "Page fault at ..." that is printed when a
program crashes, and an error code of 4 or 6. The NULL pointer
protection feature can be disabled by setting the
<code>_CRT0_FLAG_NULLOK</code> bit in <code>_crt0_startup_flags</code> and
recompiling the program; if this makes <code>SIGSEGV</code> crashes go
away, your program is using such invalid pointers; the stack trace
printed when the program crashes should be a starting point to debug
this.  See <a href="#Crash%20dump">how to debug SIGSEGV</a>, for more details about debugging these
problems.

<p>To make spotting uninitialized memory simpler, you can set
<code>_crt0_startup_flags</code> to <code>_CRT0_FLAG_FILL_DEADBEEF</code> <i>(don't
laugh!)</i>; this will cause the sbrk()'ed memory to be filled with the
value <code>0xdeadbeef</code> (<code>-559038737</code> in signed decimal or
<code>3735928559</code> in unsigned decimal) which should be easy to spot with
a debugger.  Any pointer variable which has this value was used without
initializing it first.

<p>An insufficient stack size can also be a cause of your program's demise,
see <a href="#Stack%20size">setting the stack size</a>, below.

<p><hr>
Node:&nbsp;<a name="malloc%20crash">malloc crash</a>,
Next:&nbsp;<a rel=next href="#Crash%20traceback">Crash traceback</a>,
Previous:&nbsp;<a rel=previous href="#v2%20crash">v2 crash</a>,
Up:&nbsp;<a rel=up href="#Running">Running</a>
<br>

<h2>9.2 Programs that crash in <code>malloc</code> or <code>free</code>.</h2>

<p><em><strong>Q</strong>: Since I upgraded to DJGPP v2.02, my program started to crash, and
the traceback points to library function <code>free</code>.  This program
worked flawlessly with v2.01, so I guess there's a bug in the new
version of <code>free</code>, right?</em>

<br><p>
<p><strong>A</strong>: Such problems are a tell-tale sign of programs that overwrite
buffers allocated by <code>malloc</code> or <code>calloc</code>, or call <code>free</code>
more than once with the same pointer, or pass to <code>free</code> a pointer
that didn't originate from a call to <code>malloc</code> or <code>calloc</code>.  If
the program that crashes is a C<tt>++</tt> program, you might have several
objects that share the same data, and the object destructor crashes when
it calls <code>free</code> several time with the same memory chunk.

<p>These crashes happen inside the memory-allocation functions because
these functions maintain some crucial information about the allocated
and free memory blocks right before the beginning and beyond the end of
the allocated buffers.  For speed considerations, this information is
not protected by any means like CRC or parity, so if you overwrite this
information, <code>malloc</code> and <code>free</code> will become confused and
eventually will blow up.

<p>The version of <code>malloc</code> in DJGPP library before v2.02 left some
slack space beyond the end of the allocated buffer (this was a
side-effect of the algorithm it used, which was optimized for speed, but
wasted some memory).  Thus, a program could overrun the allocated buffer
and still get away uncaught.  The new version of <code>malloc</code>
introduced with v2.02 doesn't waste memory, and because of this is much
less tolerant to such bugs.

<p>Bottom line: you should debug your program to find the offending code
that overwrites the end of an allocated buffer.  One way of doing that
is to put a data breakpoint (a.k.a. watchpoint) inside a debugger at
the address which gets overwritten; then, when the program overwrites
it, the debugger will kick in and you will see <em>whodunit</em>.

<p>Another possibility to debug such problems is to use the <small>YAMD</small>
package, written and maintained by <a href="mailto:neldredge@hmc.edu">Nate Eldredge</a>.  <small>YAMD</small> is a malloc debugger which will catch
and report many problems related to allocating, freeing, and using
allocated memory.  <small>YAMD</small> is available <a href="http://www3.hmc.edu/~neldredge/yamd/">from Nate's home page</a>.

<p><hr>
Node:&nbsp;<a name="Crash%20traceback">Crash traceback</a>,
Next:&nbsp;<a rel=next href="#File%20data%20corrupted">File data corrupted</a>,
Previous:&nbsp;<a rel=previous href="#malloc%20crash">malloc crash</a>,
Up:&nbsp;<a rel=up href="#Running">Running</a>
<br>

<h2>9.3 The call stack traceback</h2>

<p><em><strong>Q</strong>: My program dies with a cryptic message like "SIGSEGV" or
"Page Fault" or "General Protection Fault" and prints some
funny-looking numbers.  Can't I get some decent human-readable traceback
information, so I could pinpoint where in the program did the problem
happen?</em>

<br><p>
<p><strong>A</strong>:  Those "funny-looking numbers" <em>are</em> the traceback.  They
describe the sequence of function calls which led to the fatal error by
giving you the addresses where each function was called.  You can have
these addresses translated to source line numbers by using the
<code>SYMIFY</code> program.  <code>SYMIFY</code> is included in the
<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2/djdev203.zip">basic DJGPP development environment distribution</a>, and
should be in your <code>bin/</code> subdirectory.  To <dfn>symify</dfn> the
traceback, make sure that your program was compiled with the <code>-g</code>
switch, linked <strong>without</strong> the <code>-s</code> switch and <strong>not</strong>
stripped of its debugging symbols by running the <code>strip</code>
utility.  Now invoke your program and do whatever it takes to make it
crash.  Then, with the traceback still on the screen, type this from the
DOS command line:

<pre> symify <var>program-name</var>
</pre>

<p>(Note: <var>program-name</var> should include the <code>.exe</code> suffix.) 
<code>SYMIFY</code> then walks through the crash traceback by reading it
from video memory, and matches the hex addresses to the source files and
line numbers of the program.  It then writes back the list of source
files and line numbers right next to their hex addresses.  Now you can
start debugging.  More info about this is available in <a href="#Crash%20dump">how to analyze crash dumps</a>.

<p>One problem with this translation is that it relies on info generated by
GCC that maps the instruction addresses to source line numbers.  This
usually works okay, but one notable exception is when you use inline
assembly.  In this case, GCC only records the last line of the inline
assembly block, which might be way off if the block is large.

<p>You can ask <code>SYMIFY</code> to put the stack trace into a file (so you can
consult it later, e.g., from your editor while fixing the bug), by giving
it an output file, like this:

<pre> symify -o problem.dmp <var>program-name</var>
</pre>

<p>You can also save the raw stack trace (without source info) to a disk file
and submit it to <code>SYMIFY</code> later, like this:

<pre> symify -i problem.dmp <var>program-name</var>
</pre>

<p>This comes in handy when your program grabs the screen (e.g., for some
graphics) and the stack trace can't be seen.  You can then <a href="#Redirect">redirect the stack trace to a file</a>, e.g., with the <code>REDIR</code> program which comes with DJGPP.

<p>But what if you <em>didn't</em> compile your program with <code>-g</code>, and you
aren't sure how to recreate the problem which crashed it, after you
recompile?  Well, you can submit the stack dump <em>after</em> you recompile
your program.  Just press that PrintScreen key or otherwise save the stack
trace, then submit it to <code>SYMIFY</code> from a file as described above,
after you've recompiled the program.  Be sure to give gcc all the
compilation switches (sans <code>-s</code>) that you gave it when you originally
compiled your program (in addition to <code>-g</code>), including the
optimization switches, or else the addresses shown in the stack trace
might point to wrong places.

<p>If all you have from the crash is the program counter, the eight-digit
hex number after "eip=", you can still find out the corresponding
source line using GDB.  Assuming that the EIP value is <code>NNNNNNNN</code>,
type this at the GDB prompt:

<pre> list *0xNNNNNNNN
</pre>

<p><hr>
Node:&nbsp;<a name="File%20data%20corrupted">File data corrupted</a>,
Next:&nbsp;<a rel=next href="#Screen%20IO">Screen IO</a>,
Previous:&nbsp;<a rel=previous href="#Crash%20traceback">Crash traceback</a>,
Up:&nbsp;<a rel=up href="#Running">Running</a>
<br>

<h2>9.4 Reading and writing binary files</h2>

<p><em><strong>Q</strong>: I'm reading/writing data files, but the data gets corrupted.</em>

<br><p>
<p><em><strong>Q</strong>: My program crashes when I read data files, but the same program
on Unix works OK.</em>

<br><p>
<p><em><strong>Q</strong>: When I read a file I get only a small portion of it.</em>

<br><p>
<p><em><strong>Q</strong>: I'm trying to open an existing binary file for read/write using
the <code>fstream</code> class, but no mater what I do, the file is always
truncated after I write to it<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: I cannot read anything from a binary file using the
<code>ifstream</code> class, even though I use <code>ios::binary</code>!!</em>

<br><p>
<p><strong>A</strong>:  Are your data files binary?  The default file type in DOS is
"text", even when you use the <code>read</code> and <code>write</code> library
functions.  Text files get their newlines converted to <code>CR-LF</code>
pairs on write and vice versa on read; reading in "text" mode stops at
the first <code>^Z</code> character.  Reading binary files as text will
therefore corrupt the data and fail to read all the data you need.  You
must tell the system that a file is binary through the <code>b</code> flag in
<code>fopen</code>, or <code>O_BINARY</code> in <code>open</code>, or use the
<code>setmode</code> library function to switch the handle to binary mode (the
latter method is handy when you didn't open the file in your code, like
what happens with standard input and output).

<p>Note that the above distinction between binary and text files is written
into the ANSI/ISO C standard, so programs that rely on the Unix behavior
whereby there's no such distinction, are strictly speaking not portable.

<p>You can also use the low-level <code>_read</code> and <code>_write</code> library
functions which give you the direct interface to the DOS file I/O; they
always use binary I/O.

<p>If you have problems with read/write access to binary files via the
<code>fstream</code> class in C<tt>++</tt> programs, then make sure you call the
constructor with an explicit <code>ios::in</code> and/or <code>ios::out</code>
parameter, like this:

<pre> ifstream object_name ("file", ios::binary | ios::in);
</pre>

<p>Likewise, if you want to <em>write</em> binary files, you need to mention
the <code>ios::out</code> flag explicitly.  (This is actually a bug in all
versions of the GNU C<tt>++</tt> iostreams library up to and including
version 2.95.)

<p>Versions of the GNU C<tt>++</tt> library before 2.8.1 had a bug in the GNU
iostream classes.  This bug caused truncation of files, even if you
never write to the file.  If you still use such an old version and
cannot upgrade, a workaround is to do something like this:

<pre> fstream inFile;
 int fd = open ("foobar", O_RDWR | O_BINARY);
 inFile.fstream (fd);
</pre>

<p><hr>
Node:&nbsp;<a name="Screen%20IO">Screen IO</a>,
Next:&nbsp;<a rel=next href="#Distributing">Distributing</a>,
Previous:&nbsp;<a rel=previous href="#File%20data%20corrupted">File data corrupted</a>,
Up:&nbsp;<a rel=up href="#Running">Running</a>
<br>

<h2>9.5 Buffered screen I/O surprises</h2>

<p><em><strong>Q</strong>: My program prompts the user to enter data from the keyboard, then
reads its response.  When compiled with a 16-bit compiler like BCC or MSC
it works as expected, but with gcc the prompt doesn't show, or is printed
much later in the program.</em>

<br><p>
<p><em><strong>Q</strong>: My program prints text in a loop, but the text appears on the
screen only after the loop is finished<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: Help!  I cannot make `gotoxy' work!  The text I print appears on
the screen in incorrect locations after I use `gotoxy'!</em>

<br><p>
<p><em><strong>Q</strong>: Why does the text appear in the default colors even though I call
`textcolor' and `textbackground'?</em>

<br><p>
<p><strong>A</strong>:  Do you write to screen using buffered I/O (<code>fprintf</code>,
<code>fputs</code> and the like) functions, or send your output to the C<tt>++</tt>
<code>cout</code> stream?  Then what you see is the effect of the buffering of
the standard output streams.  The buffer is not written to screen until
it's full, or until a newline is output, which might produce very
unpleasant and unexpected behavior when used in interactive programs.

<p>DJGPP library functions use more aggressive buffering than 16-bit
real-mode compilers, because delivering the output to the screen
requires an expensive switch from protected to real mode and back. 
DJGPP tries to minimize the amount of these mode switches for
performance reasons.

<p>It is usually a bad idea to use buffered I/O in interactive programs; you
should instead use screen-oriented functions like <code>cprintf</code> and
<code>cputs</code>.  If you must use buffered I/O, you should be sure that
both <code>stdout</code> and <code>stderr</code> are line-buffered or unbuffered (you
can change the buffering by calling the <code>setvbuf</code> library
function); another solution would be to <code>fflush</code> the output stream
before calling any input function, which will ensure all pending output is
written to the operating system.  While this will generally work under
DOS and DJGPP, note that in some cases the operating system might
further buffer your output, so sometimes a call like <code>fsync</code> would
be needed to actually cause the output be delivered to the screen.

<p>The functions that set text attributes only affect the screen-oriented
output (a.k.a. <dfn>conio</dfn>) functions (<code>cputs</code>, <code>cprintf</code> etc.),
the text written by <code>fprintf</code> and other <dfn>stdio</dfn> functions
doesn't change.  This is unlike some 16-bit DOS compilers where
<code>stdio</code> functions can also print colored text.

<p><hr>
Node:&nbsp;<a name="Distributing">Distributing</a>,
Next:&nbsp;<a rel=next href="#File%20handles">File handles</a>,
Previous:&nbsp;<a rel=previous href="#Screen%20IO">Screen IO</a>,
Up:&nbsp;<a rel=up href="#Running">Running</a>
<br>

<h2>9.6 What do DJGPP programs need to run?</h2>

<p><em><strong>Q</strong>: When I copy my DJGPP application program to another PC where no
DJGPP is installed, I can't run it.  It complains that it cannot find DPMI
(??).  Do I really need all of your multi-megabyte installation to run
compiled programs?</em>

<br><p>
<p><strong>A</strong>:  No, you don't.  You can either (a) bring the <code>CWSDPMI.EXE</code>
free DPMI host to the target machine and put it in the same directory as
your compiled program or somewhere along the <code>PATH</code>, or (b) make
sure there's another DPMI host (such as QDPMI, 386Max, Windows, etc.) 
installed on the target machine.

<p>If your program could be run on a machine which lacks a floating-point
processor, you should also distribute an emulator, or link your program
with an emulator library.  See <a href="#Emulation">floating-point emulation issues</a>.

<p><code>PMODE/DJ</code> is an alternative DPMI host that can be bound with your
program, so that you have a single self-sufficient executable, but
remember that <code>PMODE/DJ</code> doesn't support virtual memory, so such
programs will only run on machines with enough free physical RAM.

<p><hr>
Node:&nbsp;<a name="File%20handles">File handles</a>,
Next:&nbsp;<a rel=next href="#Virus">Virus</a>,
Previous:&nbsp;<a rel=previous href="#Distributing">Distributing</a>,
Up:&nbsp;<a rel=up href="#Running">Running</a>
<br>

<h2>9.7 How many file handles can DJGPP use?</h2>

<p><em><strong>Q</strong>: The library reference tells me that DJGPP programs can use up to
255 file handles, but my program can only use much less, about
30<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: I put a <code>FILES=60</code> directive in my <code>CONFIG.SYS</code>, but my
programs cannot use more than 42 when they run on Windows.  Why is
that?</em>

<br><p>
<p><strong>A</strong>: It's no wonder you are confused: this is one of the most
complicated issues related to the DOS filesystem.  I cannot discuss all
the details here<a rel=footnote href="#fn-17"><sup>17</sup></a>, but I will try to
explain at least those aspects which directly affect a typical DJGPP
user.

<p>It is true that the DJGPP library lets you open up to 255 handles--but
only if the operating system allows it.  The operating system further
limits this number, depending on several factors.

<p>First, if you create new handles by calling the <code>dup</code> library
function (or the underlying function 45h of the DOS Interrupt 21h), you
can always have up to 255 such handles (minus the 5 that are open by the
system before the program starts), even if the <code>FILES=</code> directive
sets a much smaller count.  All such handles refer to the same file or
device and moving the file pointer using one handle moves all the rest
of them.

<p>In nested programs (that is, programs that were invoked by other
programs), this is a bit more complicated.  By default, any handle that
is open in the parent program is <dfn>inherited</dfn> by the child, unless
the parent sets the special <code>O_NOINHERIT</code> bit when it opens the
file.  Thus, if the parent had 10 files open when it invoked the child,
the child program will have 10 less available handles--245--to work
with, even if it only calls <code>dup</code><a rel=footnote href="#fn-18"><sup>18</sup></a>.

<p>The <code>FILES=</code> directive comes into play when you call <code>open</code> or
any of its brethren to create handles.  Unlike the handles created by
<code>dup</code>, <code>open</code> (and the underlying functions 3Dh or 6Ch of
Interrupt 21h) create handles that are <em>independent</em> of each other,
even if you open the same file over and over again.  The operating
system will not let you create more such handles than the limit set by
the <code>FILES=</code> directive.  This is because the <code>FILES=</code>
directive sets the number of entries in the SFT, the <dfn>System File
Table</dfn> maintained by DOS, where all the information about every open
file is kept<a rel=footnote href="#fn-19"><sup>19</sup></a>.  So, if your
<code>CONFIG.SYS</code> specifies <code>FILES=60</code>, you cannot <code>open</code> more
than 60 files.  After that, a call to <code>open</code> will fail with
<code>ENFILE</code> (Too many open files in system).

<p>In practice, you won't even be able to get 60 handles if you have
<code>FILES=60</code> in your <code>CONFIG.SYS</code>, since several handles are
always preconnected.  On plain DOS, 5 handles are already open when a
program starts.  These correspond to standard input, standard output,
and standard error streams, and the other 2 handles are connected to the
AUX and PRN devices.  So, if you have <code>FILES=60</code>, DOS will only let
you open up to 55 independent handles.  (If your program doesn't need
some of the 5 standard handles, you can close them and gain some more
handles to play with.)

<p>The plot thickens even more if you run DJGPP programs on Windows.  Since
Windows itself uses up 10-15 handles in the System Virtual Machine (VM),
it tries to make it up for the DOS programs by adding private file
tables to each DOS box with additional handles, beyond those maintained
in the system-wide SFT.  The default is to add a private table with 10
handles to each DOS box, but the <code>PerVMFiles=</code> entry in the
<code>[386Enh]</code> section of the <code>SYSTEM.INI</code> file can override that. 
So on Windows, you need to consider the <code>PerVMFiles=</code> setting as
well, and the resulting limit on open handles is less predictable since
the number of handles used by Windows isn't constant (for example, it
depends on how many fonts are loaded by Windows programs at any given
moment).

<p>If you run DJGPP on Windows 3.X, and your system loads <code>SHARE.EXE</code>
during bootstrap, things become even more complicated.  <code>SHARE.EXE</code>
prevents Windows from adding private file tables (because it couldn't
spy on files open via those private handles), so you get 10-15 less
handles than what the <code>FILES=</code> directive says, and sometimes even
less than that.  That is how somebody who has <code>FILES=60</code> on their
<code>CONFIG.SYS</code> could only get 42 handles on Windows.  If you are
looking for reasons not to load <code>SHARE.EXE</code>, here you have another
one.

<p><hr>
Node:&nbsp;<a name="Virus">Virus</a>,
Previous:&nbsp;<a rel=previous href="#File%20handles">File handles</a>,
Up:&nbsp;<a rel=up href="#Running">Running</a>
<br>

<h2>9.8 DJGPP and Anti-Virus Software</h2>

<p><em><strong>Q</strong>: I upgraded my anti-virus software, and now it finds a virus in
all DJGPP programs!!</em>

<br><p>
<p><strong>A</strong>:  Relax, this is most probably a false alarm.  The DJGPP stub
loader, a short 2KB DOS program prepended to each DJGPP program, is
optimized for size, and employs some clever tricks to make its code
smaller.  A few over-zealous virus scanners take some of these tricks as
tell-tale signs of a virus, and report that all DJGPP programs are
infected.

<p>The truth is that DJGPP is distributed via SimTel.NET mirrors, which are
known to scan all binaries for viruses before the zip files are cleared
for general use.  In addition, many DJGPP packages are built on Unix
systems, where a DOS/Windows virus cannot survive.  So it is very
unlikely that a <em>real</em> virus would get through, and infect all of
the programs on top of that.  A couple of such false alarms were seen in
recent years, but all of them proved to be bugs in anti-virus programs.

<p><hr>
Node:&nbsp;<a name="Graphics">Graphics</a>,
Next:&nbsp;<a rel=next href="#Floating%20point">Floating point</a>,
Previous:&nbsp;<a rel=previous href="#Running">Running</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>10 Writing and Running Graphics Programs</h1>

<p>This chapter discusses some problems and explains some subtle points
related to graphics programming under DJGPP.

<ul>
<li><a href="#GRX%20driver">GRX driver</a>:            What GRX driver to use with your SVGA. 
<li><a href="#Direct%20access">Direct access</a>:         Under protected-mode it is (almost) forbidden. 
<li><a href="#Graphics%20and%20Windows">Graphics and Windows</a>:  Windows can get into the way of your programs. 
<li><a href="#OpenGL">OpenGL</a>:                OpenGL, MGL, MESA, and GLUT for DJGPP
</ul>

<p><hr>
Node:&nbsp;<a name="GRX%20driver">GRX driver</a>,
Next:&nbsp;<a rel=next href="#Direct%20access">Direct access</a>,
Previous:&nbsp;<a rel=previous href="#Graphics">Graphics</a>,
Up:&nbsp;<a rel=up href="#Graphics">Graphics</a>
<br>

<h2>10.1 What GRX driver to use with your SVGA</h2>

<p><em><strong>Q</strong>: Why won't GRX work with my SVGA adapter in any resolution but the
standard VGA?</em>

<br><p>
<p><em><strong>Q</strong>: How do I tell GRX which driver to use with my SVGA?</em>

<br><p>
<p><strong>A</strong>:  In order for GRX to work with your SVGA, you should set the
<code>GRX20DRV</code> environment variable, like this:

<pre>  set GRX20DRV=et4000 gw 1024 gh 768 nc 256
</pre>

<p>To set that variable, you need to know the chip-set on your adapter;
refer to your SVGA documentation.  Currently, GRX supports the
following chip-sets:

<dl>
<dt><code>ati28800</code>
<dd>The ATI 28800 chip-set.

<br><dt><code>cl5426</code>
<dd>Cirrus Logic CL-GD5426 or higher (like CL-GD5428) chip-set.

<br><dt><code>et4000</code>
<dd>Tseng Labs ET4000 chip-set.

<br><dt><code>mach64</code>
<dd>The ATI Mach-64 SVGA.

<br><dt><code>stdega</code>
<dd>The standard EGA adapter.

<br><dt><code>stdvga</code>
<dd>The standard VGA adapter.

<br><dt><code>VESA</code>
<dd>For any VESA-compatible adapter. 
</dl>

<p>After you set the <code>GRX20DRV</code> variable, run <code>modetest.exe</code> to see
what modes you have available.

<p>If your chip-set is not one of the above, try the <code>VESA</code> driver
because many adapters support the VESA BIOS extensions.  If yours
doesn't, try installing a VESA BIOS emulator, like <a href="ftp://ftp.simtel.net/pub/simtelnet/msdos/graphics/univbe51.zip">UNIVBE</a>.  The latest
version of UNIVBE and related software is always available <a href="http://www.scitechsoft.com/">from SciTech Web site</a>.

<p><hr>
Node:&nbsp;<a name="Direct%20access">Direct access</a>,
Next:&nbsp;<a rel=next href="#Graphics%20and%20Windows">Graphics and Windows</a>,
Previous:&nbsp;<a rel=previous href="#GRX%20driver">GRX driver</a>,
Up:&nbsp;<a rel=up href="#Graphics">Graphics</a>
<br>

<h2>10.2 Accessing the video memory</h2>

<p><em><strong>Q</strong>: I try to access the video memory at <code>0xa0000</code>, but my
program crashes with SIGSEGV<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: How can I access the text-mode video memory of my VGA?</em>

<br><p>
<p><strong>A</strong>:  Absolute addresses of memory-mapped devices are mapped
differently under DJGPP than what you might be used to under other DOS
development environments.  That's because DJGPP is a protected-mode
environment, in which you can't just poke any address:  that's what
protected mode is all about!  To access such absolute addresses, use the
so-called "farptr" functions like <code>_farpeekb</code> and
<code>_farpokew</code>; they are described in the C Library reference. 
See <a href="#Xfer">more details on using "farptr" functions to access absolute addresses in low memory</a>, below.

<p>For text-mode screen updates, you can use the <code>ScreenUpdate</code> and
<code>ScreenUpdateLine</code> library functions to quickly update the screen
from a buffer prepared in memory.

<p>Using the <code>_farpeekX/_farpokeX</code> paradigm to access memory isn't
much slower than direct access (they compile into 2 machine instructions
when optimizations are enabled).  But if you need even faster access
(and don't want to write it in assembly), see <a href="#Fat%20DS">using the "nearptr" access facilities</a>, as
described below.

<p>Some examples of how to access video memory from DJGPP programs are
available <a href="http://www.delorie.com/djgpp/doc/brennan/brennan_access_vga.html">in Brennan Underwood's tutorial</a>.

<p><hr>
Node:&nbsp;<a name="Graphics%20and%20Windows">Graphics and Windows</a>,
Next:&nbsp;<a rel=next href="#OpenGL">OpenGL</a>,
Previous:&nbsp;<a rel=previous href="#Direct%20access">Direct access</a>,
Up:&nbsp;<a rel=up href="#Graphics">Graphics</a>
<br>

<h2>10.3 Graphics screen restoring under Windows</h2>

<p><em><strong>Q</strong>: When I switch away from my DJGPP program under Windows 3.X, then
switch back to it, graphics mode is down, or my screen is all messed
up.  Why?</em>

<br><p>
<p><em><strong>Q</strong>: I cannot run my program which uses Allegro: Windows 9X says the
program would work better in DOS Mode<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: When running a program that uses Allegro under Windows, I cannot
switch away from it with <kbd>Alt-&lt;TAB&gt;</kbd>: instead of switching, the
PC beeps at me.</em>

<br><p>
<p><strong>A</strong>:  Windows 3.X only saves the VGA screen in standard VGA modes
(1..13h) when you task-switch away from a DOS application.  In any other
mode it only saves/restores the video mode <em>number</em>, but not the
actual screen contents.  Your application is most likely still in the
proper video mode (if not, it's probably the fault of the Windows driver
for your SVGA card), but the video memory is messed up.  The beauty of
all this is that your program has no way of knowing that the screen has
been taken away and then returned to it.

<p>The only reasonable thing to do is to dedicate a "hotkey" in your
application (e.g., <kbd>Alt-R</kbd>) whose action is to redraw the entire
screen.  If you do that, it's best to start all the way from the
beginning, e.g. with a call to <code>GrSetMode</code> (if you use GRX), as
there are a few bad Windows video drivers which do not restore SVGA
graphics modes properly upon the switch back.

<p>Windows 9X <em>does</em> save and restore the SVGA state, but only if you
task-switch with the <kbd>Alt-&lt;TAB&gt;</kbd> key.  If the switch happens
because of anything else, like a window popping up, or you pressing the
<code>Start</code> button, there's nothing your application can do to ensure
it restores correctly, because it just never gets moved back into
focus.  As soon as the user tries to restore it, Windows 9X comes up
with this message:

<pre> This application cannot be restored and will be terminated.
</pre>

<p>If you cannot switch from a graphics program by pressing
<kbd>Alt-&lt;TAB&gt;</kbd>, it usually means that some of the Windows drivers,
most likely the graphics one, is faulty.  Some SVGA drivers simply don't
bother to implement the save- and restore-state functions which Windows
needs to switch from a DOS program that uses SVGA graphics modes.  The
solution is to upgrade your driver, or replace the SVGA with one that is
better supported.

<p>To prevent Windows 9X from getting in your way when running graphics
programs, like popping up messages that suggest to run the program in
DOS Mode, just disable one or more of the relevant properties for that
program.  Here's a detailed procedure to disable them all:

<ul>
<li>Right-click on the program's <code>.exe</code> file in the <code>Explorer</code> or
in <code>My Computer</code>, then click on <code>Properties</code>.

<li>Click on the <code>Program</code> tab, then press the <code>Advanced</code> button,
and change the advanced properties as follows:

<ul>
<li>uncheck the <code>Suggest DOS Mode as necessary</code> option;
<li>check the <code>DOS Mode</code> option;
<li>uncheck the <code>Warn before entering DOS Mode</code> option;
<li>check the <code>Prevent MS DOS programs from detecting Windows</code> option;
<li>uncheck the <code>DOS Mode</code> option. 
</ul>

<li>Finally, click the <code>OK</code> button twice. 
</ul>

<p>Programs which use latest versions of Allegro should not usually trigger
warning messages from Windows, so upgrade to the latest Allegro version
if you keep getting such warnings.

<p><hr>
Node:&nbsp;<a name="OpenGL">OpenGL</a>,
Previous:&nbsp;<a rel=previous href="#Graphics%20and%20Windows">Graphics and Windows</a>,
Up:&nbsp;<a rel=up href="#Graphics">Graphics</a>
<br>

<h2>10.4 OpenGL and related packages for DJGPP</h2>

<p><em><strong>Q</strong>: What is OpenGL?  Where can I get a DJGPP-compatible version?</em>

<br><p>
<p><em><strong>Q</strong>: Where can I find a version of <small>MESA</small> for DJGPP?</em>

<br><p>
<p><strong>A</strong>: First, a little background.  OpenGL is an abstract interface
design specification for drawing individual polygons, originally
designed by SGI.  It is generally regarded as well-designed, relatively
high-level, and easy to program.  (In contrast, DirectX is low-level and
notoriously hard to program, but much faster on machines without
hardware acceleration.)  There are many different libraries that
implement the OpenGL interface.

<p><small>MESA</small> is a free implementation of OpenGL distributed under LGPL, the
GNU Library License.  <small>MGL</small> is a 2D graphics library written by
SciTech, that includes a copy of <small>MESA</small> and is distributed under a
license that is less restrictive than LGPL.  (Unfortunately, SciTech
failed to mention in their docs that <small>MESA</small> is under LGPL, and thus
people who use <small>MGL</small> might inadvertently violate the LGPL because
they don't know it applies to their code.)  Latest versions of <small>MGL</small>
are known to work on MS-DOS, Linux, OS/2, and QNX.

<p>The DJGPP version of <small>MESA</small> doesn't support hardware acceleration,
but it does support some 3D chipsets on other platforms, so it should be
possible to support that on DOS also, given the motivation.

<p>You can get <small>MESA</small> from &lt;<code>http://www.mesa3d.org</code>&gt;.  Latest versions
might not work with DJGPP out of the box, but version 2.6 is known to
have a full DJGPP support.

<p>Version 4.5 beta 4 of <small>MGL</small> is available <a href="ftp://ftp.scitechsoft.com/devel/beta/">from the SciTech FTP site</a>; it includes version 3.0 of
<small>MESA</small> that supports DJGPP.  It also includes <small>GLUT</small>.

<p><hr>
Node:&nbsp;<a name="Floating%20point">Floating point</a>,
Next:&nbsp;<a rel=next href="#Debugging">Debugging</a>,
Previous:&nbsp;<a rel=previous href="#Graphics">Graphics</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>11 Floating Point Issues and FP Emulation</h1>

<p>This chapter deals with issues pertaining to floating-point code and
floating-point emulation under DJGPP.

<ul>
<li><a href="#Emulation">Emulation</a>:              What are your emulation options. 
<li><a href="#Emulator%20accuracy">Emulator accuracy</a>:      Not always as good as we'd like. 
<li><a href="#Emulation%20in%20Windows">Emulation in Windows</a>:   It could hang your programs. 
</ul>

<p><hr>
Node:&nbsp;<a name="Emulation">Emulation</a>,
Next:&nbsp;<a rel=next href="#Emulator%20accuracy">Emulator accuracy</a>,
Previous:&nbsp;<a rel=previous href="#Floating%20point">Floating point</a>,
Up:&nbsp;<a rel=up href="#Floating%20point">Floating point</a>
<br>

<h2>11.1 Floating-point code without 80387</h2>

<p><em><strong>Q</strong>: I don't have an 80387.  How do I compile and run floating point
programs?</em>

<br><p>
<p><em><strong>Q</strong>: What shall I install on a target machine which lacks hardware
floating-point support?</em>

<br><p>
<p><strong>A</strong>: Programs which use floating point computations and could be run
on machines without an 80387 should either be linked with the
<code>libemu.a</code> emulation library (add <code>-lemu</code> to your link command
line) or be allowed to dynamically load the <code>emu387.dxe</code> emulator at
run-time if needed.  Linking with libemu makes distribution simpler at a
price of adding about 20KB to the size of the program <code>.exe</code> file
(the emulator functions will be used only if no hardware floating point
support is detected at runtime).  You should <strong>always</strong> do one of
the above when you distribute floating-point programs.

<p>A few users reported that the emulation won't work for them unless they
explicitly tell DJGPP there is no x87 hardware, like this:

<pre>  set 387=N
  set emu387=c:/djgpp/bin/emu387.dxe
</pre>

<p>This is probably due to some subtle bug in the emulator setup code.  It
is possible that it was fixed in the latest DJGPP version, so upgrade if
you can.  If the problem persists, please post the details to
the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a>.

<p>There is an alternative FP emulator called <code>WMEMU</code> (get the file
<code>v2misc/wmemu21b.zip</code>).  It mimics a real
coprocessor more closely, but is larger in size and is distributed under
the GNU General Public License (which generally means you need to
distribute its source if you distribute <code>wmemu387.dxe</code>, or
distribute the source or objects to your entire program, if you link it
with <code>libwmemu.a</code>).  Its advantage is that with <code>WMEMU</code>, you
can debug FP apps on a non-FPU machine.  (But you will need to get the
latest binaries of <code>WMEMU</code>, since older distributions were compiled
with a beta release of DJGPP v2.0 and will cause unresolved externals if
you try linking against <code>libwmemu.a</code> without recompiling it.) 
Note, however, that even <code>WMEMU</code> doesn't solve all the problems of
debugging FP programs on a non-FPU machine (e.g., emulating flags
doesn't work).

<p><hr>
Node:&nbsp;<a name="Emulator%20accuracy">Emulator accuracy</a>,
Next:&nbsp;<a rel=next href="#Emulation%20in%20Windows">Emulation in Windows</a>,
Previous:&nbsp;<a rel=previous href="#Emulation">Emulation</a>,
Up:&nbsp;<a rel=up href="#Floating%20point">Floating point</a>
<br>

<h2>11.2 Floating point inaccuracies when using emulator</h2>

<p><em><strong>Q</strong>: I am experiencing inaccurate results in some floating point
calculations, sometimes in the 2nd or 3rd significant digit (like getting
118.401 instead of 120.0).  This is really unacceptable!  (And no, I'm
<strong>not</strong> using a buggy Pentium CPU.)</em>

<br><p>
<p><em><strong>Q</strong>: I get some very inaccurate results when my program runs on a
machine lacking an FPU<small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  Are you using the <code>emu387.dxe</code> emulator?  If so, it might
be that the emulator isn't as accurate as you expect.  Versions of the
emulator distributed with DJGPP 2.02 and earlier had a bug that affected
addition, subtraction, and comparison of floating-point numbers with
some specific bit patterns.  This bug could produce inaccuracies in math
functions such as <code>sqrt</code>, <code>sin</code> and <code>tan</code> for some
specific argument values, and even cause a program to be trapped in an
infinite loop.  The emulation of the <code>FPATAN</code> instruction and
functions based on it, like <code>atan</code>, <code>asin</code> and <code>acos</code>,
also suffered loss of accuracy for some specific arguments.  DJGPP v2.03
solves these problems, so upgrade and see if your problems go away.

<p>However, even the emulator supplied with v2.03 and later suffers some
accuracy degradation when computing trigonometric functions for
arguments that are integral multiples of
<code>Pi/2</code> or <code>Pi/4</code>
(depending on the particular function you call), and when computing
inverse trigonometric functions which should yield results that are such
multiples.  So, for example, if you use <code>4*atan(1.)</code> to get the
value of
<code>Pi</code>,
that might be your problem.

<p>The reason for this accuracy degradation is that <code>emu387.dxe</code> does
not store the value of
<code>Pi</code>,
with extra precision, like the real FPU does, and trig functions in
<code>libc.a</code> rely on such extra accuracy to deliver accurate results.

<p>For computing the value of
<code>Pi</code>,
the solution is simple: make it a constant, as God intended.  The header
file <code>&lt;math.h&gt;</code> includes the constant <code>M_PI</code> which you can
use; or get the value of <a href="http://www.diku.dk/~terra/pi.html"><b>Pi</b> from the net</a>.

<p>In many cases that involve trigonometric functions and yield inaccurate
results, linking your program with the <code>-lm</code> switch might help. 
This switch causes the linker to use an alternative math library,
<code>libm.a</code>, which doesn't rely on x87 instructions, and thus is more
accurate when the emulator deviates from the actual x87.

<p>The alternate emulator <code>WMEMU</code> is known to be accurate to 7
significant digits for <code>float</code> variables, and 15 digits for
<code>double</code>s.  It also much more faithfully emulates the behavior of
the x87 processor when abnormal arguments (<code>Inf</code>, <code>NaN</code>, etc.) 
are involved.  So if <code>emu387.dxe</code> which comes with DJGPP v2.03
doesn't solve your problems, you might try using <code>WMEMU</code> as a
solution.

<p><hr>
Node:&nbsp;<a name="Emulation%20in%20Windows">Emulation in Windows</a>,
Previous:&nbsp;<a rel=previous href="#Emulator%20accuracy">Emulator accuracy</a>,
Up:&nbsp;<a rel=up href="#Floating%20point">Floating point</a>
<br>

<h2>11.3 Problems with emulation on Windows</h2>

<p><em><strong>Q</strong>: My program which uses floating-point math hangs on Windows DOS
box when I try to use FP emulation<small>...</small>.</em>

<br><p>
<p><strong>A</strong>: This is due to a bug in the emulator in DJGPP v2.02 and earlier. 
The bug affected those programs running on Windows 3.X and 9X which use
the <small>WAIT</small> and <small>FWAIT</small> instructions (most of non-trivial FP
programs do), both those which use the emulator <code>emu387.dxe</code> and
those linked with the emulation library using the <code>-lemu</code> switch. 
The bug is solved in DJGPP versions 2.03 and later, so upgrade.

<p><hr>
Node:&nbsp;<a name="Debugging">Debugging</a>,
Next:&nbsp;<a rel=next href="#Profiling">Profiling</a>,
Previous:&nbsp;<a rel=previous href="#Floating%20point">Floating point</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>12 Debugging DJGPP Programs</h1>

<p>This chapter discusses the debuggers you can use with DJGPP and answers
some of the questions you might have when debugging DJGPP programs.

<ul>
<li><a href="#How%20to%20debug">How to debug</a>:               What should you do to debug a program. 
<li><a href="#Crash%20dump">Crash dump</a>:                 How to use the crash dump info. 
<li><a href="#Debug%20graphics">Debug graphics</a>:             Debugging GUI programs. 
<li><a href="#GDB%20and%20C++%20source">GDB and C++ source</a>:         Problems with non-<b>.cc</b> extensions. 
<li><a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>:         Class members' names in GDB. 
<li><a href="#Included%20source">Included source</a>:            Debuggers have problems with included files. 
<li><a href="#Static%20vars">Static vars</a>:                GDB might not let you debug them. 
<li><a href="#Bool%20vars">Bool vars</a>:                  GDB and <small>RHIDE</small> cannot display bool type. 
<li><a href="#Complex%20vars">Complex vars</a>:               How to display complex vars in GDB. 
<li><a href="#Debugging%20woes">Debugging woes</a>:             Some programs which cannot be debugged. 
</ul>

<p><hr>
Node:&nbsp;<a name="How%20to%20debug">How to debug</a>,
Next:&nbsp;<a rel=next href="#Crash%20dump">Crash dump</a>,
Previous:&nbsp;<a rel=previous href="#Debugging">Debugging</a>,
Up:&nbsp;<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>12.1 How to run a DJGPP program under debugger</h2>

<p><em><strong>Q</strong>: How do I debug my programs?</em>

<br><p>
<p><strong>A</strong>: First, remember to use the <code>-g</code> switch when you compile and
link.  This puts debugging information into your executable.  When
linking, don't use the <code>-s</code> switch.  Here are a few examples of
compilation and link command lines when you intend to debug a program:

<pre> gcc -Wall -c -g -O myfile.c

 gcc -Wall -O2 -g -o myprog.exe mymain.c mysub1.c mysub2.c -lm

 gcc -g -o myprog myprog.o mysub.o
</pre>

<p><a name="stabs%20debugging"></a>
Note that with <code>gcc</code>, you can use optimization switches when
compiling with <code>-g</code>.  To use stabs debugging, compile with
<code>-gstabs3</code> or <code>-gstabs+</code> instead of <code>-g</code>.  (Stabs
debugging info is more powerful than the default COFF debugging; if the
debugger doesn't seem to support some feature, or behaves strangely, try
compiling the program with <code>-gstabs+</code> and see if that helps.) 
Stabs debugging is especially recommended for C<tt>++</tt> programs, since
the default format of debugging info is not powerful enough to record
all the necessary information about C<tt>++</tt> code.

<p>If (or when) GCC supports the dwarf2 debugging info, compile the program
with the <code>-gdwarf2</code>, since it is even better than stabs,
especially with the new generation of GCC optimizations.

<p>Then, to debug the program, use a command line like this (here for the
<code>GDB</code> debugger):

<pre> gdb myprog.exe
</pre>

<p>Beginning with v2.01, DJGPP debuggers can debug both unstubbed COFF
images and DOS-style <code>.exe</code> executables (v2.0 only supported COFF
files).  To debug a COFF file, name it without the .exe extension, like
so:

<pre> gdb myprog
</pre>

<p>You can use one of several available debuggers with DJGPP:

<ol type=a start=1>
</p><li><small>RHIDE</small>, the DJGPP IDE by Robert Hoehne which is available <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2apps/rhide14b.zip">from the DJGPP archives</a>. 
It includes an integrated source-level debugger based on GDB code and
presents a user interface like that of Borland's IDE or Turbo Debugger.

<li><a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/gdb418b.zip"><code>GDB</code></a>,
the GNU Debugger.  This is an extremely powerful source-level debugger,
but it uses a line-oriented user interface.  People who are familiar
with using <code>GDB</code> on Unix should know about the following important
differences in its operation on MS-DOS:

<ul>
<li>The command-line arguments can be only passed to the debuggee<a rel=footnote href="#fn-20"><sup>20</sup></a>
from within the debugger (use the <code>set args</code> or <code>run</code>
commands), not from the <code>GDB</code> command line.  Redirection of
standard input and standard output as part of the command line is
supported only in ports of <code>GDB</code> v4.18 and later.

<li><code>GDB</code> doesn't know about PC-specific keys, so you cannot use the
arrow keys for command history editing.  Use ASCII control keys instead
(<kbd>^F</kbd> for forward character, <kbd>^B</kbd> for backward character,
<kbd>^P</kbd> for previous line, <kbd>^N</kbd> for next line, etc.).

<li>The initial commands are read from a file named <code>gdb.ini</code> instead
of <code>.gdbinit</code>, because MS-DOS doesn't allow file names with leading
dots.

<li><code>GDB</code> uses the GNU <code>readline</code> package for its input.  The
<code>readline</code> init file (<code>~/.inputrc</code> on Unix) is called
<code>~/_inputrc</code> on MS-DOS and should be in the directory pointed to by
the <code>HOME</code> environment variable. 
</ul>

<li><code>FSDB</code>, the full-screen debugger, from the <code>djdev</code>
distribution.  This presents a user interface like that of Borland's
Turbo Debugger, but unlike TD, <strong>it isn't a source-level debugger</strong>
(although it will show the source code together with the machine
instructions).  It also supports data-write breakpoints: a powerful
feature for hunting down code which overwrites data it shouldn't touch. 
Another advantage of <code>FSDB</code> is that you can easily debug programs
that grab the screen, because it can switch between the debugger screen
and the application screen.  Also, it allows to examine the FPU
registers.  The main disadvantage of <code>FSDB</code> is that you cannot
easily examine the contents of complex data structures.  Remember to
prepend an underscore <code>_</code> to the names of C identifiers when you use
them with <code>FSDB</code>; for C<tt>++</tt> programs you will have to find out the
mangled names of static class variables and methods to make <code>FSDB</code>
understand them.

<li><code>EDEBUG32</code> is the most basic debugger you can use with DJGPP.
</ol>

<p>You invoke any debugger like this:

<pre> &lt;debugger-name&gt; &lt;program&gt; &lt;args...&gt;
</pre>

<p>(except that with <code>GDB</code>, you need to pass the arguments from within
the debugger).

<p><hr>
Node:&nbsp;<a name="Crash%20dump">Crash dump</a>,
Next:&nbsp;<a rel=next href="#Debug%20graphics">Debug graphics</a>,
Previous:&nbsp;<a rel=previous href="#How%20to%20debug">How to debug</a>,
Up:&nbsp;<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>12.2 How to begin debugging using the crash dump info</h2>

<p><em><strong>Q</strong>: My program crashed with SIGSEGV, but I'm unsure how to begin
debugging it<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: Can you help me figure out all those funny numbers printed when
my program crashes?</em>

<br><p>
<p><strong>A</strong>: Debugging should always begin with examining the message printed
when the program crashes.  That message includes crucial information
which usually proves invaluable during debugging.  So the first thing
you should do is carefully save the entire message.  On plain DOS, use
the &lt;PrintScreen&gt; key to get a hard copy of the message.  On
Windows, use the clipboard to copy the message to a text editor or the
Notepad, and save it to a file.  If you can easily reproduce the crash,
try running the program after redirecting the standard error stream,
where the crash dump is printed, to a file, e.g. like this:

<pre>  redir -e crash.txt myprog [arguments to the program go here]
</pre>

<p>(here I used the <code>redir</code> program supplied with DJGPP; the <code>-e</code>
switch tells it to redirect the standard error stream to the named
file). 
Redirecting the standard error stream to a file has an
additional advantage of printing the entire call frame traceback, even
if it is very long, whereas when writing to the screen, the DJGPP exit
code limits the number of printed stack frames so that the crash message
won't scroll off the screen.

<p>After you've saved the crash message, look at the name of the crashed
program, usually printed on the 4th line.  Knowing which program crashed
is important when one program calls another, like if you run a program
from <small>RHIDE</small>.  Without this step, you might erroneously try to debug
the wrong program.  (If the program name is garbled, or if
<code>&lt;??UNKNOWN??&gt;</code> is printed in its stead, it means the program
crashed inside the startup code.)

<p>The next step in the debugging is to find out where in the code did the
program crash.  The <code>SYMIFY</code> program will help you translate the
call frame traceback, which is the last portion of the crash message,
into a list of function names, source files and line numbers which
describe the sequence of function calls that led to the crash.  The
top-most line in the call frame traceback is the place where the program
crashed, the one below it is the place that called the function which
crashed, etc.  The last line will usually be in the startup code, in a
function called <code>__crt1_startup</code>, but if the screen is too small to
print the entire traceback without scrolling, the traceback will be
truncated before it gets to the startup.  See <a href="#Crash%20traceback">how to use <code>SYMIFY</code></a>, for more details about the
call frame traceback and <code>SYMIFY</code> usage.

<p>If you compiled your program without the <code>-g</code> switch, or if you
stripped the debugging symbols (e.g., using the <code>-s</code> linker
switch), running <code>SYMIFY</code> will just repeat the addresses instead of
translating them to function names and source file info.  You will have
to rebuild the program with <code>-g</code> and without <code>-s</code>, before you
continue.

<p>Next, you need to get an idea about the cause of the crash.  To this
end, look at the first two lines of the crash message.  There you will
find a description of the type of the crash, like this:

<pre> Exiting due to signal SIGSEGV
 Page Fault at eip=00008e89, error=0004
</pre>

<p>(the actual text in your case will be different).  The following table
lists common causes for each type of crash:

<dl>
<dt><code>Page Fault</code>
<dd>This usually means the program tried to access some data via a NULL or
an uninitialized pointer.  A NULL pointer is a pointer which holds an
address that is zero; it can come from a failed call to <code>malloc</code>
(did your code check for that?).  An uninitialized pointer holds some
random garbage value; it can come from a missing call to <code>malloc</code>.

<p>The error code (<code>error=0004</code> in the example above) will usually be
either 4 or 6.  The former means that the program tried to read (take
a value from) the invalid address, the latter means the program tried to
write (change the stored value) there.

<p>Sometimes, you might see a somehwat different format of a <code>Page
Fault</code> message:

<pre> Page Fault cr2=10000000 at eip e75; flags=6
 eax=00000030 ebx=00000000 ecx=0000000c edx=00000000
 esi=0001a44a edi=00000000 ebp=00000000 esp=00002672
 cs=18 ds=38 es=af fs=0 gs=0 ss=20 error=0002
</pre>

<p>This message comes from CWSDPMI, which could happen when some crucial
data structure in the low-level library code becomes trashed.  The value
in <code>cr2</code> is the address which caused the <code>Page Fault</code>
exception.  In the example above, this address is 0x10000000, and since
this is exactly the base address of the DJGPP program under CWSDPMI, it
means the program dereferenced a NULL pointer.

<p>If the message says <code>Page Fault in RMCB</code>, then it usually means
that the program installed an interrupt handler or a real-mode callback
(a.k.a. RMCB), but failed to lock all the memory accessed by the
handler or functions it calls.  See <a href="#HW%20Int%20pitfalls">installing hardware interrupt handlers</a>, for more about this.  It also might mean that a program
failed to unhook some interrupt before it exited.

<br><dt><code>General Protection Fault</code>
<dd>This can be caused by a variety of reasons:

<ul>
<li>use of an uninitialized or a garbled pointer (beyond the limit of the DS
segment printed at the time of crash);

<li>attempt to access memory using an invalid selector, e.g., a selector
whose privilege level is zero from a DJGPP program which runs at
privilege level 3.  (The lower 2 bits of a slector are its privilege
level.)

<p>In this case, the GPF will be accompanied by an error code, like this:

<pre> General Protection Fault at eip=000020bc, error=0104
</pre>

<p>The error code is actually the selector that the program tried to use,
in this case 104h; its low 2 bits are 00, so this is a ring-0 selector.

</p><li>overwriting the stack, e.g. by writing (assigning values) to array
elements beyond the array limits, or due to incorrect argument list
passed to a function, like passing a pointer to an <code>int</code> to a
function that expects a pointer to an <code>double</code>, or passing buffers
to a library function without sufficient space to hold the results;

<li>stack overflow. 
</ul>

<p>Overwriting the stack frame can usually be detected by looking at the
values of the <small>EBP</small> and <small>ESP</small> registers, printed right below the
first two lines.  Normally, <small>ESP</small> is <em>slightly smaller</em> than
<small>EBP</small>, smaller than the limit of the <small>SS</small> segment, and usually
<em>larger</em> than <small>EIP</small><a rel=footnote href="#fn-21"><sup>21</sup></a>; anything else is a clear sign of a stack being overrun or
overwritten.  In particular, if <small>ESP</small> is valid, but <small>EBP</small> is not,
it usually means that the stack was overwritten.  In some cases,
<small>EBP</small>'s value might look like a chunk of text, like 0x33313331 (the
string <code>1313</code>, after swapping the bytes due to the fact that x86 is
a little-endian machine).

<p>How do you know whether the values of <small>ESP</small> and <small>EBP</small> are valid? 
To help you, DJGPP v2.02 and later prints the valid limits of the
application stack, like this:

<pre>App stack: [000afb50..0002fb50]  Exceptn stack: [0002fa2c..0002daec]
</pre>

<p>(The second range of values, for the "Exceptn stack", shows the
8KB-long stack used by the library for processing hardware exceptions,
because the normal application stack might be invalid when an exception
happens.)

<p>Another tell-tale sign of an overrun stack frame is that the symified
traceback points to a line where the function returns, or to its closing
brace.  That's because, when a program overruns the stack, the return
address saved there gets overwritten by a random value, and the program
crashes when the offending function tries to return to an invalid
address.

<p>Suspect a stack overflow if the <small>EBP</small> and <small>ESP</small> values are close
to one another, but both very low (the stack grows <em>downwards</em>) and
outside the valid stack limits printed below the registers' dump, or
if the call frame traceback includes many levels, which is a sign of a
deep recursion.

<p>Another sign of a stack overflow is when the traceback points to some
internal library structure, like <code>__djgpp_exception_table</code>, or if
the <small>SS</small> selector is marked as <code>invalid</code> in the crash message.

<p>Stubediting the program to enlarge its stack size might solve problems
with stack overflow (but <strong>not</strong> when the stack is being
overwritten as described above).  See <a href="#Stack%20size">changing stack size</a>, for a description of how
to enlarge the stack.  If you use large automatic arrays, an alternative
to stubediting is to make the array dimensions smaller, or make the
array global, or allocate it at run time using <code>malloc</code>.

<p>Note that, unlike in the cases, described above, where the stack was
overwritten, stack overflow usually manifests itself by <strong>both</strong>
<small>ESP</small> and <small>EBP</small> being invalid (outside the valid limits printed by
the crashed program).

<br><dt><code>Stack Fault</code>
<dd>Usually means a stack overflow, but can also happen if your code
overruns the stack frame (see above).

<br><dt><code>Floating Point exception</code>
<dt><code>Coprocessor overrun</code>
<dt><code>Overflow</code>
<dt><code>Division by Zero</code>
<dd>These (and some additional) messages, printed when the program crashes
due to signal <code>SIGFPE</code>, mean some error in floating-point
computations, like division by zero or overflow.  Sometimes such errors
happen when an <code>int</code> is passed to a function that expects a
<code>float</code> or a <code>double</code>.

<br><dt><code>Cannot continue from exception, exiting due to signal 0123</code>
<br><dt><code>Cannot continue from exception, exiting due to signal SIGSEGV</code>
<dd>This message is printed if your program installed a handler for a fatal
signal such as <code>SIGSEGV</code> (0123 in hex is the numeric code of
<code>SIGSEGV</code>; see the header <code>signal.h</code> for the other codes), and
that handler attempted to return.  This is not allowed, since returning
to the locus of the exception will just trigger the same exception again
and again, so the DJGPP signal-handling machinery aborts the program
after printing this message.

<p>If you indeed wanted <code>SIGSEGV</code> to be generated in that case, the
way to solve such problems is to modify your signal handler so that it
calls either <code>exit</code> or <code>longjmp</code>.  If <code>SIGSEGV</code> should
not have been triggered, debug this as described below.

<br><dt><code>Invalid TSS in RMCB</code>
<dd>This usually means that a program failed to uninstall its interrupt
handler or RMCB when it exited.  If you are using DJGPP v2.0, one case
where this happens is when a nested program exits by calling
<code>abort</code>: v2.0 had a bug in its library whereby calling <code>abort</code>
would bypass the cleanup code that restored the keyboard interrupt
hooked by the DJGPP startup code; v2.01 solves this bug.

<p>Using the <code>itimer</code> facility in v2.01 programs can also cause such
crashes if the program exits abnormally, or doesn't disable the timer
before it exits. The exit code in DJGPP v2.02 and later makes sure the
original timer interrupt is always restored.

<br><dt><code>Double Fault</code>
<dd>If this message appears when you run your program under CWSDPR0 and
press the Interrupt key (<kbd>Ctrl-&lt;C&gt;</kbd> or <kbd>Ctrl-&lt;BREAK&gt;</kbd>)
or the QUIT key (<kbd>Ctrl-&lt;\&gt;</kbd>), then this is expected behavior
(the <code>SIGINT</code> generation works by invalidating the <small>DS/SS</small>
selector, but since CWSDPR0 doesn't switch stacks on exceptions, there's
no place to put the exception frame for the exception this triggers, so
the program double faults and bails out).  Otherwise, treat this as
<code>Page Fault</code>.

<br><dt><code>Control-Break Pressed</code>
<dt><code>Control-C Pressed</code>
<dt><code>INTR key Pressed</code>
<dt><code>QUIT key Pressed</code>
<dd>These are not real crashes, but are listed here for completeness.  They
are printed when <kbd>Ctrl-&lt;BREAK&gt;</kbd> or the Interrupt key (by
default, <kbd>Ctrl-&lt;C&gt;</kbd>) is pressed, which by default abort the
program due to signal <code>SIGINT</code>.  The QUIT key (by default,
<kbd>Ctrl-&lt;\&gt;</kbd>) generates the <code>SIGQUIT</code> signal which by
default is ignored, but some programs set it to abort the program as
well. 
</dl>

<p>If you are lucky, and the crash happened inside your function (as
opposed to some library function), then the above info and the symified
call frame traceback should almost immediately suggest where's the bug. 
You need to analyze the source line corresponding to the top-most
<small>EIP</small> in the call frame traceback, and look for the variable(s) that
could provide one of the reasons listed above.  If you cannot figure it
out by looking at the source code, run the program under a debugger
until it gets to the point of the crash, then examine the variables
involved in the crashed computation, to find those which trigger the
problem.  Finally, use the debugger to find out how did those variables
come to get those buggy values.

<p>People which are less lucky have their programs crash inside library
functions for which <code>SYMIFY</code> will only print their names, since the
libraries are usually compiled without the <code>-g</code> switch.  You have
several possible ways to debug these cases:

<ul>
<li>Begin with the last call frame that <code>SYMIFY</code> succeeded to convert
to a pointer to a line number in a source file.  This line should be a
call to some function in some library you used to link your program. 
Re-read the docs for that function and examine all the arguments you are
passing to it under a debugger, looking for variables that could cause
the particular type of crash you have on your hands, as described above.

<li>Link your program against a version of the library that includes the
debug info.  For example, you can get the sources of the library and
recompile it with the <code>-g</code> compiler switch.  After re-linking the
program, cause it to crash and run <code>SYMIFY</code> to get a full
description of the place where it dies.

<li>A variation of the previous technique is to paste into your program the
source of the library function(s) whose names you see in the symified
traceback, and recompile your program with <code>-g</code> switch.  Then run
your program again, and when it crashes, <code>SYMIFY</code> should be able to
find the line number info for the entire traceback.

<li>If you cannot get hold of the sources for the library, you could still
use assembly-level commands of the debugger to find out the reason for
the crash.  Here's how:

<ul>
<li>Load the program into a debugger.

<li>Display the instruction at <small>EIP</small> whose value is printed on the second
line of the crash message.  For example, with GDB, use the <kbd>x/i
eip-value</kbd> command.

<li>Find out which registers are relevant to the crash.  For example, if the
instruction dereferences a pointer, the register that holds that pointer
is one possible candidate for scrutiny.

<li>Look at the values for the relevant registers as printed in the crash
message, and find the register(s) which hold abnormal values.  Common
cases include:

<ol type=a start=1>
<li>A pointer whose value is below 4096 (1000 hex), or above the limit of
the <small>DS</small> segment.  (The limit is printed as part of the crash
message.)

<li>An index of an array element or an offset into a struct whose value is
negative, or beyond the last array element, or more than the offset of
the last struct member.

<li>A linear address of a buffer in conventional memory whose value is more
than 10FFFFh, or an offset into the transfer buffer which is larger than
the transfer buffer size (16K by default).
</ol>

<li>Once you've found the register whose value is abnormal, find out what
variables in your program caused that abnormal value, e.g. by stepping
through the machine code from the point where your code called the
library function. 
</ul>
</ul>

<p><hr>
Node:&nbsp;<a name="Debug%20graphics">Debug graphics</a>,
Next:&nbsp;<a rel=next href="#GDB%20and%20C++%20source">GDB and C++ source</a>,
Previous:&nbsp;<a rel=previous href="#Crash%20dump">Crash dump</a>,
Up:&nbsp;<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>12.3 How to debug a graphics program</h2>

<p><em><strong>Q</strong>: How can I debug a graphics program?  The debugger runs my program
fine, but when a breakpoint is hit with the screen in a graphics mode I
can't read the text printed by the debugger.</em>

<br><p>
<p><strong>A</strong>:  You can redirect the debugger output to your printer, like this:

<pre> gdb myprog &gt; prn
</pre>

<p>This will only work if the program itself doesn't write to stdout
(graphics programs usually don't); otherwise the debugger output will
get mixed up with your program's output.  If you use <code>GDB</code> 4.18 or
later, you can work around this by redirecting the standard output of
the debugged program to a different file or device as part of the
<code>run</code> command, like this:

<pre> run &gt; foo.out
</pre>

<p>Beginning with version 4.18, the ported <code>GDB</code> writes its output to
the screen in a way that works even in graphics modes, provided that the
system BIOS knows about the specific graphics mode your program uses.

<p><small>RHIDE</small> and <code>RHGDB</code> support debugging graphics programs by
switching between debugger's and program's screen, so you can use
<small>RHIDE</small>'s built-in debugger or the stand-alone <code>RHGDB</code> subset. 
This support doesn't work for all video modes, but the standard VGA
modes and VESA modes are supported.  If you debug with <small>RHIDE</small> on
Windows, switch your <small>RHIDE</small> session to full-screen before starting
the debug session, otherwise Windows will cause problems when <small>RHIDE</small>
switches between the program's graphics screen and <small>RHIDE</small>'s own text
screen.

<p>The FSDB debugger can switch between the application screen and the
debugger screen, so you might use it, at a price of working with a
low-level debugger.  Press <kbd>Alt-&lt;F5&gt;</kbd> to switch between the two
screens.  Stock FSDB as distributed with DJGPP can only do this with
text screens, but a modified version of <a href="ftp://ftp.delorie.com/pub/djgpp/contrib/gnudebug.zip">FSDB with graphics support</a> is available that knows
about many graphics modes.  The same distribution can also be found
<a href="ftp://x2ftp.oulu.fi/pub/msdos/programming/djgpp2/gnudebug.zip">on the Oulu repository</a>.

<p>As yet another possibility, consider using the <code>MSHELL</code> program which
will redirect I/O from any program to the monochrome monitor at the BIOS
level, so you can use it even with GDB.  <code>MSHELL</code> was written by <a href="mailto:dj@delorie.com">DJ Delorie</a>
and is available <a href="ftp://ftp.delorie.com/pub/djgpp/ofc/mshell10.zip">from DJ's server</a>.  Be sure that you don't
have some other TSR installed that catches screen writes and bypasses
the BIOS functions, or else <code>MSHELL</code> won't help you.  For example,
changing the code page (with the DOS <code>CHCP</code> or <code>MODE</code>
commands) might do this.

<p><small>RHIDE</small> also supports dual-monitor systems for debugging, it allows
you to use the monochrome monitor for interface with the debugger, while
leaving the color screen for your program's display, with no need to
swap between them.

<p>If you have any problems with dual-monitor support, in particular with
<small>RHIDE</small>, make sure your memory manager doesn't grab the <code>B000</code>
segment for its own purposes.  This region should be available for the
mono adapter, or your system might crash when you try using it.

<p>Another way to redirect the output of a program to a monochrome monitor
is by using the MDA display driver from BinaryInfosys.  It is a true DOS
device driver, and so can be opened as a file--handy for sending debug
info, for example.  This driver is free and is available from
<a href="http://www.binaryinfosys.com/bis/files/mda.exe">BinaryInfosys' home page</a>.

<p><hr>
Node:&nbsp;<a name="GDB%20and%20C++%20source">GDB and C++ source</a>,
Next:&nbsp;<a rel=next href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>,
Previous:&nbsp;<a rel=previous href="#Debug%20graphics">Debug graphics</a>,
Up:&nbsp;<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>12.4 GDB finds only <code>.cc</code> source</h2>

<p><em><strong>Q</strong>: When I try to debug my C<tt>++</tt> programs, the debugger claims it can't
find the source file:</em>

<br><p>
<pre> file.cc: No such file or directory.
</pre>

<p><em>The source file <strong>is</strong> there, but it's called
<code>file.cpp</code>, not <code>file.cc.</code>  Why does this happen?</em>

<p><strong>A</strong>:  It's a bug in GCC 2.7.2.1 and earlier.  It erroneously assumes
that a C<tt>++</tt> source always has a <code>.cc</code> extension.  If you are using
GCC 2.7.2.1 or earlier, you'd better call your C<tt>++</tt> files <code>*.cc</code>. 
If this is unacceptable, you can work around this bug by invoking
<code>cc1plus</code> and the assembler pass manually.  The bug in GCC
manifests itself in that <code>cc1plus</code> is called with the option
<code>-dumpbase&nbsp;file.cc.</code>  If you replace this with
<code>-dumpbase&nbsp;file.cpp</code> (or whatever your extension is), the
debugger will happily find your sources.

<p>GCC 2.8.0 and later corrects this bug, so upgrading is also a solution.

<p><hr>
Node:&nbsp;<a name="C++%20classes%20in%20GDB">C++ classes in GDB</a>,
Next:&nbsp;<a rel=next href="#Included%20source">Included source</a>,
Previous:&nbsp;<a rel=previous href="#GDB%20and%20C++%20source">GDB and C++ source</a>,
Up:&nbsp;<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>12.5 Can GDB print class members?</h2>

<p><em><strong>Q</strong>: It seems that GDB doesn't recognize C<tt>++</tt> class members by their
original, unmangled names.  Do I really need to figure out the mangled
names of all my class variables and methods to be able to debug them?</em>

<br><p>
<p><strong>A</strong>: No, you don't.  GDB <em>does</em> allow you to use the original
names, it's just that it usually treats the <code>::</code> in their names as
word delimiters.  Include the name of the method or a class static
variable in single quotes, and GDB will recognize them as a single word. 
For example, if your class <code>CMPForward</code> has a method named
<code>go</code> which you need to put a breakpoint in, use the following
command:

<pre>  breakpoint 'CMPForward::go'
</pre>

<p>Other <code>GDB</code> features that might be useful in this context are the
various demangling options, like <code>set print demangle</code>, <code>set
demangle-style</code> etc.; look them up in the GDB on-line docs.

<p>However, there are some cases where you won't be able to get GDB to
demangle C<tt>++</tt> function names no matter how hard you try.  This is due
to a lack of sufficient debugging information in the COFF debug data
format.  There's simply not enough info there for GDB to detect the
source language and support some C<tt>++</tt>-specific features.  So, in some
case, you <em>will</em> need to use mangled names.  If you need a
description of the GNU style of mangling C<tt>++</tt> names (so you could
mangle them yourself), look in the GDB or Libg++ source distribution, in
the libiberty directory, for a file named <code>cplus-demangle.c</code>.  You
can also use the <code>cxxfilt</code> utility, supplied as part of the GNU
Binutils package, to demangle the names and verify that your mangling is
correct.  Note that, as the debugger built into <small>RHIDE</small> uses GDB
code, it will also sometimes have such problems with debugging C<tt>++</tt>
programs.

<p>If you really need full C<tt>++</tt> support in DJGPP, you will have to use
the stabs debugging support.  GCC 2.8.0 and later are distributed with
built-in stabs support, so, if you need this, upgrade and compile your
C<tt>++</tt> programs with <code>-gstabs+</code>.  Caveat emptor: <code>FSDB</code>,
<code>EDEBUG32</code> and <code>SYMIFY</code> don't understand the stabs format,
so you will have to compile with <code>-gcoff</code> option to use these
utilities (<small>RHIDE</small> distribution includes a utility called
<code>gsymify</code> that can be used instead of <code>SYMIFY</code> with stabs
debugging info).

<p><hr>
Node:&nbsp;<a name="Included%20source">Included source</a>,
Next:&nbsp;<a rel=next href="#Static%20vars">Static vars</a>,
Previous:&nbsp;<a rel=previous href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>,
Up:&nbsp;<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>12.6 GDB cannot list source that was #include'd</h2>

<p><em><strong>Q</strong>: My source file #include's another source file, but I cannot set a
breakpoint in that included code, because GDB says there is no such
line, or no such source file<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: I cannot debug code produced by Flex, or Bison, or F2C, because
GDB somehow messes up all the source file and line number info!</em>

<br><p>
<p><em><strong>Q</strong>: Why can't I step with a debugger into an inline function defined
in a header file?</em>

<br><p>
<p><em><strong>Q</strong>: Why can't I trace into a function defined in an <code>#include</code>d
source file?</em>

<br><p>
<p><strong>A</strong>:  This is a genuine limitation of the COFF format used by DJGPP. 
It can only handle a single source file for a given object file.  It
does include correct line numbers, but the name of the source file is
wrong, so setting breakpoints in such files or tracing into functions
defined in such files just doesn't work.  Using stabs debugging info
(see the previous section) doesn't have this limitation, so upgrade to
GCC 2.8.0 or later and recompile your program with the <code>-gstabs+</code>
switch.

<p>For source files that include other source files, you can work around
this even with COFF debugging, by just inserting the included source
with your editor while you debug the program.  For code produced by
other programs, like <code>F2C</code> or <code>Bison</code>, <a href="mailto:D.J.Murdoch@bristol.ac.uk">Duncan Murdoch</a> suggests a work-around: to copy the original
source file (<code>.y</code>, <code>.f</code>, etc.) over the generated C file.  For
example, here's how you should go about debugging a Fortran program
<code>myprog.f</code> using <code>GCC</code>, <code>F2C</code> and <code>GDB</code>:

<ol type=1 start=1>
</p><li>Run <code>f2c</code> with the <code>-g</code> option:

<pre> f2c -g myprog.f
</pre>

<li>Compile using <code>gcc</code> with the <code>-g</code> option:

<pre> gcc -g myprog.c -o myprog.exe -lf2c -lm
</pre>

<li>Copy the original Fortran source over the generated C:

<pre> copy myprog.f myprog.c
</pre>

<li>Debug with GDB:

<pre> gdb myprog.exe
</pre>

</ol>

<p><hr>
Node:&nbsp;<a name="Static%20vars">Static vars</a>,
Next:&nbsp;<a rel=next href="#Bool%20vars">Bool vars</a>,
Previous:&nbsp;<a rel=previous href="#Included%20source">Included source</a>,
Up:&nbsp;<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>12.7 GDB cannot display or set static uninitialized variables</h2>

<p><em><strong>Q</strong>: Why can't I set or display the values of some static variables in
my program?</em>

<br><p>
<p><strong>A</strong>:  This seems to be a limitation of the COFF debugging information
emitted by GCC by default: the debuggers cannot display or set the value
of an uninitialized static variables (those who are in the <code>.bss</code>
section of the program).  A work-around is to initialize these
variables, which causes the linker to put them into the <code>.data</code>
section.  Another solution is to use the stabs debugging support; latest
versions of GCC include this support, so upgrade and use
<code>-gstabs+</code> instead of <code>-g</code>.

<p><hr>
Node:&nbsp;<a name="Bool%20vars">Bool vars</a>,
Next:&nbsp;<a rel=next href="#Complex%20vars">Complex vars</a>,
Previous:&nbsp;<a rel=previous href="#Static%20vars">Static vars</a>,
Up:&nbsp;<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>12.8 Debugging bool data type</h2>

<p><em><strong>Q</strong>: How can I watch a <code>bool</code> variable with <small>RHIDE</small> or GDB? 
When I try, the debugger always displays <code>void</code><small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  With the default COFF debugging format, you can't: it doesn't
support the <code>bool</code> data type.  You have to switch to stabs
debugging format; see <a href="#stabs%20debugging">switching to stabs</a>, for details.

<p><hr>
Node:&nbsp;<a name="Complex%20vars">Complex vars</a>,
Next:&nbsp;<a rel=next href="#Debugging%20woes">Debugging woes</a>,
Previous:&nbsp;<a rel=previous href="#Bool%20vars">Bool vars</a>,
Up:&nbsp;<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>12.9 Debugging the complex data type</h2>

<p><em><strong>Q</strong>: I cannot display in GDB the values of my variables of type
__complex__<small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  Current versions of GDB don't support <code>__complex__</code>
variables.  A work-around is to manually cast them to a pair of
numbers.  For example, to access the real and imaginary part of a
variable <code>foo</code> declared <code>__complex__ double</code>, do this:

<pre> (gdb) print *(double *)&amp;foo
 $1 = 4
 (gdb) print *((double *)&amp;foo + 1)
 $2 = 6
</pre>

<p><hr>
Node:&nbsp;<a name="Debugging%20woes">Debugging woes</a>,
Previous:&nbsp;<a rel=previous href="#Complex%20vars">Complex vars</a>,
Up:&nbsp;<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>12.10 Debuggers choke on some programs <small>...</small></h2>

<p><em><strong>Q</strong>: I cannot debug Emacs (or any program that requests raw keyboard
input): when I press Ctrl-C, any debugger I tried reported SIGINT.  But
I cannot operate the debugged program without Ctrl-C (in Emacs, it's
necessary to exit the editor)!</em>

<br><p>
<p><em><strong>Q</strong>: I cannot debug any program which catches signals!!??</em>

<br><p>
<p><em><strong>Q</strong>: I compiled my program with <code>-pg</code> switch, and now I cannot
debug it<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: When my program hits a breakpoint in GDB, the debugger reports
SIGSEGV, but only under Windows<small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  Versions of DJGPP before v2.03 had a few grave limitations in
debugging programs which use interrupts or exceptions.  Programs
compiled for profiling would crash under a debugger with SIGSEGV or a
GPF, with no addresses that <code>symify</code> can identify; programs using
<code>alarm</code> or <code>setitimer</code> couldn't be debugged, either.  You
couldn't hook the keyboard interrupt in a debugged program, and you
couldn't debug a program which uses floating point on a machine without
FP hardware (unless you use <code>WMEMU</code> as your emulator, but even
<code>WMEMU</code> doesn't solve all the problems).  The reason for all these
problems was that any exceptions or signals that happen when your
program runs under a debugger would be caught by the debugger instead,
they won't get passed to the debuggee, and would usually terminate the
debuggee.

<p>This is no more the case.  DJGPP v2.03 and later have a much better
debug support, so all of the problems mentioned above are gone.  The
DJGPP port of GDB 4.18, released in August 1999, is based on the
debugging support from DJGPP v2.03 and thus doesn't have most of these
problems anymore.  Latest versions of <small>RHIDE</small> also use this improved
debugging support, as do the versions of <code>edebug32</code> and
<code>fsdb</code> from DJGPP v2.03 or later.

<p>Some problems still remain, though, even in v2.03: if you use the stock
<code>emu387.dxe</code> FP emulator while debugging floating-point programs or
debug programs that call <code>alarm</code> or <code>setitimer</code> library
functions, the program will sometimes crash with <code>SIGSEGV</code>.  This
is likely to change in the future.

<p>Beginning with version 1.1, the debugger built into <small>RHIDE</small> supports
debugging programs that hook keyboard and/or timer hardware interrupts,
so if you need e.g. to debug programs built with the Allegro library or
programs compiled for profiling, you can use <small>RHIDE</small>.

<p>Another known problem is that GDB GP Faults when the program hits a
breakpoint under Windows 3.X (Windows 9X doesn't have this problem). 
This is because the breakpoint instruction causes a software interrupt
(as opposed to an exception) under Windows 3.X, and the DJGPP debug
support currently only catches debug exceptions.  The only work-around
is to use the <em>hardware</em> breakpoints (which use the special debug
registers of the i386 and higher CPUs, and which do work with DJGPP on
Windows 3), and never have more than 4 of them active at the same time. 
<code>FSDB</code> will automatically use the hardware breakpoints for the
first 4 breakpoints (so it works on Windows 3.X unless you set more than
4 breakpoints simultaneously), but with GDB, you will have to explicitly
use the <code>hbreak</code> and <code>thbreak</code> (instead of <code>break</code> and
<code>tbreak</code>) commands which set hardware breakpoints.  This works with
DJGPP ports of GDB 4.16 and later.  Note that GDB and FSDB use ordinary
breakpoints to implement single-stepping with the <code>step</code>,
<code>next</code>, &lt;F7&gt;, &lt;F8&gt; and similar commands, so you can't use
these on Windows 3.X; use temporary hardware breakpoints instead.  The
above is also true for watchpoints (which watch for variables to change
value): you need to use hardware watchpoints with GDB (the total number
of hardware breakpoints and watchpoints cannot exceed 4).  Same
considerations apply to the debugger built into <small>RHIDE</small> under Windows
3.X.

<p><hr>
Node:&nbsp;<a name="Profiling">Profiling</a>,
Next:&nbsp;<a rel=next href="#Performance">Performance</a>,
Previous:&nbsp;<a rel=previous href="#Debugging">Debugging</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>13 Profiling DJGPP Programs</h1>

<p>This chapter explains how to optimize your program for speed using the
profiler, and discusses some problems you might have with it.

<ul>
<li><a href="#How%20to%20profile">How to profile</a>:            What should you do to profile a program. 
<li><a href="#Profiled%20crash">Profiled crash</a>:            Programs compiled with -pg crash. 
<li><a href="#Garbled%20profile">Garbled profile</a>:           Gprof produces garbage. 
<li><a href="#IO%20bound%20programs">IO bound programs</a>:         How their profiles look. 
<li><a href="#No%20profile">No profile</a>:                Where is the profile? 
</ul>

<p><hr>
Node:&nbsp;<a name="How%20to%20profile">How to profile</a>,
Next:&nbsp;<a rel=next href="#Profiled%20crash">Profiled crash</a>,
Previous:&nbsp;<a rel=previous href="#Profiling">Profiling</a>,
Up:&nbsp;<a rel=up href="#Profiling">Profiling</a>
<br>

<h2>13.1 How to profile a DJGPP program</h2>

<p><em><strong>Q</strong>: How can I profile my program to see where it spends most of its
run time?</em>

<br><p>
<p><strong>A</strong>:  DJGPP includes a profiling facility.  To use it, compile and link
with <code>-pg</code> option, run your program as you usually would, then run a
program called <code>gprof</code>:

<pre> gprof myprog.exe
</pre>

<p>(change <code>myprog.exe</code> to whatever name your program is).  This will
print an execution profile.  You can now look at the profile and try to
optimize the functions which take a large proportion of the execution
time.

<p><code>Gprof</code> is further documented in the Binutils docs as part of the
<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/bnu281b.zip">GNU Binutils distribution</a>.

<p><hr>
Node:&nbsp;<a name="Profiled%20crash">Profiled crash</a>,
Next:&nbsp;<a rel=next href="#Garbled%20profile">Garbled profile</a>,
Previous:&nbsp;<a rel=previous href="#How%20to%20profile">How to profile</a>,
Up:&nbsp;<a rel=up href="#Profiling">Profiling</a>
<br>

<h2>13.2 Programs compiled with -pg crash when run</h2>

<p><em><strong>Q</strong>: I cannot profile my program: when I compile it with -pg, it
crashes or wedges my machine!</em>

<br><p>
<p><em><strong>Q</strong>: When I compile my program with -pg, it runs much slower.  Does
the profiling code have such a huge overhead?</em>

<br><p>
<p><em><strong>Q</strong>: I profiled my program, but the profile contains an entry
<code>_mono_putc</code> which I don't use, and which eats up about 70% of
execution time!</em>

<br><p>
<p><em><strong>Q</strong>: When I run a profiled program on my dual (VGA+MDA) display
system, the mono screen shows loads of meaningless numbers.  Is there a
way to stop this behavior?</em>

<br><p>
<p><strong>A</strong>: DJGPP v2.01 has a bug in one of its library functions which is
linked into your program when it is compiled with the <code>-pg</code> option. 
The bug is that the profiled program tries to write to the secondary
mono screen, which caused the profiled programs to crash in many
environments, in particular when a memory manager remaps some of the
high memory.  On systems which actually have the additional mono
display, the profiled programs won't crash, but would run significantly
slower and print debugging info on the mono display.

<p>A patch which corrects this bug was posted to the DJGPP News group; you
can find it by searching the DJGPP mail archives.  DJGPP v2.02 and later
includes a fixed version of the offending function, so upgrade to the
latest version.  A work-around is to run the program compiled with
<code>-pg</code> on vanilla DOS configuration (no memory managers such as
EMM386 or QEMM, and no Windows).  However, when you use this
work-around, your program might run much slower, although the profile
that you get should not be affected.

<p><hr>
Node:&nbsp;<a name="Garbled%20profile">Garbled profile</a>,
Next:&nbsp;<a rel=next href="#IO%20bound%20programs">IO bound programs</a>,
Previous:&nbsp;<a rel=previous href="#Profiled%20crash">Profiled crash</a>,
Up:&nbsp;<a rel=up href="#Profiling">Profiling</a>
<br>

<h2>13.3 Gprof produces garbled profile</h2>

<p><em><strong>Q</strong>: Whenever I compile my programs with <code>-pg</code>, the profile
produced by <code>Gprof</code> shows that 100% of the run time is spent in
a single function, and the rest of the code gets 0% of time.  Huh??</em>

<br><p>
<p><strong>A</strong>:  This is due to a bug in the library shipped with DJGPP v2.02:
the module which handles timers works incorrectly.  (The same bug is
responsible for problems with library functions <code>setitimer</code> and
<code>alarm</code>.)  The solution is to upgrade to DJGPP v2.03 where these
bugs are solved.  Relink your program with the v2.03 library, then rerun
it, and <code>Gprof</code> will show reasonable results.

<p><hr>
Node:&nbsp;<a name="IO%20bound%20programs">IO bound programs</a>,
Next:&nbsp;<a rel=next href="#No%20profile">No profile</a>,
Previous:&nbsp;<a rel=previous href="#Garbled%20profile">Garbled profile</a>,
Up:&nbsp;<a rel=up href="#Profiling">Profiling</a>
<br>

<h2>13.4 Why is <code>__dpmi_int</code> so heavily used?</h2>

<p><em><strong>Q</strong>: I've profiled my program and found that the routine which takes
60% of the running time is some obscure library function called
<code>__dpmi_int</code>.  Can't you guys get your library right?</em>

<br><p>
<p><em><strong>Q</strong>: What is the <code>__dj_movedata</code> function for, and why does it
take such a large proportion of my program's running time?</em>

<br><p>
<p><strong>A</strong>:  Does your program use I/O or other real-mode services (like BIOS)
extensively?  All those services are invoked through a DPMI function call
which is issued by <code>__dpmi_int</code>.  The sibling function
<code>__dj_movedata</code> moves data between the <dfn>transfer buffer</dfn>
(see <a href="#Transfer%20Buffer">what is the transfer buffer</a>) and your program, e.g., when it reads or writes disk files. 
So what the profile really says is that the running time of your program
is governed by time-consuming operations such as disk I/O.

<p><hr>
Node:&nbsp;<a name="No%20profile">No profile</a>,
Previous:&nbsp;<a rel=previous href="#IO%20bound%20programs">IO bound programs</a>,
Up:&nbsp;<a rel=up href="#Profiling">Profiling</a>
<br>

<h2>13.5 <code>gprof</code> doesn't produce output</h2>

<p><em><strong>Q</strong>: Every time I run the profiler it says "gmon.out: no such file or
directory" and no profile is produced.  What is this <code>gmon.out</code>
file, and why won't <code>gprof</code> compute the profile?</em>

<br><p>
<p><strong>A</strong>:  <code>gmon.out</code> is the file with raw execution counts and timing
info that <code>gprof</code> needs to produce the profile.  The file is
written by the profiled program when it exits.  If the file isn't
created, it might be because of one of the following reasons:

<ul>
<li>You didn't compile and/or link your program with the <code>-pg</code> switch. 
Note that <strong>both</strong> compilation and link need to be done with
<code>-pg</code>, because the functions that actually write the results to
<code>gmon.out</code> are only linked in when GCC sees <code>-pg</code> on the link
command line.

<li>You have called <code>ld.exe</code> directly to link your program and forgot
to mention the files and switches necessary for the profiled program
operation.  You should use <code>gcc</code> to link your program instead of
calling the linker directly; a <code>-pg</code> switch to <code>gcc</code> is all
that it takes to make sure that the linker will get all the necessary
arguments<a rel=footnote href="#fn-22"><sup>22</sup></a>.

<li>Your program exited abnormally.  The function which generates
<code>gmon.out</code> is registered with the <code>atexit</code> library function,
and won't be called if the program was terminated in an abnormal way. 
Make sure that your program exits with a call to <code>exit</code> library
function or with a <code>return</code> statement in your <code>main</code> function. 
For example, if your program dies with an exception or a signal, you
need to install a handler for that signal and make it call <code>exit</code>. 
</ul>

<p><hr>
Node:&nbsp;<a name="Performance">Performance</a>,
Next:&nbsp;<a rel=next href="#Memory">Memory</a>,
Previous:&nbsp;<a rel=previous href="#Profiling">Profiling</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>14 Run-time Performance of DJGPP Programs</h1>

<p>This chapter deals with issues pertinent to run-time performance of
DJGPP programs.

<ul>
<li><a href="#How%20fast">How fast</a>:                  What code quality should you expect. 
<li><a href="#Older%20is%20faster">Older is faster</a>:           Programs compiled with older compilers run faster. 
<li><a href="#Pentium">Pentium</a>:                   DJGPP programs on a Pentium. 
<li><a href="#IO%20speed">IO speed</a>:                  Is I/O <em>really</em> so slow in protected mode? 
<li><a href="#Slow-down">Slow-down</a>:                 Why could a ported program runs slower. 
</ul>

<p><hr>
Node:&nbsp;<a name="How%20fast">How fast</a>,
Next:&nbsp;<a rel=next href="#Older%20is%20faster">Older is faster</a>,
Previous:&nbsp;<a rel=previous href="#Performance">Performance</a>,
Up:&nbsp;<a rel=up href="#Performance">Performance</a>
<br>

<h2>14.1 How efficient is DJGPP-generated code?</h2>

<p><em><strong>Q</strong>: How does DJGPP compare with other DOS-based C compilers in terms of
efficiency of generated code?</em>

<br><p>
<p><em><strong>Q</strong>: Won't my program run <strong>much</strong> slower when compiled by
DJGPP, due to all those CPU cycles wasted in switches between protected
and real mode?</em>

<br><p>
<p><strong>A</strong>:  The quality of code generated by GCC with optimization turned on
(<code>-O2</code> switch to the compiler) is generally at least as good as what
you will get from top commercial products, like Borland, Microsoft and
Watcom.  Mode switches indeed impose a certain performance hit, but in
most programs it is negligibly small, because only DOS and BIOS services
require such a switch, and the majority of programs spend most of their
time doing other things.

<p>Up until version 2.95, MSVC was the only one of the commercial compilers
that used to produce code which was better than what GCC generated (by
about 25% on the average), when run on a Pentium.  However, with the
much-improved optimization technology that is now part of GCC 2.95 and
later, this gap is all but closed.  More details about this are
available on the <a href="http://www.geocities.com/SiliconValley/Vista/6552/compila.html">compiler comparison page</a>, maintained by
Salvador Eduardo Tropea.

<p><hr>
Node:&nbsp;<a name="Older%20is%20faster">Older is faster</a>,
Next:&nbsp;<a rel=next href="#Pentium">Pentium</a>,
Previous:&nbsp;<a rel=previous href="#How%20fast">How fast</a>,
Up:&nbsp;<a rel=up href="#Performance">Performance</a>
<br>

<h2>14.2 Comparing newer versions with old ones</h2>

<p><em><strong>Q</strong>: I switched to v2 and my programs now run slower than when
compiled with v1.x<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: I timed a test program and it seems that GCC 2.8.1 produces
slower executables than GCC 2.7.2.1 was, which in turn was slower than
DJGPP v1.x.  Why are we giving up so much speed as we get newer
versions?</em>

<br><p>
<p><em><strong>Q</strong>: I installed Binutils 2.8.1, and my programs are now much slower
than when they are linked with Binutils 2.7!</em>

<br><p>
<p><strong>A</strong>: In general, newer versions of GCC generate tighter, faster code,
than older versions.  Comparison between different versions of GCC shows
that they all optimize reasonably well, but it takes a different
combination of the optimization-related options to achieve the greatest
speed in each compiler version.  The default optimization options can
also change; for example, <code>--force-mem</code> is switched on by
<code>-O2</code> in 2.7.2.1; it wasn't before.  GCC offers a plethora of
optimization options which might make your code faster or slower (see
the GCC docs for a complete list); the best way to find the correct
combination for a given program is to profile and experiment.  Here are
some tips:

<ul>
<li>Compile your code using the GCC switches <code>-O2 -mpentium
-fomit-frame-pointer -ffast-math</code>.  (For PGCC and GCC version 2.95 and
later, use <code>-O6</code> instead of <code>-O2</code>.)

<li>Profile your code and check which functions are "hot spots". 
Disassemble them, or compile with <code>-S</code> (see <a href="#Assembly%20output">getting assembly listing</a>),
and examine the machine code.

<li>If the disassembly shows there aren't too many memory accesses inside
the inner loops, try adding <code>-fforce-addr</code> option.  This option
helps a lot if a couple of pointers are used heavily within a single
loop.  If there are a lot of memory references, try adding
<code>-fno-force-mem</code>, to prevent GCC from repeatedly copying variables
from memory into registers.

<li>Sometimes, <code>-fomit-frame-pointer</code> might make things worse, since it
uses stack-relative addresses which have longer encoding and could
therefore overflow the CPU cache.  So try with and without this switch.

<li>With newer versions of GCC, programs whose inner loops include many
function calls, or which are deeply recursive, could benefit from using
the <code>-mpreferred-stack-boundary=2</code> compiler option.  This causes
the compiler to relax its stack-alignment requirements that need a lot
of <code>sub esp,xx</code> instructions.  The default stack alignment is 16
bytes, unless overridden by <code>-mpreferred-stack-boundary</code>.  The
argument to this option is the power of 2 used for alignment, so 2 means
4-byte alignment; if your code uses <code>double</code> and <code>long double</code>
variables, an argument of 3 might be a better choice.

<li>Depending on the structure of your code, try different combinations of
alignment for loops (<code>-malign-loops</code>), jumps
(<code>-malign-jumps</code>), and function entry points
(<code>-malign-functions</code>).  Alignment changes can have especially
profound effects when programs are run on AMD's K6 CPU, since these CPUs
suffer significant slowdown for code aligned on 4-byte boundaries.

<li>Try adding <code>-funroll-loops</code> and <code>-funroll-all-loops</code> and
profile the effect.

<li>Try compiling with <code>-fno-strength-reduce</code>.  In some cases where GCC
is in dire need of registers, this could be a substantial win, since
strength reduction typically results in using additional registers to
replace multiplication with addition.

<li>If different time-critical functions exhibit different behavior under
some of the optimization options, try compiling them with the best
combination for each one of them. 
</ul>

<p>I'm told that the PGCC version of GCC has bugs in its optimizer which
show when you use level 7 or higher.  Until that is solved in some
future version, you are advised to stick to <code>-O6</code>.  Some
programs actually run faster when compiled with <code>-O2</code> or
<code>-O3</code>, even when compiled with PGCC, so you might try that as
well.  Several users reported that PGCC v2.95.1 tends to crash a lot
during compilation, especially with <code>-O5</code>, <code>-O6</code> and
<code>-mpentium</code> options.  (In general, PGCC version 2.95 is deemed
buggy; you are advised not to use it.)

<p>Programs which manipulate multi-dimensional arrays inside their
innermost loops can sometimes gain speed by switching from dynamically
allocated arrays to static ones.  This can speed up code because the
size of a static array is known to GCC at compile time, which allows it
to avoid dedicating a CPU register to computing offsets.  This register
is then available for general-purpose use.

<p>Another problem that is related to C<tt>++</tt> programs which manipulate
arrays happens when you fail to qualify the methods used for array
manipulation as <code>inline</code>.  Each method or function that wasn't
declared <code>inline</code> will <em>not</em> be inlined by GCC, and will incur
an overhead of a function call at run time.

<p>However, inlining only helps with small functions/methods; large inlined
functions will overflow the CPU cache and typically slow down the code
instead of speeding it up.

<p>If your CPU is AMD's K6, try upgrading to GCC 2.96 or later and use the
<code>-mcpu=k6</code> switch.  I'm told that K6-specific optimizations are
much better in these versions of GCC.

<p>A bug in the startup code distributed with DJGPP versions before v2.02
can also be a reason for slow-down.  The problem is that the runtime
stack of DJGPP programs was not guaranteed to be properly aligned.  This
usually only shows up on Windows (since CWSDPMI aligns the stack on its
own), and even then only sometimes.  But it has been reported that
switching to Binutils 2.8.1 sometimes causes such slow-down, and
switching to PGCC can reveal this problem as well.  In some cases,
restarting Windows would cause programs run at normal speed again.  If
you experience such problems too much, upgrade to v2.02.

<p><hr>
Node:&nbsp;<a name="Pentium">Pentium</a>,
Next:&nbsp;<a rel=next href="#IO%20speed">IO speed</a>,
Previous:&nbsp;<a rel=previous href="#Older%20is%20faster">Older is faster</a>,
Up:&nbsp;<a rel=up href="#Performance">Performance</a>
<br>

<h2>14.3 DJGPP programs on a Pentium</h2>

<p><em><strong>Q</strong>: Does DJGPP support Pentium-specific optimizations?</em>

<br><p>
<p><em><strong>Q</strong>: I run the same program on a 486 and on a Pentium, and it's slower
on a Pentium!!</em>

<br><p>
<p><strong>A</strong>: Beginning with version 2.95, GCC includes Pentium-specific
optimizations.  Be sure to use the <code>-mcpu=pentium</code> switch when
you optimize for Pentium or better CPUs.

<p>A program might sometimes run slower on a Pentium due to alignment
problems in DJGPP.  GCC makes assumptions about how GAS (the assembler)
handles alignment, but GAS from Binutils 2.8.1 and earlier was
configured to treat alignment in a way that's different from what
GCC assumes.  The outcome of this is that longs are word-aligned,
doubles are dword-aligned, etc.  Depending on the DJGPP version, link
order, library differences, you might get lucky (or unlucky) with a
50/50 chance to get an improper alignment.  Different CPUs have
different penalties for unaligned accesses, which may explain
differences in speed.

<p>DJGPP v2.01 had a bug in the startup code, whereby the runtime stack
isn't aligned; this could also be a reason for slow-down, especially in
programs compiled for Pentium.

<p>You might consider adding some slack static variables to induce changes
in alignment; if any of the changes suddenly cause a significant change
in the runtime performance, then alignment might be the reason.

<p>These alignment problems were finally solved in the DJGPP ports of
Binutils 2.9.1 and GCC 2.95; so if you want to get rid of these
problems, upgrade.

<p><hr>
Node:&nbsp;<a name="IO%20speed">IO speed</a>,
Next:&nbsp;<a rel=next href="#Slow-down">Slow-down</a>,
Previous:&nbsp;<a rel=previous href="#Pentium">Pentium</a>,
Up:&nbsp;<a rel=up href="#Performance">Performance</a>
<br>

<h2>14.4 I/O speed in DJGPP programs</h2>

<p><em><strong>Q</strong>: I measured the time required to read a 2 MByte file in DJGPP and in
Borland C.  It took the DJGPP program 2.5 seconds to do it, while Borland
did it in just under 2.  This is <strong>horribly</strong> slow: it's 25% slower
than Borland!</em>

<br><p>
<p><em><strong>Q</strong>: I tried to improve DJGPP I/O throughput by defining a 64KB-large
buffer for buffered I/O with a call to <code>setvbuf</code>, but that had no
effect.  Why is that?</em>

<br><p>
<p><em><strong>Q</strong>: It is obvious that disk-bound programs compiled with DJGPP will
run <strong>awfully</strong> slow, since FAT is such a lousy filesystem!</em>

<br><p>
<p><strong>A</strong>: First, I would like to point out that waiting another
0.5sec for reading a 2 MByte file isn't that bad: it is indeed
about 25% longer than you can do under DOS, but it's only half a
second<small>...</small>.  Besides, most programs read and write files which are
only a few hundreds of kilobytes, and those will suffer only a
negligible slow-down.

<p><a name="Transfer%20Buffer"></a>
Doing I/O from protected-mode programs requires that low-level library
functions move the data between the extended memory and low memory under
the 1 MByte mark, where real-mode DOS can get at it.  That area in the
low memory is called the <dfn>transfer buffer</dfn><a rel=footnote href="#fn-23"><sup>23</sup></a>.  This data shuffling means that some I/O speed degradation
is inevitable in any protected-mode program which runs on top of DOS
(including, for example, Windows programs when Windows 3.X is set to
386-Enhanced mode).

<p>By default, DJGPP moves data in chunks of 16 KB, so defining a buffer
larger than that won't gain anything.  The size of the transfer buffer
is customizable up to a maximum of 64 KB<a rel=footnote href="#fn-24"><sup>24</sup></a>, so if your program really reads a lot of large files, you might
be better off enlarging it (with the <code>STUBEDIT</code> program).

<p>The DJGPP buffered I/O functions utilize a special algorithm to optimize
both sequential and random reads.  These two usually contradict, since
sequential reads favor larger buffers, while random access favors small
buffers.  DJGPP solves this contradiction by doubling the buffer size on
each sequential read, up to the size of the transfer buffer, and
resetting the buffer size back to the minimum of 512 bytes each time the
program calls <code>fseek</code>.  Experience shows that programs which use
both sequential and random access to files, like <code>ld.exe</code>, the
linker, run significantly faster when linked with these optimized I/O
functions (introduced with version 2.02 of DJGPP).

<p>Some people think that FAT is such a lousy filesystem, that programs
which do a lot of disk I/O <em>must</em> run terribly slow when compiled
with DJGPP.  This is a common misconception.  The speed of disk I/O is
determined primarily by how efficient is the code in the operating
system kernel that handles the filesystem, and the device drivers for
the I/O-related devices like the hard disk, not by the disk layout.  It
is true that DOS and BIOS don't implement I/O too efficiently (they use
too many tight loops waiting for low-level I/O to complete), but a large
disk cache can help them tremendously.  In addition, Windows 9X bypasses
DOS and BIOS I/O code entirely, and uses much more efficient
protected-mode code instead.  Experience shows that DJGPP programs on
plain DOS systems with a large (8MB and up) disk cache installed run
about 30% slower than a Linux system on the same machine; and Windows 9X
will run the same programs at roughly the same speed as Linux.  If you
get much slower performance on DOS/Windows, chances are that your system
is not configured optimally.

<p>Some programs which only copy data between two files might gain
significantly if you write your custom low-level I/O functions that
avoid moving data to extended memory (only to move them back to the
transfer buffer).  However, these cases are rare.

<p><hr>
Node:&nbsp;<a name="Slow-down">Slow-down</a>,
Previous:&nbsp;<a rel=previous href="#IO%20speed">IO speed</a>,
Up:&nbsp;<a rel=up href="#Performance">Performance</a>
<br>

<h2>14.5 My ported program runs much slower!</h2>

<p><em><strong>Q</strong>: How come my program, which I ported from Borland/MS C and which
doesn't use much I/O, still runs much slower under DJGPP? </em>

<br><p>
<p><strong>A</strong>:  Explore the following possible causes for this:

<ol type=a start=1>
</p><li>You compiled the problem without optimizations.  You should use at least
<code>-O2</code> to produce optimized code.

<p>If your program spends most of its time in a certain innermost loop, you
should try enabling some of the optimization options which aren't
enabled by <code>-O2</code>.  Some of these are described in this FAQ, see
<a href="#Older%20is%20faster">speed-related optimization options</a>.

</p><li>Your program extensively calls services other than I/O which require mode
switch (like BIOS Int 10h, mouse services, etc.).

<p>You can tell how much your program switches to real mode by profiling your
program.  In the profile, look at the proportion of time your program
spends in low-level library functions called <code>__dpmi_int</code> (which
calls real-mode DOS/BIOS services) and <code>__dj_movedata</code> (which moves
data between the transfer buffer and your program).  If this proportion is
large, try rewriting your program to minimize use of those functions which
require a mode switch, even at a price of more computation (a mode switch
usually eats up hundreds of CPU cycles).

</p><li>Your program might be running out of available physical memory and
paging to disk.  Watch the disk activity to find out whether this is the
reason.  If it is, you will have to configure your system differently
(see <a href="#Config">system configuration</a>), or change the way your program allocates memory.

<p>Sometimes, some device driver that uses extended memory takes up a
significant portion of it, and leaves less for DJGPP programs, which
then begin to page and slow down.  For example, Novell Netware's VLM
redirector and client software can use up to 0.5 MB of extended memory,
even if you don't log into the network.  A solution is not to load such
resident software, or to buy more memory.

</p><li>Your program uses a lot of floating-point math, and you run it on a
machine without an FPU.  A tell-tale sign of this is that a function
called <code>__djgpp_exception_processor</code> is high on the execution
profile printed by <code>Gprof</code>.  Due to the way FP emulation is
implemented in DJGPP<a rel=footnote href="#fn-25"><sup>25</sup></a>, it might
be significantly slower than the way real-mode DOS compilers handle it. 
The solution is either to rewrite your code so that it doesn't use
floating-point code in its inner loops, or buy an FPU.

<li>Your program uses library functions/classes which are implemented less
efficiently by DJGPP libc and the GNU C<tt>++</tt> libraries.  Or you might
be a heavy user of functions which other compilers convert to inline
code, while GCC doesn't inline most library functions.  If this is the
case, you will see those functions as "hot spots" on the program
histogram produced by the <code>Gprof</code> profiler.  If you find this to be
the problem, write your own, optimized versions of those functions. 
It's best to write them as inline assembly functions, for maximum
performance.  If you find library functions which are inefficient,
please inform the DJGPP news group by posting to
the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a>, so this could be fixed by people who
maintain the library.

<li>The size of the code/data in the innermost loop might be close to the
size of the CPU cache (either L1 on-chip cache, or L2 cache on the
motherboard).  Compiling your program with a different compiler or a
different combination of optimization options can cause the code to
overflow the cache, which will dramatically affect the performance
(usually, by a factor of 2).  Running your program with the cache
disabled will be instrumental to see whether this is your problem.  If
it is, try to rearrange your data/code, or use a different combination
of optimization options.

<li>If the slow program was compiled for profiling (with the <code>-pg</code>
switch), the slow-down might be due to a bug in the DJGPP library. 
See <a href="#Profiled%20crash">slow-down in profiled programs</a>, for more about this.
</ol>

<p><hr>
Node:&nbsp;<a name="Memory">Memory</a>,
Next:&nbsp;<a rel=next href="#Command%20line">Command line</a>,
Previous:&nbsp;<a rel=previous href="#Performance">Performance</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>15 Run-Time Memory Issues</h1>

<p>This chapter answers questions which are related to DJGPP run-time
memory allocation.

<ul>
<li><a href="#How%20much%20memory">How much memory</a>:         How much memory can your program use. 
<li><a href="#Confusing%20alloc">Confusing alloc</a>:         Allocation mechanism peculiarities. 
<li><a href="#QDPMI%20VM">QDPMI VM</a>:                QDPMI doesn't provide virtual memory. 
<li><a href="#QDPMI%20alloc">QDPMI alloc</a>:             QDPMI/Windows 9X memory allocation peculiarities. 
<li><a href="#Windows%20alloc">Windows alloc</a>:           VM issues under Windows 3.X. 
<li><a href="#Windows9X%20alloc">Windows9X alloc</a>:         VM peculiarities under Windows 9X. 
<li><a href="#EMM386%20alloc">EMM386 alloc</a>:            Some versions of EMM386 are limited to 32 MBytes. 
<li><a href="#Swap%20out">Swap out</a>:                How much VM do spawned program have? 
<li><a href="#Stack%20size">Stack size</a>:              How large is the stack and how to enlarge it? 
<li><a href="#Windows%2098">Windows 98</a>:              Memory-related problems in Windows 98. 
</ul>

<p><hr>
Node:&nbsp;<a name="How%20much%20memory">How much memory</a>,
Next:&nbsp;<a rel=next href="#Confusing%20alloc">Confusing alloc</a>,
Previous:&nbsp;<a rel=previous href="#Memory">Memory</a>,
Up:&nbsp;<a rel=up href="#Memory">Memory</a>
<br>

<h2>15.1 How much virtual memory do you have?</h2>

<p><em><strong>Q</strong>: How much virtual memory can I use in DJGPP programs?</em>

<br><p>
<p><strong>A</strong>: That depends on the DPMI host you are using.  The latest version
r5 of CWSDPMI (the free DPMI host which comes with DJGPP) lets you use
all the available extended memory, plus the available hard disk storage
up to a total of 2GB.  (Version r4 of CWSDPMI supports up to 256MB of
physical memory and up to 256MB of disk space, for a grand total of
512MB of virtual memory, but has bugs when the total memory is more than
255MB.).  Try a <code>malloc(50*1024*1024)</code> some day.

<p>With other DPMI hosts, your mileage may vary.  Quarterdeck's QDPMI, for
instance, has a bug in some of its versions which effectively disables
virtual memory under DJGPP (described in <a href="#QDPMI%20VM">QDPMI VM bug</a>, below), so you
only have whatever free physical RAM is left.  On Windows 3.X, the
amount of virtual memory you get depends on various virtual memory
settings in the Control Panel and on the <code>.pif</code> file settings for
the program you run (see <a href="#Windows%20alloc">Windows allocation subtleties</a>, below).  On
Windows 9X, the memory settings of the DOS Box Property Sheets define how
much virtual memory a DJGPP program will get (see <a href="#Windows9X%20alloc">Windows 9X allocation details</a>, below).  OS/2  reportedly can be configured to support up to 512MB
of DPMI memory.

<p><hr>
Node:&nbsp;<a name="Confusing%20alloc">Confusing alloc</a>,
Next:&nbsp;<a rel=next href="#QDPMI%20VM">QDPMI VM</a>,
Previous:&nbsp;<a rel=previous href="#How%20much%20memory">How much memory</a>,
Up:&nbsp;<a rel=up href="#Memory">Memory</a>
<br>

<h2>15.2 It seems <code>malloc</code>/<code>free</code> don't affect virtual memory<small>...</small></h2>

<p><em><strong>Q</strong>: I did <code>malloc(50*1024*1024)</code>, but didn't see any paging
happen, and I only have 8 MBytes of RAM on my machine.  Is this virtual
memory thing for real?</em>

<br><p>
<p><em><strong>Q</strong>: I <code>malloc</code>'ed a large chunk of memory, but when I check
values returned by <code>_go32_remaining_physical_memory</code> or
<code>__dpmi_get_memory_information</code>, I don't see any change!</em>

<br><p>
<p><em><strong>Q</strong>: When I <code>free</code> allocated RAM,
<code>_go32_remaining_physical_memory</code> reports there was no change in the
available RAM<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: I'm looking for a way to tell how much memory is available,
something like <code>coreleft</code> in Borland C?</em>

<br><p>
<p><strong>A</strong>:  CWSDPMI (and, possibly, other DPMI hosts) only pages in memory
when it is actually accessed.  If you only <code>malloc</code> it, but don't
actually access it, it won't grab those pages.  Try <code>calloc</code> and
see the <strong>big</strong> difference.

<p>When you call <code>free</code>, DJGPP library doesn't return memory to the
system, it just adds it to its internal pool of free pages.  So, from the
point of view of the DPMI server, these pages are not "free".

<p>In addition, several widely-used DPMI servers, such as those built into
Windows, have their own quirks related to memory allocation.  For
example, some of them won't let you allocate more than half the
available memory in a single chunk.  As another example, on OS/2
<code>_go32_remaining_physical_memory</code> reports a constant very large
value that doesn't change in the course of the program.

<p>Note that the distinction between the physical and virtual memory is
only meaningful on DOS.  More sophisticated operating systems usually
conceal the difference entirely, so only the sum of these two types of
memory usually (but not always) gives an approximation of the total free
memory.

<p>Because of these peculiarities, there's no convenient and easy way to
return the amount of free memory available at any given moment, even in
plain DOS.  Some programs only care about available physical RAM (they
don't want to page to disk, since that causes a considerable slow-down);
for these, I recommend to call the
<code>_go32_remaining_physical_memory</code> library function at program
startup, and then track memory usage with <code>sbrk(0);</code>. 
Alternatively, disabling virtual memory altogether (by using CWSDPR0 or
by loading CWSDPMI with <code>-s-</code> parameter), and checking values
returned by <code>malloc</code> against <code>NULL</code>, might be all you need to
know when you are about to run out of free physical memory.  Programs
that need to know when they are about to run out of <em>virtual</em>
memory should call <code>_go32_remaining_virtual_memory</code> instead.  Once
again, these methods will only work reasonably well in plain DOS.

<p><hr>
Node:&nbsp;<a name="QDPMI%20VM">QDPMI VM</a>,
Next:&nbsp;<a rel=next href="#QDPMI%20alloc">QDPMI alloc</a>,
Previous:&nbsp;<a rel=previous href="#Confusing%20alloc">Confusing alloc</a>,
Up:&nbsp;<a rel=up href="#Memory">Memory</a>
<br>

<h2>15.3 Failure to get more memory than is physically installed</h2>

<p><em><strong>Q</strong>: When I try to access more memory than the free physical RAM,
<code>malloc</code> returns a <code>NULL</code> pointer, or I get some cryptic error
message, like "Memory Paging Violation" or "Unrecoverable Exception:
000Eh".</em>

<br><p>
<p><strong>A</strong>: This is typical of Quarterdeck's DPMI host called QDPMI which
comes with QEMM386 version 7.53 and earlier.  Some versions of QDPMI
(those which come with QEMM v6.x) fail to resize memory blocks when the
new size is more than the available physical RAM, even though virtual
memory services are enabled; other versions (those which come with QEMM
v7.x) just don't let you allocate more memory than is physically
available.  If you must use more RAM than is physically available,
disable QDPMI by going to the QEMM directory and typing this:

<pre> qdpmi off
</pre>

<p>DJGPP programs will then use CWSDPMI instead.

<p>This bug was corrected in QDPMI version 1.10 or later, distributed with
QEMM beginning with version 8.0, so upgrading to the latest version of
QEMM might also be a solution.  With QEMM 6.x, make sure your programs
don't set <code>_crt0_startup_flags</code> to <code>_CRT0_FLAG_UNIX_SBRK</code>,
which overrides the default type of <code>sbrk</code> (QEMM 8.0 and later can
allocate virtual memory with both types of <code>sbrk</code> algorithm).

<p>If you use another DPMI host, make sure that virtual memory is enabled. 
E.g., for 386Max, include the <code>swapfile=</code> parameter to establish a
virtual memory swap file; you can make it permanent (this will speed up
DJGPP start-up) with the <code>/p</code> option.

<p><hr>
Node:&nbsp;<a name="QDPMI%20alloc">QDPMI alloc</a>,
Next:&nbsp;<a rel=next href="#Windows%20alloc">Windows alloc</a>,
Previous:&nbsp;<a rel=previous href="#QDPMI%20VM">QDPMI VM</a>,
Up:&nbsp;<a rel=up href="#Memory">Memory</a>
<br>

<h2>15.4 Memory allocation fails before all memory is used</h2>

<p><em><strong>Q</strong>: OK, I've changed my program to never allocate more memory than is
physically available, to work around that QDPMI VM bug, described in
<a href="#QDPMI%20VM">previous section</a>, but my program still gets a <code>NULL</code> pointer
from <code>malloc/calloc</code>!</em>

<br><p>
<p><em><strong>Q</strong>: Why is my program dying with SIGSEGV under CWSDPMI when
allocating a chunk of memory?</em>

<br><p>
<p><strong>A</strong>:  Another peculiarity of QDPMI which came with QEMM before version
8.0: it will never let you allocate a chunk which is larger than half of
what's available.  Windows 3.X behaves in the same way, and several
people reported the same to be true under Windows 9X.

<p>If your program asks for memory in lots of small allocations, then it
might crash when you use CWSDPMI as your DPMI host.  This is because
CWSDPMI runs out of its tables, allocated in the heap, where it tracks
memory allocations.  Beginning with release 2, CWSDPMI defines a
6KB-large default heap that is configurable by CWSPARAM program to be
anywhere between 3K and 40K bytes, without recompiling CWSDPMI.  The
default heap size is enough for about 21MBytes in small chunks.  You
should upgrade to the latest CWSDPMI if you experience such problems,
and bump up its heap size as needed.

<p><hr>
Node:&nbsp;<a name="Windows%20alloc">Windows alloc</a>,
Next:&nbsp;<a rel=next href="#Windows9X%20alloc">Windows9X alloc</a>,
Previous:&nbsp;<a rel=previous href="#QDPMI%20alloc">QDPMI alloc</a>,
Up:&nbsp;<a rel=up href="#Memory">Memory</a>
<br>

<h2>15.5 Memory allocation fails under Windows</h2>

<p><em><strong>Q</strong>: I'm running in Windows 3.X DOS box, but DJGPP complains about
there not being enough DPMI memory, although virtual memory is enabled.</em>

<br><p>
<p><strong>A</strong>: You must make sure the size of your Windows swap file can be at
least 2 times the largest virtual memory size you need.  Check if you
have enough free disk space; if you do, run a defragger (Windows needs
the swap file to be contiguous).  The size of the swap file is normally
limited by the "virtual = 4 times free physical" rule, but you can
change that by inserting the line

<pre> PageOverCommit=n
</pre>

<p>in the <code>[386Enh]</code> section of your <code>SYSTEM.INI</code> file.  The
parameter <code>n</code> is 4 by default, but can be set to be as large as 20.

<p><hr>
Node:&nbsp;<a name="Windows9X%20alloc">Windows9X alloc</a>,
Next:&nbsp;<a rel=next href="#EMM386%20alloc">EMM386 alloc</a>,
Previous:&nbsp;<a rel=previous href="#Windows%20alloc">Windows alloc</a>,
Up:&nbsp;<a rel=up href="#Memory">Memory</a>
<br>

<h2>15.6 Memory allocation peculiarities under Windows 9X</h2>

<p><em><strong>Q</strong>: I seem to be unable to get more than 16 MBytes of virtual memory
under Windows 9X, even though I have 32 MBytes of RAM installed on my
machine, and a lot of disk space<small>...</small>.</em>

<br><p>
<p><strong>A</strong>: If your machine has 64MB or less of main memory, you must set the
maximum amount of DPMI memory to 65535K in the DOS box Property Sheets. 
Click on the <code>Properties</code> button of the DOS box toolbar, then click
on the <code>Memory</code> tab, and type the number <code>65535</code> in the box
under <code>DOS Protected Mode Memory</code>.  If you leave that setting at
the default "Auto", your programs are at Windows' mercy, and in many
cases will get only 16 MBytes.  You must actually type 65535 inside the
dialog box, as checking out the values from the list Windows offers will
never get you past 16384 (i.e., 16MB).

<p>Machines that have more than 64MB of physical memory should always leave
the DPMI memory setting at "Auto", since the manual setting cannot be
larger than 65535K.  Setting the DPMI memory property to "Auto"
usually leaves the DOS box with whatever is physically installed, minus
about 5MB, assuming the disk used by the Windows swap file has enough
free space.

<p>Some users report that they need to edit their <code>EMM386</code> command line
in the <code>CONFIG.SYS</code> file to say this:

<pre> DEVICE=C:\WINDOWS\EMM386.EXE NOEMS L=131072
</pre>

<p>The <code>L=NNN</code> parameter (here for 128MB of installed memory) forces
<code>EMM386</code> to use all of the installed memory.  (This should work by
default with Windows 9X, but if it doesn't, try the above line.)

<p>Note that you cannot allocate more than half the available memory in one
chunk under Windows 9X, exactly as the things are under Windows 3.X, and
you cannot have more than 64 MBytes of virtual memory available to DJGPP
programs running on Windows, unless you have more than 64MB physical
memory installed.

<p><hr>
Node:&nbsp;<a name="EMM386%20alloc">EMM386 alloc</a>,
Next:&nbsp;<a rel=next href="#Swap%20out">Swap out</a>,
Previous:&nbsp;<a rel=previous href="#Windows9X%20alloc">Windows9X alloc</a>,
Up:&nbsp;<a rel=up href="#Memory">Memory</a>
<br>

<h2>15.7 Memory allocation fails under EMM386 or HIMEM</h2>

<p><em><strong>Q</strong>: My machine has 48 MBytes of RAM, but when I run DJGPP programs,
they start paging after 32 MBytes have been used<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: I have 5 MBytes of free RAM on my machine, but DJGPP programs start
paging after only 256KBytes of memory were used??</em>

<br><p>
<p><strong>A</strong>:  This might be caused by some old versions of the memory manager
installed in your machine (like HIMEM or EMM386 from an old version of
DOS), which were limited to 32 MBytes of extended memory.  Try running
without them (CWSDPMI can use raw extended memory), or upgrade to a newer
version of DOS.

<p>If your programs start paging after only 256KBytes of memory were used,
most probably you are using EMM386 and CWSDPMI, and your
<code>CONFIG.SYS</code> specifies no amount of memory when it installs EMM386. 
Some old versions of EMM386 default to 256K in this case; you should
tell EMM386 explicitly how much memory it should take over.  You can use
the <code>go32-v2</code> program to see what amount of extended memory your
DJGPP programs will get.

<p><hr>
Node:&nbsp;<a name="Swap%20out">Swap out</a>,
Next:&nbsp;<a rel=next href="#Stack%20size">Stack size</a>,
Previous:&nbsp;<a rel=previous href="#EMM386%20alloc">EMM386 alloc</a>,
Up:&nbsp;<a rel=up href="#Memory">Memory</a>
<br>

<h2>15.8 How much memory do parent DJGPP programs leave for their child?</h2>

<p><em><strong>Q</strong>: How much memory is available when I invoke other programs from my
DJGPP program?</em>

<br><p>
<p><strong>A</strong>:  In the conventional (below 640K mark) memory, you are left with
everything which was free before your program started, except what the
DPMI host uses.  The amount of conventional memory required by the DPMI
host depends heavily on the host you use.  For the first DJGPP program,
CWSDPMI uses about 130KB (including 41KB to load CWSDPMI itself), QDPMI
uses about 55KB,  and Windows only 18 KBytes.  Each subsidiary call to
<code>system</code> or <code>spawn</code> (like in recursive invocation of
<code>Make</code>) eats up about 18K (16K for the transfer buffer and 2K for
the PSP and environment) for most DPMI servers; a notable exception is
QDPMI which needs 104K bytes of low memory for the subsequent calls.  If
you change the size of the transfer buffer (with <code>STUBEDIT</code>), the
amount of free conventional RAM left when shelling out of it will change
accordingly.

<p>In addition, most DPMI servers (with the notable exception of Windows)
take up 16KB of expanded memory when they first load.

<p><em>Extended</em> memory management for the spawned programs is left to
the DPMI server; DJGPP does nothing special about XMS when <code>system</code>
or <code>spawn</code> is called.  This means that  all the extended memory
used by the parent program is <strong>not</strong> freed when the child program
starts; if the child requests more memory than is physically free, the
DPMI server is expected to page some of the parent out to honor the
request.  (This is unlike DJGPP v1.x, where the <code>go32</code> extender
would completely page out the parent before starting the child.)  The
advantage of this is that spawning a child or shelling out is much
faster in v2 than it used to be with v1.x, except on machines with low
amounts of installed RAM.  A disadvantage is that if you spawn a
real-mode program that uses XMS, the extended memory used up by your
DJGPP program will be unavailable to it, unless you use a memory manager
(as opposed to when CWSDPMI uses raw XMS or HIMEM).

<p>Note that if you use a memory manager such as EMM386 or QEMM386 with the
NOEMS and NOVCPI parameters, CWSDPMI will use the XMS (as opposed to
VCPI) services to allocate extended memory, and will allocate all of the
available XMS memory for itself.  So if, while your DJGPP program runs,
some resident software such as device driver or TSR will try to allocate
XMS, the allocation will fail.

<p><hr>
Node:&nbsp;<a name="Stack%20size">Stack size</a>,
Next:&nbsp;<a rel=next href="#Windows%2098">Windows 98</a>,
Previous:&nbsp;<a rel=previous href="#Swap%20out">Swap out</a>,
Up:&nbsp;<a rel=up href="#Memory">Memory</a>
<br>

<h2>15.9 How much stack can I have in DJGPP programs?</h2>

<p><em><strong>Q</strong>: My program bombs when I use very large automatic arrays.</em>

<br><p>
<p><em><strong>Q</strong>: How much stack space do I have in my program?</em>

<br><p>
<p><em><strong>Q</strong>: My program seems to overflow the stack, but only when I run it
under a debugger<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: My program crashes with SIGSEGV, but the traceback makes no
sense: it points to something called ___djgpp_exception_table<small>...</small>
When I try to debug this, the traceback mysteriously changes to some
innocent library function, like getc().  What is going on??</em>

<br><p>
<p><strong>A</strong>: DJGPP v2 programs get fixed-size stack which is allocated by the
startup code and then stays fixed for the entire lifetime of the
program; this is due to a bug/feature of the DPMI 0.9
specification<a rel=footnote href="#fn-26"><sup>26</sup></a>.  By default,
you have a 512KB-long stack (DJGPP v2.01 and earlier used 256KB stack),
but some programs which use large automatic arrays, or are deeply
recursive, might need more.  If the default stack size is not enough,
you can change it with the <code>STUBEDIT</code> program (change the parameter
"Minimum amount of stack space"), or by setting the global variable
<code>_stklen</code> in your program.  Example:

<pre> unsigned _stklen = 1048576;  /* need a 1MB stack */
</pre>

<p>The DJGPP startup code checks both the value in the stub (that can be
changed by <code>STUBEDIT</code>) and the value of <code>_stklen</code>, and uses
the larger of these two.  Therefore, programs that are known to require
large stack size should set <code>_stklen</code> to make sure they will always
work, even if somebody stub-edits them to a lower value.  Setting
<code>_stklen</code> is also safer to ensure sufficient stack size during
debugging (see below).  However, you might be left with <code>STUBEDIT</code>
as your only option of enlarging the stack with programs for which you
don't have the sources handy, or rebuilding which is not practical.

<p>Alternatively, you could rewrite your code to declare large arrays with
the <code>static</code> qualifier, or put their declaration outside any
function (thus making them static by default).  Static arrays don't use
stack space at all.

<p>Programs that need an unusually large stack might crash with bogus
stack traces, because part of the static data gets overwritten by the
overflowing stack.  To see if that is the cause of such crashes, run
<code>STUBEDIT</code> on your program and crank up the stack size to a large
value (like 4 MBytes).  If that makes the problem go away, tune the
stack limit to the minimum value your program can live with, then set
<code>_stklen</code> to an appropriate value as explained above and recompile
the program.  (Some DPMI hosts will actually allocate the entire stack,
even if not all of it is used, so leaving it at unnecessarily large
value will hurt the program on low-memory machines.)

<p>Some users have reported that they needed to enlarge the stack size of
the C<tt>++</tt> compiler, <code>cc1plus.exe</code>, to prevent it from crashing when
compiling some exceedingly large and complex C<tt>++</tt> programs.  Another
program that was reported to need a stack larger than the default is
<code>bccbgi.exe</code> from the <code>BCC2GRX</code> package.

<p>After you've used <code>STUBEDIT</code> to change the stack size, run it again
to make sure it displays as default the value you thought you entered. 
This is because <code>STUBEDIT</code> will sometimes silently set the stack
size to 0 (and then you will get the default 512K stack) if it doesn't
like the value you type (e.g. if it has a wrong syntax).

<p>When you run a raw COFF image under a debugger, the stack size is taken
from the debugger's stack size, which might not be appropriate for your
program .  So the only way to change the default stack size in these
cases is to set <code>_stklen</code>.  You can also stubedit the debugger, to
achieve the same effect, albeit at a price of more memory used by the
debugger.

<p>Under Windows 3.X, be sure you've allocated a sufficiently large swap
file (let's say, 40MBytes) from the Windows' Control Panel, and make
sure the <code>.PIF</code> file for your program doesn't have too low limit on
EMS/XMS usage (better make them both -1).  What's that?  You don't
have a <code>.PIF</code> file for this program?  Then Windows uses the default
file <code>DOSPRMPT.PIF</code>, which almost surely defines very low limits on
these two, and your program might have problems getting the memory it
needs for its stack.

<p>DJGPP v2.0 has a subtle bug in its startup code that is seen very
rarely, and that manifests itself by a program crashing with Page Fault
or SIGSEGV.  If you are using v2.0 and enlarging the stack and the
CWSDPMI heap size didn't help, try adding some (e.g., 4KB) static data
to your program and see if that helps.  But the best way to overcome
this is to upgrade to DJGPP v2.01 or later.

<p><hr>
Node:&nbsp;<a name="Windows%2098">Windows 98</a>,
Previous:&nbsp;<a rel=previous href="#Stack%20size">Stack size</a>,
Up:&nbsp;<a rel=up href="#Memory">Memory</a>
<br>

<h2>15.10 Memory-related problems in Windows 98</h2>

<p><em><strong>Q</strong>: Whenever I run a batch file that launches a DJGPP program,
Windows 98 pops up a message saying that "This program has accessed
memory in use" and threatens me with all kinds of trouble unless I
terminate the program.  What's wrong with DJGPP programs??</em>

<br><p>
<p><strong>A</strong>:  Nothing's wrong with DJGPP programs, it's some weird Windows
bug, and it is not limited to DJGPP programs, either.  I'm told that to
get rid of these messages, you need to change the settings in the DOS
box Properties, under <code>Memory</code>.  Specifically:

<ul>
<li>Conventional Memory: instead of <code>Auto</code>, type in a fixed number. 
The maximum possible amount depends on your system configuration; run
<code>mem /c</code> to see how much conventional memory is free, and use that
amount to set the Conventional Memory property.  Do <strong>not</strong> type
640K, since that causes Windows to reset the setting back to
<code>Auto</code>.

<li><code>Protected</code> option: uncheck it. 
</ul>

<p>After doing this, click <code>OK</code>, close the DOS box and reopen it
again.  The problem should now go away.

<p>Btw, the message popped up by Windows is a mere nuisance, since if you
answer <code>YES</code> to Windows' question whether you want to continue,
everything works just fine, and the message is never popped up again
until you reboot the machine.  Seems like just one more of those Windows
teasers<small>...</small>.

<p><hr>
Node:&nbsp;<a name="Command%20line">Command line</a>,
Next:&nbsp;<a rel=next href="#Converting">Converting</a>,
Previous:&nbsp;<a rel=previous href="#Memory">Memory</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>16 Command-line Arguments Handling in DJGPP</h1>

<p>DJGPP handles command-line arguments differently from most DOS-based
compilers, to make it closer to Unix platforms (so that porting of Unix
programs will be easier).  This chapter answers some questions about this
aspect of DJGPP.

<ul>
<li><a href="#Filename%20globbing">Filename globbing</a>:          Wildcard expansion under DJGPP
<li><a href="#Disable%20globbing">Disable globbing</a>:           You can disable globbing if you don't need it. 
<li><a href="#Special%20chars">Special chars</a>:              How to pass arguments with special chars. 
<li><a href="#Long%20commands">Long commands</a>:              DJGPP can pass very long command lines. 
<li><a href="#How%20long">How long</a>:                   How long can the command line be. 
<li><a href="#Makefiles">Makefiles</a>:                  Makefiles can disable long command lines. 
</ul>

<p><hr>
Node:&nbsp;<a name="Filename%20globbing">Filename globbing</a>,
Next:&nbsp;<a rel=next href="#Disable%20globbing">Disable globbing</a>,
Previous:&nbsp;<a rel=previous href="#Command%20line">Command line</a>,
Up:&nbsp;<a rel=up href="#Command%20line">Command line</a>
<br>

<h2>16.1 Filename wildcards expansion under DJGPP</h2>

<p><em><strong>Q</strong>: Can I do filename globbing with DJGPP?</em>

<br><p>
<p><em><strong>Q</strong>: I call my program with an argument <code>x*y</code> and it complains
about something called <code>xyzzy</code>??<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: I cannot find a way to use the <code>/?</code> switch with my
programs!</em>

<br><p>
<p><strong>A</strong>:  The filename globbing in DJGPP is done by the start-up code,
before your <code>main</code> function is called.  Unlike other DOS-based
compilers, where you must link your program with a special object module
if you want the program to get expanded filenames, in DJGPP this is
considered normal behavior and is performed by default on behalf of
every DJGPP program.  The <code>x*y</code> above was expanded to a file called
<code>xyzzy</code> which was probably present in the current working
directory; and <code>/?</code> is by default expanded to the list of
one-letter files/directories you happen to have in the root directory of
the current drive.  (If you don't want the default expansion, refer to
<a href="#Disable%20globbing">how to disable globbing</a>.)

<p>In DJGPP, filename globbing works like in Unix, which is more general than
the usual wildcard expansion, both in DOS and even in Windows.  The
DJGPP wildcard expansion understands the following constructs with
special meta-characters:

<dl>
<dt><code>?</code>
<dd>any single character.

<br><dt><code>*</code>
<dd>zero or more arbitrary characters, including a dot `.'

<br><dt><code>[aA_]</code>
<dd>any one of characters `a', `A', or `_'.

<br><dt><code>[a-d]</code>
<dd>any one of characters `a', `b', `c', or `d'.

<br><dt><code>[!a-z]</code>
<dd>anything <em>but</em> a lowercase letter.

<br><dt><code>...</code>
<dd>all the subdirectories, recursively (VMS aficionados, rejoice!).

<br><dt><code>.../*</code>
<dd>all the files in all subdirectories, recursively. 
</dl>

<p>Unlike DOS, the <code>*</code> and <code>?</code> meta-characters can appear
<em>anywhere</em> in the filename pattern, like in <code>[a-z]*[0-9].*pp.</code>
You can also use <code>*</code> instead of directories, like in
<code>*/*/*.c</code>, but <strong>not</strong> on drive letters (e.g., <code>[a-c]:/</code>
won't work).

<p>Note that <code>*.*</code> only picks up files that actually have an
extension.  This is contrary to the usual DOS practice where it means
<em>all</em> the files, with or without extension.  Use <code>*</code> to get
files with and without extensions.

<p>An argument which cannot be expanded (no filenames matching that
particular pattern) will be passed to the program verbatim.  This is
different from what you might see under Unix, where some shells (like
<code>csh</code>) would say something like "No match" and won't call your
program at all.  DJGPP's behavior in this case is like shells of the
Bourne legacy (<code>sh</code>, <code>ksh</code>, and <code>bash</code>).

<p>If the wildcards include upper-case or mixed upper- and lower-case
letters, the letter-case of the files is not ignored on Windows 9X when
expanding the wildcards.  For example, <code>[A-D]*</code> will <strong>not</strong>
match a file called <code>aFileName</code>.  Upper-case letters in wildcards
also disable automatic down-casing of short 8+3 file names returned by
the code that expand wildcards (even on plain DOS).  By contrast, if the
wildcards include only lower-case letters, the letter-case is ignored
during expansion, and short 8+3 file names are automatically down-cased,
unless the environment variable <code>FNCASE</code> is set to <code>y</code>.  The
effect of setting <code>FNCASE</code> is fully described in the <cite>DJGPP C
Library reference</cite>, under the <code>_preserve_fncase</code> function; type
<kbd>info libc alphabetical _preserve_fncase</kbd> from the DOS prompt.

<p><hr>
Node:&nbsp;<a name="Disable%20globbing">Disable globbing</a>,
Next:&nbsp;<a rel=next href="#Special%20chars">Special chars</a>,
Previous:&nbsp;<a rel=previous href="#Filename%20globbing">Filename globbing</a>,
Up:&nbsp;<a rel=up href="#Command%20line">Command line</a>
<br>

<h2>16.2 How to disable filename wildcards expansion</h2>

<p><em><strong>Q</strong>: I don't want my program to glob its arguments (they aren't files
at all, but they include characters like <code>*</code> and <code>?</code>).  What
should I do?</em>

<br><p>
<p><strong>A</strong>:  You have these alternatives:

<ul>
<li>Surround your arguments with single or double quotes (this is what you
would do under a Unix shell).

<li>Disable globbing for your program by linking it with your custom version
of the function with the special name <code>__crt0_glob_function</code> and make
it always return a <code>NULL</code> pointer.  See the documentation of this
function in the library reference, for more details.  Here's an example:

<pre> #include &lt;crt0.h&gt;

 char **__crt0_glob_function (char *arg)
 {
   return 0;
 }
</pre>
</ul>

<p><hr>
Node:&nbsp;<a name="Special%20chars">Special chars</a>,
Next:&nbsp;<a rel=next href="#Long%20commands">Long commands</a>,
Previous:&nbsp;<a rel=previous href="#Disable%20globbing">Disable globbing</a>,
Up:&nbsp;<a rel=up href="#Command%20line">Command line</a>
<br>

<h2>16.3 How to pass command-line arguments with quotes or <code>@</code></h2>

<p><em><strong>Q</strong>: I have a file with a single quote in its name, but the quote
seems to be stripped away when I pass it to my program <small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: How do I pass a command-line argument which contains double
quotes? </em>

<br><p>
<p><em><strong>Q</strong>: How do I pass an argument which begins with the <code>@</code>
character?</em>

<br><p>
<p><strong>A</strong>: These special characters on the command-line arguments are
handled by the filename expansion ("globbing") code before they are
passed to the <code>main</code> function (see <a href="#Filename%20globbing">description of filename expansion</a>), and the quote characters serve to protect the arguments
from expansion.  You should escape-protect the quote characters with a
backslash in order for them to be treated as literal characters.  For
example, if you have a file called <code>myfile.c'v</code>, type it as
<code>myfile.c\'v</code> when you call your program.  If you have single
quotes in your program arguments <em>and</em> you don't want those
arguments to be expanded, then surround them by double quotes, like
this: <code>"*.c'v".</code>  The program will get the string <code>*.c'v</code> with
the double quotes stripped away.

<p>Note that backslashes are only special if they are in front of a quote
or a backslash (they also serve as DOS directory separators, remember?). 
This is also different from what you get under a Unix shell, where a
backslash quotes <em>any</em> character.

<p>The <code>@</code> character serves to signal a <dfn>response file</dfn>
(see <a href="#Long%20commands">the description of response file method</a>), so it's also special. 
To pass an argument whose first character is <code>@</code>, surround that
argument with single or double quotes, otherwise it will be taken as a
name of a response file which holds the actual command line.

<p>You can quote only some parts of the wildcard to protect only those
parts from expansion; the unquoted parts will still be expanded.  This
allows to use wildcards with embedded whitespace and expand file names
with special characters which need to be quoted, like in
<code>c:/Prog*'&nbsp;'F*</code> (which should expand into <code>c:/Program&nbsp;Files</code>) and <code>*.c"'"v</code> (which should expand into all files with the
<code>*.c'v</code> extension).

<p><hr>
Node:&nbsp;<a name="Long%20commands">Long commands</a>,
Next:&nbsp;<a rel=next href="#How%20long">How long</a>,
Previous:&nbsp;<a rel=previous href="#Special%20chars">Special chars</a>,
Up:&nbsp;<a rel=up href="#Command%20line">Command line</a>
<br>

<h2>16.4 How to pass command lines longer than 126 characters</h2>

<p><em><strong>Q</strong>: Can I invoke my program with a command line longer than the
infamous DOS 126-character limit?</em>

<br><p>
<p><em><strong>Q</strong>: I have a Makefile of Unix origin which contains some
<strong>very</strong> long command lines.  Will it work with DJGPP?</em>

<br><p>
<p><strong>A</strong>:  Yes and yes.  DJGPP supports several methods of passing
command-line arguments which allow it to work around the DOS 126-character
limit.  These are:

<ul>
<li>The <code>!proxy</code> method.  If you invoke the program from within another
DJGPP program (like Make or Gcc compilation driver), it gets the address
of the memory block where the actual command line is stored.  The start-up
code will detect this and use that info to retrieve the command-line
arguments.

<p>This method is suitable only for invoking DJGPP programs from other DJGPP
programs.  You don't have to do anything special to use this method, it is
all done automagically for you by the library functions from the
<code>spawnXX</code> and <code>execXX</code> family on the parent program side, and
by the start-up code on the child side<a rel=footnote href="#fn-27"><sup>27</sup></a>.

</p><li>The environment method.  This is the same as the <code>!proxy</code> method
above, but the information about the long command line is stored in an
environment variable called "<tt> !proxy</tt>" (with the leading blank
and in lower-case).  The reason for two similar, but different methods
is that command-line arguments passed by <code>system</code> library functions
should be globbed by the child, while the arguments passed by
<code>spawnXX</code> and <code>execXX</code> family of functions should not; thus
the former uses the environment method while the latter use the
<code>!proxy</code> method.

<p>This method is used only by the <code>system</code> library function, and only
when the command line is longer than the DOS 126-character limit.

</p><li>The response file method.  Any argument which starts with a <code>@</code>
character (like in <code>myprog @<var>file</var></code>) will cause the named
<var>file</var> to be read and its contents to be used as command-line
arguments, like in many DOS-based compilers and linkers.  If you invoke
your DJGPP program from the DOS command line, this would be the only
method available for you to pass long command lines (like when calling
<code>Gawk</code> or <small>SED</small> without the <code>-f</code> option).

<p>This method is not used by the DJGPP library functions, but you can use
it explicitly in your application code.  It is designed for invoking
non-DJGPP programs that support response files.

<p>Note that this method makes <code>@</code> special when it is the first (or the
only) character of a command-line argument, which should be
protected with quotes if you want to use it verbatim (see <a href="#Special%20chars">how to pass the <b>@</b> character</a>). 
</ul>

<p>Of course, if the DJGPP start-up code doesn't see any of the above
methods, it will use the DOS command line by default.

<p>Since the long command lines are a very important feature, DJGPP's
version of the <code>system</code> library function avoids calling the DOS
command processor, <code>COMMAND.COM</code>, unless it needs to run a batch
file or an internal command of <code>COMMAND.COM</code>.  Other features of
the command processor, like redirection and pipes, are emulated
internally by <code>system</code>.  See the library reference for
<code>system</code>, for more details about its extended functionality.

<p><hr>
Node:&nbsp;<a name="How%20long">How long</a>,
Next:&nbsp;<a rel=next href="#Makefiles">Makefiles</a>,
Previous:&nbsp;<a rel=previous href="#Long%20commands">Long commands</a>,
Up:&nbsp;<a rel=up href="#Command%20line">Command line</a>
<br>

<h2>16.5 What is the maximum length of command line under DJGPP</h2>

<p><em><strong>Q</strong>: What is the longest command line I can pass to gcc when it is
invoked by <code>Make</code>?</em>

<br><p>
<p><strong>A</strong>:  The arguments are passed to DOS Exec call (Int 21h function 4Bh)
via the transfer buffer which is 16KB-long.  Apart of the command line, it
is also used to pass other info, such as the <code>!proxy</code> parameters and
the copy of the environment for the child program (let's say, less than
2000 bytes in most cases, but your mileage may vary).  This leaves at
least 13K bytes for arguments (including a separating blank between any
two arguments).  So unless your arguments span more than 160 screen lines,
you shouldn't worry.  However, if your environment is <em>very</em> large
(some people need as much as 6KB to accommodate for all the variables
used by the various packages installed on their machine), be sure to
stub-edit the programs that spawn other programs to a larger transfer
buffer, or else they could fail.

<p>The above limit depends on the size of the transfer buffer, so check the
size of the value recorded in the stub header of the <em>parent program</em>
before you pass extremely long command lines to its children.  GCC is
the first program you should worry about, because the linker
(<code>ld.exe</code>) usually gets long command lines from GCC (they include
the list of all the object files and libraries to be linked).

<p><hr>
Node:&nbsp;<a name="Makefiles">Makefiles</a>,
Previous:&nbsp;<a rel=previous href="#How%20long">How long</a>,
Up:&nbsp;<a rel=up href="#Command%20line">Command line</a>
<br>

<h2>16.6 Why Make passes only 126 characters to programs?</h2>

<p><em><strong>Q</strong>: I use Make to compile with GCC, but GCC gets only the first 126
characters of its command line.  Didn't you just explain in so many words
that invoking a DJGPP program (GCC) from another DJGPP program (Make) can
safely pass up to 13K characters of command-line arguments using the
<code>!proxy</code> method?</em>

<br><p>
<p><em><strong>Q</strong>: I use <small>RHIDE</small>, but it only passes the first 126 characters of
my long command lines to the compiler!</em>

<br><p>
<p><strong>A</strong>:  If you use Make 3.73, check your Makefile for <code>SHELL =
command.com</code> statements, or for commands which include pipe or
redirection characters like <code>&gt;</code>, <code>|</code>, etc.  If Make sees any
such statements, it will invoke <code>COMMAND.COM</code> to run GCC, and
<code>COMMAND.COM</code> can't pass more than 126 characters to GCC.  To work
around, comment-out the <code>SHELL=</code> line, and change your commands to
work without redirection/pipe characters.  One easy way to get rid of
redirection characters without losing their effect is to use the
<code>redir</code> program which comes with DJGPP.  For example, the following
command:

<pre>  frobnicate foo.bar &gt; myfile.tmp
</pre>

<p>can be re-written instead like this:

<pre>  redir -o myfile.tmp frobnicate foo.bar
</pre>

<p>The ports of Make 3.75 and later don't call <code>COMMAND.COM</code> in the
above cases, but rather emulate pipes and redirection internally, so
upgrading to the latest version of Make will solve such problems.  If
you think about using Make 3.75 with DJGPP v2.0, don't: invoking v2.0
programs from v2.01 programs will cause subtle and hard-to-debug
problems due to incompatibilities between these two versions regarding
the methods of invoking child programs (in particular, v2.0 doesn't
support the environment method of passing long command lines described
above).

<p>If you have problems with long command lines when using Make 3.75 and
later, it might be caused by the environment variable <code>SHELL</code> that
points to a Unix-style shell which is not a DJGPP program.  This could
happen, for example, if you use the shell from the MKS toolkit.  When
<code>SHELL</code> points to a program whose name looks like it's a Unix-style
shell (<code>sh.exe</code>, <code>bash.exe</code>, etc.), library functions like
<code>system</code> will invoke the shell to do everything, instead of using
the internal shell emulator.  If that shell isn't a DJGPP program, the
long command lines will end up truncated.  To solve these problems,
either unset <code>SHELL</code> or override it by setting <code>MAKESHELL</code> to
point to <code>COMMAND.COM</code> or to the DJGPP port of Bash.  This is
further explained in the <cite>GNU Make manual</cite>
(see <a href="make.html"><code>SHELL</code> and <code>MAKESHELL</code></a>).

<p>Problems with passing long commands from <small>RHIDE</small> are usually caused
by invoking old programs compiled with DJGPP v2.0.  Upgrade to the
latest binaries.

<p><hr>
Node:&nbsp;<a name="Converting">Converting</a>,
Next:&nbsp;<a rel=next href="#Low-level">Low-level</a>,
Previous:&nbsp;<a rel=previous href="#Command%20line">Command line</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>17 Converting DOS Programs/Libraries to DJGPP</h1>

<p>If you have a program or a library developed under some other DOS-based
compiler, which you want to port to DJGPP, read this chapter.

<ul>
<li><a href="#Syntax">Syntax</a>:                   The AT&amp;T syntax of Gas is different from Intel's. 
<li><a href="#Converting%20ASM">Converting ASM</a>:           Conversion tools between the two syntaxes. 
<li><a href="#ASM%20GPF">ASM GPF</a>:                  When converted assembly code crashes. 
<li><a href="#ASM%20and%20C">ASM and C</a>:                Rules for assembly code called from C. 
<li><a href="#OBJ%20and%20LIB">OBJ and LIB</a>:              You can't use them with GCC<small>...</small>
<li><a href="#16-bit%20code">16-bit code</a>:              <small>...</small>or can you? 
<li><a href="#NEAR%20and%20FAR">NEAR and FAR</a>:             How to convert NEAR and FAR to DJGPP. 
<li><a href="#Pseudo-registers">Pseudo-registers</a>:         Converting pseudo-registers to DJGPP. 
</ul>

<p><hr>
Node:&nbsp;<a name="Syntax">Syntax</a>,
Next:&nbsp;<a rel=next href="#Converting%20ASM">Converting ASM</a>,
Previous:&nbsp;<a rel=previous href="#Converting">Converting</a>,
Up:&nbsp;<a rel=up href="#Converting">Converting</a>
<br>

<h2>17.1 GCC/Gas won't accept valid assembly code <small>...</small></h2>

<p><em><strong>Q</strong>: I have some code written in assembly which compiles under
<small>MASM</small> and <small>TASM</small>, but GCC gives me a long list of error
messages.</em>

<br><p>
<p><strong>A</strong>: The GNU Assembler (<code>as.exe</code>), or <code>Gas</code>, called by GCC
accepts the <dfn>AT&amp;T syntax</dfn>, which is different from the <dfn>Intel
syntax</dfn>.  Notable differences between the two syntaxes are:

<ul>
<li>AT&amp;T immediate operands are preceded by <code>$</code>; Intel immediate operands
are undelimited (Intel <code>push 4</code> is AT&amp;T <code>pushl $4</code>).

<li>AT&amp;T register operands are preceded by <code>%</code>; Intel register operands
are undelimited.  AT&amp;T absolute (as opposed to PC-relative)
<code>jump</code>/<code>call</code> operands are prefixed by <code>*</code>; they are
undelimited in Intel syntax.

<li>AT&amp;T and Intel syntax use the opposite order for source and destination
operands.  Intel <code>add&nbsp;eax,&nbsp;4</code> is <code>addl&nbsp;$4,&nbsp;%eax</code> in
AT&amp;T syntax.

<p>The <code>source, dest</code> convention is maintained for compatibility with
previous Unix assemblers, so that GCC won't care about the assembler with
which it is configured, as some of GCC installations (on systems other
than MS-DOS) don't use GNU Binutils.

</p><li>In AT&amp;T syntax, the size of memory operands is determined from the
last character of the opcode name.  Opcode suffixes of <code>b</code>,
<code>w</code>, and <code>l</code> specify byte (8-bit), word (16-bit), and long
(32-bit) memory references.  Intel syntax accomplishes this by prefixing
memory operands (<em>not</em> the opcodes themselves) with <code>`byte
ptr'</code>, <code>`word ptr'</code>, and <code>`dword ptr'.</code>  Thus, Intel
<code>mov&nbsp;al,&nbsp;byte&nbsp;ptr&nbsp;FOO</code> is <code>movb&nbsp;FOO,&nbsp;%al</code> in AT&amp;T
syntax.

<li>Immediate form long jumps and calls are
<code>lcall/ljmp&nbsp;$SECTION,&nbsp;$OFFSET</code> in AT&amp;T syntax; the Intel syntax
is <code>call/jmp&nbsp;far&nbsp;SECTION:OFFSET.</code>  Also, the far return
instruction is <code>lret&nbsp;$STACK-ADJUST</code> in AT&amp;T syntax; Intel syntax
is <code>ret&nbsp;far&nbsp;STACK-ADJUST.</code>

<li>The AT&amp;T assembler does not provide support for multiple-section (a.k.a. 
multi-segment) programs.  Unix style systems expect all programs to be
single-section.

<li>An Intel syntax indirect memory reference of the form

<pre> SECTION:[BASE + INDEX*SCALE + DISP]
</pre>

<p>is translated into the AT&amp;T syntax

<pre> SECTION:DISP(BASE, INDEX, SCALE)
</pre>

</ul>

<p>Examples:

<pre>    <strong>Intel:</strong>  [ebp - 4]         <strong>AT&amp;T:</strong>  -4(%ebp)
    <strong>Intel:</strong>  [foo + eax*4]     <strong>AT&amp;T:</strong>  foo(,%eax,4)
    <strong>Intel:</strong>  [foo]             <strong>AT&amp;T:</strong>  foo(,1)
    <strong>Intel:</strong>  gs:foo            <strong>AT&amp;T:</strong>  %gs:foo
</pre>

<p>For a complete description of the differences,
see <a href="http://www.delorie.com/gnu/docs/binutils/as_164.html">GNU assembler documentation</a>.  If you don't
read this FAQ with an Info browser, download <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/bnu281b.zip">GNU Binutils</a>,
unzip the files named <code>as.iN</code> (where <code>N</code> is a digit) from
it, then type at the DOS prompt:

<pre> info as machine i386
</pre>

<p>You will see a menu of <code>Gas</code> features specific to x86 architecture.

<p>A user guide for inline assembly was written by <a href="mailto:brennan@rt66.com">Brennan Underwood</a>; it describes how to use inline assembly programming
with DJGPP and includes a tutorial on the AT&amp;T assembly syntax.  Check
out the <a href="http://www.delorie.com/djgpp/doc/brennan/brennan_att_inline.html">DJGPP inline assembly tutorial</a>.

<p>Another useful tutorial about writing separate assembly-language modules
for DJGPP was written by <a href="mailto:george.foot@merton.oxford.ac.uk">George Foot</a> and is available from <a href="http://users.ox.ac.uk/~mert0407/asmfuncs.txt">George's home page</a>.

<p>The DJGPP User's Guide also has a <a href="http://www.delorie.com/djgpp/doc/ug/asm/">tutorial on writing assembly-language code</a>.  One of the
sections there describes the <a href="http://www.delorie.com/djgpp/doc/ug/asm/about-386.html">CPU architecture</a>, which is geared
towards assembly-language programming.

<p>Yet another tutorial on the subject of inline assembly is available at
&lt;<code>http://www.castle.net/~avly/djasm.html</code>&gt;.

<p>Many people who used Intel syntax and then converted to the AT&amp;T style
say that they like the AT&amp;T variant more.  However, if you prefer to
stick with the Intel syntax, download and install <a href="http://www.web-sites.co.uk/nasm/"><small>NASM</small></a>, which is a free portable assembler.  It is
compatible with DJGPP and accepts a syntax which is much more similar to
the Intel style.  A guide for using <small>NASM</small> with DJGPP was written by
<a href="mailto:mmastrac@acs.ucalgary.ca">Matthew Mastracci</a> and is available
from <a href="http://www.acs.ucalgary.ca/~mmastrac/files/djgppasm.html">Matthew's Web page</a>.

<p>Note that Binutils maintainers are working on adding an option to Gas
which will cause it accept the Intel syntax as well, so it is most
probable that beginning with Binutils 2.10, Gas will have this feature.

<p><hr>
Node:&nbsp;<a name="Converting%20ASM">Converting ASM</a>,
Next:&nbsp;<a rel=next href="#ASM%20GPF">ASM GPF</a>,
Previous:&nbsp;<a rel=previous href="#Syntax">Syntax</a>,
Up:&nbsp;<a rel=up href="#Converting">Converting</a>
<br>

<h2>17.2 Converting between Intel ASM syntax and AT&amp;T syntax</h2>

<p><em><strong>Q</strong>: Where can I find an automated conversion tool to convert my
<code>Intel</code>-style assembly code into a code acceptable by <code>Gas</code>?</em>

<br><p>
<p><em><strong>Q</strong>: Where can I find a converter from <code>AT&amp;T</code> assembly to
<code>Intel</code> style?</em>

<br><p>
<p><strong>A</strong>:  A <small>SED</small> script which should do most of the conversion was
posted to the <a href="http://www.delorie.com/djgpp/mail-archives/djgpp/1995/06/06/05:48:34">DJGPP news group</a>.

<p>A program called <code>TA2AS</code> which can convert <small>TASM</small>
assembly source to AT&amp;T style can be found <a href="ftp://ftp.delorie.com/pub/djgpp/contrib/ta2asv08.zip">on the DJGPP server</a> and <a href="ftp://x2ftp.oulu.fi/pub/msdos/programming/convert/ta2asv08.zip">on Oulu</a>. 
<code>TA2AS</code> was written by Frank van Dijk of the Spirit group; if you
have questions about this tool, you may contact <a href="mailto:jan@stack.nl">Jan Oonk</a>.  The authors say that the program is far from finished,
but the sources are available with the package so you can fix whatever
is broken for your needs.

<p>Another similar converter is <code>Intel2Gas</code>, available from its
<a href="http://hermes.terminal.at/intel2gas">Web page</a>.

<p>Beginning with Binutils 2.10, <code>Gas</code> has an option that causes it to
accept the Intel syntax, so you can use <code>Gas</code> to assembly
Intel-style code.

<p>Alternatively, here is what you can do to make your code linkable with
DJGPP programs:

<ul>
<li>Get and install <small>NASM</small>, a portable x86 assembler which supports most
of the Intel syntax and can generate DJGPP-compatible COFF object files
(as well as lots of other formats, such as Microsoft 16-bit OBJ and
Win32, a.out, and ELF).  It also supports Pentium and Pentium Pro
opcodes, and MMX.  <small>NASM</small> is free for non-commercial use (see the
docs for commercial use restrictions) and can be compiled with DJGPP. 
<small>NASM</small> can be found <a href="http://www.web-sites.co.uk/nasm/">on <small>NASM</small> Web site</a>, which has links to official download sites. 
The maintainers of <small>NASM</small> are <a href="mailto:jules@acris.demon.co.uk">Jules</a>
and <a href="mailto:hpa@transmeta.com">H. Peter Anvin</a>.

<p>Be warned that <small>NASM</small> is <em>not</em> 100% identical to <small>MASM</small> or
<small>TASM</small>.  Even experienced assembly programmers might need some time
to adapt to the slightly different flavor of <small>NASM</small>.  If you want
something much more similar to <small>TASM</small>, get <small>JAS</small>.  <small>JAS</small> is
available <a href="ftp://x2ftp.oulu.fi/pub/msdos/programming/djgpp2/jas13.zip">from OULU</a>.

<p>Also note that <small>NASM</small>, or at least some of its versions, doesn't
produce debug info in the format understood by GDB, which makes
debugging <small>NASM</small>-assemblied code tedious (you might not be able to
display source lines and refer to local symbols by name).  Latest
versions of <small>NASM</small> might correct this deficiency.

</p><li>For a small number of relatively short files, consider converting them
with a smart editor (like Emacs or its work-alikes).

<li>Obtain a copy of Microsoft <small>MASM</small> 6.11. It has a <code>-coff</code> option
to generate object code in COFF format which can be submitted to GCC, so
you can compile your original source.  You can also use the <code>LIB32</code>
librarian from Microsoft C8 to convert object files to COFF by putting
them into a <code>.lib</code> library, then extracting them as COFF files. 
<a rel=footnote href="#fn-28"><sup>28</sup></a>  Note that, unless you link the
<small>MASM</small>-generated object files with DJGPP's <code>ld</code> (as opposed
to Microsoft's <code>LINK /CO</code> command), you won't be able to debug the
resulting program, because the debug info is not in correct format.  I'm
also told that <code>masm</code> doesn't produce sections named ".text"  and
".data", so you might need to hex-edit the section names in the object
file manually.

<li>Use a disassembler to disassemble the object code, then convert it to
the AT&amp;T format either by hand or using <code>TA2AS</code>.  One place to look
for such a disassembler is <a href="ftp://ftp.simtel.net/pub/simtelnet/msdos/disasm/">on SimTel.NET mirrors</a>. 
</ul>

<p>Keep in mind that syntax is only one of the aspects of converting code
written for DOS to DJGPP.  You should also make sure your code doesn't
violate any of the rules for protected-mode programming (see <a href="#ASM%20GPF">GPF in asm code</a>).

<p>If you need to perform the opposite conversion, from the <code>AT&amp;T</code>
style to the <code>Intel</code> style, try the <code>Att2Intl</code> converter
written by <a href="mailto:gvelicha@wam.umd.edu">Gregory Velichansky</a>.  Its output
is intended for <small>NASM</small> or <small>TASM</small>.  <code>Att2Intl</code> is available
<a href="http://www.wam.umd.edu/~gvelicha/a2i/">from Greg's home page</a>.

<p><hr>
Node:&nbsp;<a name="ASM%20GPF">ASM GPF</a>,
Next:&nbsp;<a rel=next href="#ASM%20and%20C">ASM and C</a>,
Previous:&nbsp;<a rel=previous href="#Converting%20ASM">Converting ASM</a>,
Up:&nbsp;<a rel=up href="#Converting">Converting</a>
<br>

<h2>17.3 Converted code GP Faults!</h2>

<p><em><strong>Q</strong>: OK, I've succeeded in converting and compiling my assembly-language
program, but when I run it, I get "Segmentation Violation" and "General
Protection Fault".  This program works when compiled with <small>MASM</small>, so
how can this be?</em>

<br><p>
<p><strong>A</strong>: In DJGPP, your program runs in <strong>protected mode</strong>.  There are
certain things you can't do in protected-mode programs (that's why it is
called protected mode).  This issue is too complex to describe here, so
only a few of the more important aspects will be briefly mentioned.  If
you are serious about writing assembly language protected-mode code, or
have a large body of existing code to convert to protected mode, you
should read any of the available books about protected-mode programming
with 80x86 processors.

<p>Here is a short list of some of the techniques found in many real-mode
programs, which will trigger protection violation or erratic behavior in
protected mode:

<ul>
<li>Loading arbitrary values into segment registers, then using them to
reference code or data.

<li>Referencing code with data segment register, or vice versa.

<li>Assuming certain locations (like BIOS area or video memory) will be found
at certain absolute addresses.

<li>Calling DOS or BIOS services with <code>INT NN</code> instruction.

<li>Hooking interrupts by poking absolute addresses. 
</ul>

<p>If your code uses one or more of these techniques, refer to
<a href="#Low-level">low-level programming chapter</a>, which describes the DJGPP facilities
that will allow you to rewrite your code.

<p><hr>
Node:&nbsp;<a name="ASM%20and%20C">ASM and C</a>,
Next:&nbsp;<a rel=next href="#OBJ%20and%20LIB">OBJ and LIB</a>,
Previous:&nbsp;<a rel=previous href="#ASM%20GPF">ASM GPF</a>,
Up:&nbsp;<a rel=up href="#Converting">Converting</a>
<br>

<h2>17.4 Problems with combining assembly and C/C<tt>++</tt> modules</h2>

<p><em><strong>Q</strong>: Which register can I safely change in my assembly code that is
called from a C program?</em>

<br><p>
<p><em><strong>Q</strong>: How come my program that calls assembly-language functions
crashes with a GPF, but only if I compile it with -O2?</em>

<br><p>
<p><em><strong>Q</strong>: When I try to link my assembly modules with a C<tt>++</tt> program,
the linker complains about the functions I wrote in assembly!</em>

<br><p>
<p><strong>A</strong>: You can safely clobber <small>EAX</small>, <small>ECX</small>, <small>EDX</small>, <small>FS</small> and
<small>GS</small>, as well as <small>EFLAGS</small> and the floating-point registers
(including the FPU control and status words), but must save and restore
all other registers at the end of your assembly function.  Failure to
preserve, e.g., <small>ESI</small>, <small>EDI</small>, <small>EBX</small>, <small>ESP</small> or <small>DS</small> in
functions written in assembly can cause a C program linked with such
functions to crash, since GCC expects those registers to be preserved
across function calls.  Special-purpose registers such as <small>GDTR</small>,
<small>LDTR</small>, <small>CR*</small>, and <small>DR*</small>, although GCC and the DJGPP library
don't use them, should probably not be touched at all, but if you do,
it's a good idea to save and restore them.

<p>Functions written in assembly or in C that are meant to be linked with
C<tt>++</tt> programs should be declared <code>extern "C"</code> in their
prototype, like this:

<pre>#ifdef __cplusplus
extern "C" {
#endif

int my_assembly_func (int);

#ifdef __cplusplus
}
#endif
</pre>

<p>This example shows how to produce a prototype that would work with both
C and C<tt>++</tt> programs; it is usually placed in a <code>.h</code> header file
that is meant to be <code>#include</code>d in the C or C<tt>++</tt> programs.

<p>This <code>extern "C"</code> declaration prevents the C<tt>++</tt> compiler from
mangling the names of external functions according to the usual C<tt>++</tt>
rules.  (The name-mangling is needed because C<tt>++</tt> allows several
different functions to have the same name but different types of
arguments.)

<p><hr>
Node:&nbsp;<a name="OBJ%20and%20LIB">OBJ and LIB</a>,
Next:&nbsp;<a rel=next href="#16-bit%20code">16-bit code</a>,
Previous:&nbsp;<a rel=previous href="#ASM%20and%20C">ASM and C</a>,
Up:&nbsp;<a rel=up href="#Converting">Converting</a>
<br>

<h2>17.5 I want to use a <code>.obj</code> or <code>.lib</code> code with DJGPP</h2>

<p><em><strong>Q</strong>: I have a set of useful functions in a <code>.obj</code> format, but no
source code.  Can I use them with my DJGPP program?</em>

<br><p>
<p><em><strong>Q</strong>: I have this <code>ACMELUXE.LIB</code> library of functions which I
want to use.  I've extracted all the <code>.obj</code> files, but when I try to
link them with my program, GCC complains: "File format not recognized". 
Can't I use these object files?</em>

<br><p>
<p><em><strong>Q</strong>: I've got a bunch of <code>.obj</code> files I want to use.  I've ran
AR to make a GCC-style <code>.a</code> object library, but got an error message
from GCC saying "couldn't read symbols: No symbols".  How can I link
them with my code?</em>

<br><p>
<p><strong>A</strong>: Sorry, you probably can't.  The GNU linker called by GCC doesn't
understand the format of <code>.obj</code> files which other DOS-based
compilers/assemblers emit.  Unless you can get the source of those
functions, convert it to protected-mode, flat-address model code and
compile them with GCC, you most probably won't be able to use
them<a rel=footnote href="#fn-29"><sup>29</sup></a>.

<p>However, if you are really desperate, one conversion tool you might try
is <code>OBJ2BFD</code>.  It was written by <a href="mailto:robert.hoehne@gmx.net">Robert Hoehne</a> based on the <code>EMXAOUT</code> utility from the
<code>emx/gcc</code> package.  <code>OBJ2BFD</code> requires the <code>.obj</code> files
to be written for the flat-address memory model and will reportedly
complain if you feed it with code written for segmented memory models. 
<code>OBJ2BFD</code> is available <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2apps/o2bfd01b.zip">from the DJGPP sites</a>.

<p>Another automated conversion tool called <code>OBJ2COFF</code> was written
by the SPiRiT team, and it can be used to convert <code>.obj</code> object
files and <code>.lib</code> libraries to <code>COFF</code> format, provided that the
original <code>.obj</code> files have been written for flat-address memory
model.

<p><code>OBJ2COFF</code> is available via anonymous FTP transfer <a href="ftp://x2ftp.oulu.fi/pub/msdos/programming/convert/o2cv10.arj">from the Oulu MSDOS repository</a>.  If you have
any problems with it or questions about it, send them to <a href="mailto:mb002@hi.ft.hse.nl">its author Rico</a> or to <a href="mailto:george@il.ft.hse.nl">George van Venrooij</a>.  Note that the authors of <code>OBJ2COFF</code> have
explicitly prohibited commercial use, so you shouldn't use
<code>OBJ2COFF</code> for converting commercial object files.

<p>You can also try using <small>LIB32</small> librarian from Microsoft C8 to convert
object files to COFF.

<p>The main problem with these conversion methods is, of course, that most
object files you'd want to converted were written for real-mode programs
in memory models other than flat, and without extensive modifications
would crash your program anyway<small>...</small>. (See <a href="#ASM%20GPF">previous question</a>.)

<p><hr>
Node:&nbsp;<a name="16-bit%20code">16-bit code</a>,
Next:&nbsp;<a rel=next href="#NEAR%20and%20FAR">NEAR and FAR</a>,
Previous:&nbsp;<a rel=previous href="#OBJ%20and%20LIB">OBJ and LIB</a>,
Up:&nbsp;<a rel=up href="#Converting">Converting</a>
<br>

<h2>17.6 I <strong>must</strong> use my 16-bit code with DJGPP!!</h2>

<p><em><strong>Q</strong>: If I cannot use 16-bit <code>.obj</code> files, then I would have to
give up using DJGPP.  I simply cannot live without these <code>.obj</code>
files.  Are you <strong>really</strong> sure there is nothing I can do??</em>

<br><p>
<p><strong>A</strong>: If you need your old code <em>that</em> badly, then there might be a
way, albeit a cumbersome one.  You can write a 16-bit, real-mode program
and link it with your precious functions you can't live without.  Have
this program spawn a DJGPP-compiled program and make the two communicate
with each other via a buffer allocated in low memory, or via command-line
parameters passed to the 32-bit program by the <code>spawnXX</code> function
call.  On the DJGPP side, you can directly call 16-bit functions from the
real-mode program using the library function called
<code>__dpmi_simulate_real_mode_procedure_retf</code>,
provided the 16-bit program passes the CS:IP values of these functions to
the 32-bit program.  You can even put your 16-bit code as binary
instructions into a buffer allocated in low memory and call it with
<code>__dpmi_simulate_real_mode_procedure_retf</code> (but if you can do that,
you can probably also disassemble the code into a source form and submit
it to <code>Gas</code>).

<p><em>Now</em> will you consider sticking with DJGPP? 
<em>Please??<small>...</small></em>

<p><hr>
Node:&nbsp;<a name="NEAR%20and%20FAR">NEAR and FAR</a>,
Next:&nbsp;<a rel=next href="#Pseudo-registers">Pseudo-registers</a>,
Previous:&nbsp;<a rel=previous href="#16-bit%20code">16-bit code</a>,
Up:&nbsp;<a rel=up href="#Converting">Converting</a>
<br>

<h2>17.7 What should I do with those "near" and "far" declarations?</h2>

<p><em><strong>Q</strong>: I have this program that I need to port to DJGPP, but it is full
of pointers and functions declared with the "near" and "far"
keywords which GCC doesn't grok.  What shall I do?</em>

<br><p>
<p><em><strong>Q</strong>: A program written for a 16-bit compiler uses the MK_FP or _MK_FP
macro, but DJGPP doesn't seem to have it.  How should I port it?</em>

<br><p>
<p><em><strong>Q</strong>: How do I compute a segment and an offset of a protected-mode
address?</em>

<br><p>
<p><strong>A</strong>:  In DJGPP you use a flat address space with no segmentation (it
is a kind of tiny model, since <small>CS = DS = SS</small>, but with a <em>very</em>
large segment), so you don't need far pointers in the sense they are
used in 16-bit code. Just define away those keywords and you will be
fine:

<pre>  #define far
  #define near
  #define huge
  #define _far
  #define _near
  #define _huge
</pre>

<p>Alternatively, you could add suitable <code>-D</code> switches to the GCC
command line, like this:

<pre>  gcc -Dfar= -Dnear= -Dhuge= -c myprog.c
</pre>

<p>Macros that create far pointers from the segment and offset (usually
called <code>MK_FP</code> or <code>_MK_FP</code>) are mostly used in 16-bit code to
access certain absolute addresses on memory-mapped peripheral devices,
like the video RAM.  These chores are done differently in DJGPP.  Here's
one possible way to express <code>MK_FP</code> in DJGPP (courtesy of <a href="mailto:sandmann@clio.rice.edu">Charles Sandmann</a>):

<pre>  #include &lt;sys/nearptr.h&gt;
  #include &lt;crt0.h&gt;

  void * MK_FP (unsigned short seg, unsigned short ofs)
  {
    if ( !(_crt0_startup_flags &amp; _CRT0_FLAG_NEARPTR) )
      if (!__djgpp_nearptr_enable ())
        return (void *)0;
    return (void *) (seg*16 + ofs + __djgpp_conventional_base);
  }
</pre>

<p>The above uses the DJGPP <code>nearptr</code> facility, which effectively
disables memory protection and doesn't work on some systems (e.g. NT);
if you prefer to use <code>farptr</code> functions (which are safer and work
with all known DPMI hosts), you will need to rewrite the code that uses
these macros, so don't bother writing a replacement for the <code>MK_FP</code>
macro itself.  The details are described in <a href="#Xfer">Accessing absolute addresses</a>, below.

<p>Macros that extract the segment and the offset from a far pointer
(called <code>FP_SEG</code> and <code>FP_OFF</code>) are required in 16-bit code to
pass addresses in registers when calling real-mode DOS or BIOS services,
like functions of interrupt 21h.  See <a href="#Pointer%20segment">How to call real-mode interrupt functions</a>, which describes how that should be done in DJGPP; here, too,
you won't need to port the macros but instead rewrite the code that
calls the DOS or BIOS service.  In particular, you <strong>cannot</strong>
compute a real-mode segment and offset of a protected-mode address,
because real-mode addresses can only access the first 1MB of memory,
whereas the variables of DJGPP programs all live above the 1MB mark.

<p><hr>
Node:&nbsp;<a name="Pseudo-registers">Pseudo-registers</a>,
Previous:&nbsp;<a rel=previous href="#NEAR%20and%20FAR">NEAR and FAR</a>,
Up:&nbsp;<a rel=up href="#Converting">Converting</a>
<br>

<h2>17.8 How to convert _AX pseudo-registers?</h2>

<p><em><strong>Q</strong>: Since DJGPP doesn't recognize Borland-style pseudo-register
variables like <code>_AX</code>, how should I port code which uses them to
DJGPP?</em>

<br><p>
<p><strong>A</strong>:  These pseudo-variables are typically used in two different
contexts:

<ul>
<li>When calling real-mode interrupt services.

<p>To port such code to DJGPP, use the fields of the <code>__dpmi_regs</code>
structure (declared on the <code>dpmi.h</code> header file) to set the
register values, and library function <code>__dpmi_int</code> to invoke the
interrupt service.  For example, consider the following code snippet:

<pre>  #include &lt;dos.h&gt;
  void _highcolor (void)
  {
    _AH = 0x10;
    _AL = 0x03;
    _BL = 0;
    geninterrupt (0x10);
  }
</pre>

<p>Here's one way to express this in DJGPP<a rel=footnote href="#fn-30"><sup>30</sup></a>:

<pre>  #include &lt;dpmi.h&gt;
  void _highcolor (void)
  {
    __dpmi_regs r;

    r.h.ah = 0x10;
    r.h.al = 0x03;
    r.h.bl = 0;
    __dpmi_int (0x10, &amp;r);
  }
</pre>

<p>Please read <a href="#int86">how to call real-mode interrupt functions</a>, elsewhere in this document, for further
details on how call real-mode services from DJGPP programs.

</p><li>Immediately before or after an inline assembly code.

<p>GCC features extensive inline assembly facilities which allow you to
assign values to, or read values from registers from the inline assembly
code.  Since you will have to rewrite your inline assembly code anyway,
make it refer directly to your C variables, instead of referencing
pseudo-register variables from C.  See <a href="#Inline%20Asm">description of inline assembly</a>, for further info. 
</ul>

<p><hr>
Node:&nbsp;<a name="Low-level">Low-level</a>,
Next:&nbsp;<a rel=next href="#Legalese">Legalese</a>,
Previous:&nbsp;<a rel=previous href="#Converting">Converting</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>18 Low-level DOS/BIOS and Hardware-oriented Programming</h1>

<p>This chapter sheds some light on a few aspects of writing DJGPP programs
which interact with hardware or use interrupts.

<ul>
<li><a href="#int86">int86</a>:                  int86 doesn't always work. 
<li><a href="#Pointer%20segment">Pointer segment</a>:        How to specify pointers when you call an interrupt. 
<li><a href="#Zero%20SP">Zero SP</a>:                How to call real-mode procedures. 
<li><a href="#Xfer">Xfer</a>:                   Moving data to and from conventional memory. 
<li><a href="#Move%20structs">Move structs</a>:           How to move structs from conventional memory. 
<li><a href="#Fat%20DS">Fat DS</a>:                 Fast direct access to memory-mapped devices. 
<li><a href="#Above%201MB">Above 1MB</a>:              Interact with memory-mapped devices above 1MB. 
<li><a href="#RMCB">RMCB</a>:                   How to let DOS/BIOS call your code. 
<li><a href="#Hardware%20interrupts">Hardware interrupts</a>:    How to hook HW interrupts from DJGPP. 
<li><a href="#_go32%20vs%20__dpmi">_go32 vs __dpmi</a>:        Which functions should you use? 
<li><a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>:        Does your machine wedge?  Here are some reasons. 
<li><a href="#Inline%20Asm">Inline Asm</a>:             How to write inline assembly with GCC. 
<li><a href="#DMA">DMA</a>:                    How to use DMA from DJGPP programs. 
</ul>

<p><hr>
Node:&nbsp;<a name="int86">int86</a>,
Next:&nbsp;<a rel=next href="#Pointer%20segment">Pointer segment</a>,
Previous:&nbsp;<a rel=previous href="#Low-level">Low-level</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.1 Got "Unsupported INT 0xNN" calling <code>int86</code></h2>

<p><em><strong>Q</strong>: Why does my program crash with "Unsupported DOS request 0xNN"
or "Unsupported INT 0xNN" when I call <code>int86</code> or <code>intdos</code>
functions to invoke a software interrupt?</em>

<br><p>
<p><strong>A</strong>: Calling real-mode DOS or BIOS services from protected-mode
programs requires a switch to real mode, so the <code>int86</code> family of
functions in the DJGPP library should reissue the INT instruction after
the mode switch.  However, some services require pointers to memory
buffers.  Real-mode DOS/BIOS functions can only access buffers in
conventional memory, so <code>int86</code> has to move data between your
program and low memory to transparently support these services.  But
this means <code>int86</code> should know about all these services to perform
these chores correctly, because each service has its own layout and size
of the buffer(s).  While <code>int86</code> supports many of these services,
it doesn't support all of them.  The supported functions are listed in
the library reference, see
<a href="libc.html#description%20of%20services%20supported%20by%20int86">int86</a>. 
For those services it doesn't support, you will have to call the
<code>__dpmi_int</code> library function instead; it is also documented in the
library reference.  <code>__dpmi_int</code> requires that you set up all the
data as required by the service you are calling, including moving the
data to and from low memory (see <a href="#Pointer%20segment">how to use buffers with DOS/BIOS services</a>).

<p>Note that calling <code>int86</code> and <code>intdos</code> can sometimes cause
trouble due to size (16 bits as opposed to 32 bits) of the members in
the <code>union REGS</code> structure.  Do <em>not</em> assume that
e.g. <code>regs.x.ax</code> is always 16 bit!  This problem and the facilities
available to specify the width of the registers are all described in the
library reference; see
<a href="libc.html#description%20of%20the%20int86%20function">int86</a>.

<p>In particular, programs which interface with the mouse via calls to the
<code>int86</code> library function, should mask off the high 16 bits of the
registers which report mouse position and other values, since the high
16 bits aren't necessarily zeroed (which will wreak havoc in any program
that interfaces to the mouse).

<p>For these reasons, it is generally recommended to use <code>__dpmi_int</code>
instead of <code>int86</code> and <code>intdos</code>.

<p><hr>
Node:&nbsp;<a name="Pointer%20segment">Pointer segment</a>,
Next:&nbsp;<a rel=next href="#Zero%20SP">Zero SP</a>,
Previous:&nbsp;<a rel=previous href="#int86">int86</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.2 How to use buffers with DOS/BIOS services</h2>

<p><em><strong>Q</strong>: I want to call a DOS/BIOS function which requires a pointer to a
buffer in, e.g. <small>ES:DI</small> (or any other) register pair.  How do I get
the segment to put into the <small>ES</small> register?</em>

<br><p>
<p><em><strong>Q</strong>: I have some real-mode code that calls the <code>segread</code>
function.  How can I make it work with DJGPP?</em>

<br><p>
<p><strong>A</strong>: If you call <code>__dpmi_int</code>, then you must put into that
register pair an address of some buffer in <em>conventional</em> memory
(in the first 1 MByte).  If the size of that buffer doesn't have to be
larger than the size of transfer buffer used by DJGPP (at least 2KB,
16KB by default), then the easiest way is to use the transfer buffer. 
(Library functions don't assume the contents of the transfer buffer to
be preserved across function calls, so you can use it freely.)  That
buffer is used for all DOS/BIOS services supported by DJGPP, it resides
in conventional memory, and is allocated by the startup code.  DJGPP
makes the address and the size of the transfer buffer available for you
in the <code>_go32_info_block</code> external variable, which is documented in
the library reference.  Check the size of the buffer (usually, 16K
bytes, but it can be made as small as 2KB), and if it suits you, use its
linear address this way:

<pre>dpmi_regs.x.di =
 _go32_info_block.linear_address_of_transfer_buffer &amp; 0x0f;
dpmi_regs.x.es =
 _go32_info_block.linear_address_of_transfer_buffer &gt;&gt; 4;
</pre>

<p>For your convenience, the header file <code>go32.h</code> defines a macro
<code>__tb</code> which is an alias for
<code>_go32_info_block.linear_address_of_transfer_buffer.</code>

<p>Here's a simple example of calling a real-mode service.  This function
queries DOS about the country-specific information, by calling function
38h of the DOS Interrupt 21h, then returns the local currency symbol as
a C-style null-terminated string in <code>malloc</code>ed storage.  Note how
the transfer buffer is used to retrieve the info: the address of the
transfer buffer is passed to DOS, so it stores the data there, and the
function then retrieves part of that data using <code>dosmemget</code>.

<pre> #include &lt;sys/types.h&gt;
 #include &lt;sys/movedata.h&gt;
 #include &lt;dpmi.h&gt;
 #include &lt;go32.h&gt;

 char * local_currency (void)
 {
   __dpmi_regs regs;

   regs.x.ax = 0x3800;        /* AH = 38h, AL = 00h  */
   regs.x.ds = __tb &gt;&gt; 4;     /* transfer buffer address in DS:DX  */
   regs.x.dx = __tb &amp; 0x0f;
   __dpmi_int (0x21, &amp;regs);  /* call DOS  */
   if (regs.x.flags &amp; 1)      /* is carry flag set?  */
     /* The call failed; use the default symbol.  */
     return strdup ("$");
   else
     {
       /* The call succeeded.  The local currency symbol is stored
          as an ASCIIZ string at offset 2 in the transfer buffer.  */
       char *p = (char *)malloc (2);
       if (p != 0)
         dosmemget (__tb + 2, 2, p);
       return p;
     }
  }
</pre>

<p>If the size of the transfer buffer isn't enough, you will have to allocate
your own buffer in conventional memory with a call to the
<code>__dpmi_allocate_dos_memory</code> library function.  It returns to you the
segment of the allocated block (the offset is zero).  If you only need a
small number of such buffers which can be allocated once, then you don't
have to worry about freeing them: they will be freed by DOS when your
program calls <code>exit</code>.  The only adverse effect of not freeing DOS
memory until the program exits is that if you need to run subsidiary
programs (via <code>spawnXX</code> or <code>system</code> library functions), those
programs will have less conventional memory.  Usually, this aspect
should only be considered if a program allocates very large (like 100KB)
buffers in conventional memory.

<p>DOS memory can also be allocated by calling function 48h of Interrupt
21h via <code>__dpmi_int</code> and freed by calling function 49h.  The only
disadvantage of this method is that it doesn't create a protected-mode
selector for the allocated block, so you must use the <code>_dos_ds</code>
selector to reference the allocated memory, which is less safe: the
<code>_dos_ds</code> selector spans the entire first megabyte of memory,
whereas the selector created by <code>__dpmi_allocate_dos_memory</code> spans
only the allocated block, and will therefore catch bugs that reference
memory outside that block.

<p>For bullet-proof code, you should test the size of the transfer buffer at
runtime and act accordingly.  This is because its size can be changed by
the <code>STUBEDIT</code> program without your knowledge (however, it can
never be less than 2KB, the size of the stub, because memory used by the
stub is reused for the transfer buffer).

<p>The function <code>segread</code> used by some real-mode compilers does not
exist in DJGPP.  It is used in real-mode code to store the values of the
<small>CS</small>, <small>DS</small>, <small>SS</small>, and <small>ES</small> registers into a <code>struct
SREGS</code> variable, when some service that needs one of these registers is
called from code written for small and tiny memory models.  DJGPP has
the functions <code>_my_cs</code>, <code>_my_ds</code>, and <code>_my_ss</code> for that
purpose (<small>ES</small> and <small>DS</small> always hold the same selector in code
produced by GCC from a C or C<tt>++</tt> source, so you don't need a fourth
function).  However, these will not be useful if the original real-mode
code used the segment registers to invoke DOS/BIOS services.  For these
cases, you will need to rewrite the code so that it copies the data
to/from the transfer buffer and passes the transfer buffer address via
<code>__dpmi_int</code>, as described above.

<p>If you use <code>int86x</code> or <code>intdosx</code> to call a DOS or BIOS
function supported by them, then just put the address of your buffer
into the register which expects the offset (<code>regs.x.di</code>), forget
about the segment, and call <code>int86</code> or <code>intdos</code> instead of
<code>int86x</code> and <code>intdosx</code>.  The DOS/BIOS functions supported by
<code>int86</code> and <code>intdos</code> are processed specially by the library,
which will take care of the rest.  Note that calling <code>int86x</code> and
<code>intdosx</code> will usually crash your program, since they expect that
you pass them a real-mode <code>segment:offset</code> address to a buffer in
conventional memory; this is done more easily with <code>__dpmi_int</code>,
as described above, so I don't recommend using <code>int86x</code> and
<code>intdosx</code>.

<p><hr>
Node:&nbsp;<a name="Zero%20SP">Zero SP</a>,
Next:&nbsp;<a rel=next href="#Xfer">Xfer</a>,
Previous:&nbsp;<a rel=previous href="#Pointer%20segment">Pointer segment</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.3 How to call real-mode functions</h2>

<p><em><strong>Q</strong>: My program crashes/doesn't do what it should when I call
<code>__dpmi_simulate_real_mode_procedure_retf</code>.</em>

<br><p>
<p><strong>A</strong>: You should zero out some of the members of the <code>__dpmi_regs</code>
structure before you call the DPMI function that invoke real-mode
procedures.  Random values in these members can cause your program to
behave erratically.  The members in point are <code>.x.ss</code>,
<code>.x.sp</code>, and <code>.x.flags</code>.  When <code>.x.ss</code> and <code>.x.sp</code>
are zeroed, the DPMI host will provide a stack for the call.  This stack
is usually large enough, but sometimes you'll need to use your own,
larger stack, e.g., if you expect interrupts to nest deeply, or if your
handler needs a lot of stack space<a rel=footnote href="#fn-31"><sup>31</sup></a>.  In these cases you should point
<code>.x.ss</code> and <code>.x.sp</code> to a larger buffer which is in
conventional memory (possibly part of the transfer buffer).

<p>If <small>SS:SP</small> isn't zero, it will be used as the address of the stack
for the interrupt handler, so if it points to a random location, your
program will most certainly crash.  A non-zero <small>FLAGS</small> member can
also make the processor do all kinds of weird things (e.g., imagine that
the single-step or the debug bit is set!).

<p><hr>
Node:&nbsp;<a name="Xfer">Xfer</a>,
Next:&nbsp;<a rel=next href="#Move%20structs">Move structs</a>,
Previous:&nbsp;<a rel=previous href="#Zero%20SP">Zero SP</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.4 How to move data between your program and conventional memory</h2>

<p><em><strong>Q</strong>: How can I move data between my program and the transfer buffer?</em>

<br><p>
<p><em><strong>Q</strong>: How do I access my peripheral card which is memory-mapped to an
address between 640K and 1M?</em>

<br><p>
<p><em><strong>Q</strong>: How can I read or change a value of one of the variables in the
BIOS data area?</em>

<br><p>
<p><em><strong>Q</strong>: How can I peek at an address whose far pointer I get from an
INT&nbsp;21h call?</em>

<br><p>
<p><strong>A</strong>: Usually, memory-mapped devices or absolute addresses below 1MB
mark are outside your program's address space, so you cannot access them
directly.  "Direct access", when you just dereference a pointer, means
in DJGPP that you use your program's <small>DS</small> selector, and all the
addresses are offsets relative to the base of that selector.  So first,
you will need a special selector that will allow you to access your
device or absolute address.  There are several methods you can get such
a selector:

<ul>
<li>Use the selector that DJGPP creates for itself to access conventional
memory.  DJGPP makes this selector available to you via the
<code>_dos_ds</code> macro (defined on the <code>go32.h</code> header file).  This
selector has base address of 0 and a limit of 1MB+64KB, so you can use
it to access any address in the conventional memory, including the UMBs,
but the relatively large limit allows a buggy program to overwrite
portions of DOS memory<a rel=footnote href="#fn-32"><sup>32</sup></a>.  The advantage of <code>_dos_ds</code> is obviously
that you don't have to create it, and that it is good for accessing
every region in the first MByte range.

<li>Create your own selector that spans only the region of memory that you
want to access, and use that selector instead of <code>_dos_ds</code>.  For
example, here's a code snippet to set up a selector which provides
access to 32KB of text-mode video memory at <code>0xB800:0000</code>, courtesy
of <a href="mailto:bill@tanihwa.org">Bill Currie</a><a rel=footnote href="#fn-33"><sup>33</sup></a>:

<pre>  int TxtVRAMSetupSelector (void)
  {
     static char selectorData[8] = {
       0xff, 0x7f, 0x00, 0x80,
       0x0b, 0xf3, 0x40, 0x00
     };
     int screenSelector = __dpmi_allocate_ldt_descriptors (1);
     if (__dpmi_set_descriptor (screenSelector, selectorData) &lt; 0)
       abort ();
     return screenSelector;
  }
</pre>

<p>Calling <code>__dpmi_allocate_dos_memory</code> creates a protected-mode
selector that spans the allocated block.  You can use that selector to
access the allocated memory.

<p>The advantages of using a special selector are that (a) you can set up
the selector limit such that it only covers the memory region that you
need, thus protection of the rest of memory is retained; and (b) you may
set the base address to point to the beginning of the specific memory
region you need to access, so that you don't have to add the base
address for every access, making the access faster.

</p><li>Use the DPMI service which creates a selector to access a specific
real-mode segment address.  The DJGPP library has a function
<code>__dpmi_segment_to_descriptor</code> which is a wrapper around that DPMI
service.  It is easier to use than the <code>__dpmi_set_descriptor</code>
function above, since you don't have to mess with the 8-byte descriptor
buffer, but it always defines a 64KB limit by default.  Here is an
example of code which gets a selector to access 64KB of video RAM
beginning at <code>0xA000:0000</code>:

<pre>  short video = __dpmi_segment_to_descriptor(0xa000);
</pre>

<p>Note that descriptors created by this function should never be modified
or freed.  For this reason, you should use this function sparingly.  For
instance, if your program needs to examine various real mode addresses
using the same selector, you should allocate a descriptor and change the
base using the <code>__dpmi_set_segment_base_address</code> library function
instead of using <code>__dpmi_segment_to_descriptor</code> to allocate
separate descriptor for each address. 
</ul>

<p>Once you have a selector, you can use one of three methods to access
your absolute addresses using that selector:

<ul>
<li>If you want to access a byte, a 16-bit word, or a 32-bit double word,
use the "far pointer" functions declared on the <code>&lt;sys/farptr.h&gt;</code>
header file.  You should convert any real-mode far pointer
segment:offset pair into a <dfn>linear address</dfn> (i.e., segment*16 +
offset), and use <code>_dos_ds</code> or any other selector which allows
access to conventional memory, like this:

<pre> unsigned char value = _farpeekb(_dos_ds, segment * 16 + offset);
</pre>

<p>To access DOS memory allocated by <code>__dpmi_allocate_dos_memory</code>, use
the selector returned by that function; a zero offset designates the
beginning of the allocated block.

<p>For access to memory-mapped devices for which you have allocated a
dedicated descriptor, use the selector of that descriptor instead of
<code>_dos_ds</code> in the above example, and use the offset into the on-board
device memory as the offset.  For example, the following snippet
writes a value of 3 to the 10th dword of the device:

<pre> long lword = 3;
 _farpokel (selector, 9, lword);
</pre>

<p>Use <code>_farpeekw</code> to peek at 16-bit shorts and <code>_farpeekl</code> to
peek at 32-bit longs.  If you need to access several (non-contiguous)
values in a loop, use the corresponding <code>_farnspeekX</code> functions which
allow you to set the selector only once, as opposed to passing it with
every call (but be sure the loop doesn't call any function that itself
sets the selector; see the library reference for more details).

<p>There is a corresponding set of <code>_farpokeX</code> and <code>_farnspokeX</code>
functions to poke (change the values of) such memory locations.

<p>These functions have an advantage of emitting inline assembly code when
you compile with optimizations, so they are very fast.  See the library
reference Info file for further details about these functions.

</p><li>If you need to access more than 4 contiguous bytes, use <code>dosmemget</code>
and <code>dosmemput</code> library functions.  They also require you to
convert the segment:offset pair into a linear address, but they don't need
the conventional memory selector, as they can only be used to access the
conventional memory (they use <code>_dos_ds</code> internally).

<p>Note that some memory-mapped peripheral devices might require 16-bit word
accesses to work properly, so if <code>dosmemXXX</code> yields garbled
results, try <code>dosmemXXXw</code> or set up a loop which calls "farptr"
functions.

</p><li>For moving buffers to selectors other than <code>_dos_ds</code> (e.g.,
selectors created by one of the methods explained above), use the
<code>movedata</code> library function.  It requires that you pass a selector
and an offset for both the memory-mapped address and for the buffer in
your program's address space.  Use the <code>_my_ds()</code> function (note
that it's a <strong>function</strong>, not a variable!) to get the selector of
any variable in your program, and use the address of the variable (cast
to an <code>int</code>) as its "offset" or linear address.  <code>movedata</code>
is fast because it moves by 32-bit longs, but be careful with its use
when moving data to and from peripheral cards: some of them only support
8- or 16-bit wide data path, so moving data 4 bytes at a time won't gain
you much, and might even get you in trouble with some buggy BIOSes.  The
functions <code>movedatab</code> and <code>movedataw</code> are provided for moving
by bytes and by 16-bit words, respectively.

<p>For example, here is a code snippet that combines one of the methods for
allocating a descriptor for video RAM access with a call to
<code>movedata</code> to move a buffer to the graphics screen:

<pre>  short video = __dpmi_segment_to_descriptor(0xa000);
  movedata(_my_ds(), buffer, video, 0, 320*200);
</pre>

</p><li>For the fastest, but less safe, access to memory outside your usual
address space, you might consider using the "nearptr" functions
declared on the <code>sys/nearptr.h</code> header file; see the library
reference for more details.  Also see <a href="#Fat%20DS">description of how to get the fastest direct access to peripheral devices</a>, below. 
</ul>

<p><hr>
Node:&nbsp;<a name="Move%20structs">Move structs</a>,
Next:&nbsp;<a rel=next href="#Fat%20DS">Fat DS</a>,
Previous:&nbsp;<a rel=previous href="#Xfer">Xfer</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.5 How to move structs returned by real-mode services?</h2>

<p><em><strong>Q</strong>: My program uses the contents of a structure returned by a VBE
function, but some of the struct members are garbled!</em>

<br><p>
<p><strong>A</strong>: Most probably, this happens because of incorrect declaration of
the structure in your program.  Many people copy a declaration from some
real-mode program, and that is exactly what gets them into trouble.

<p>Here are some gotchas in this context:

<ul>
<li>The structure should be declared with <code>__attribute__((packed))</code>, to
prevent GCC from inserting gaps between some members to make them
properly aligned for faster access (see <a href="#Struct%20size">how gcc aligns structs</a>).  C programs can
declare the entire struct with the packed attribute, but C<tt>++</tt>
programs will need to declare each member with it, see <a href="#Struct%20size">__attribute__((packed))</a>.

<li>If the real-mode struct has members which are pointers, you need to
replace each pointer with a pair of an offset and a segment (in that
order, due to Intel's little-endian byte order).  This is because
real-mode far pointers cannot be used as protected-mode pointers: you
cannot dereference them to get access to the object they point to. 
Declaring them as a segment:offset pair will force you into correct
usage, as shown below.

<li>To use pointers which are members of the structure, you will have to
employ some of the methods described in <a href="#Xfer">section about using the transfer buffer</a>.  For example, to copy data whose real-mode address
is returned in a struct, use <code>dosmemget</code> or one of the
<code>_farpeekX</code> family of functions in conjunction with the
<code>_dos_ds</code> selector, and don't forget to compute the linear address
as <code>segment * 16 + offset</code>, where <code>segment</code> and <code>offset</code>
are taken from the struct members converted from the far pointers in the
original real-mode code.

<li>If the pointer is to a function, you will need to use the library
function <code>__dpmi_simulate_real_mode_procedure_retf</code> to call it
(don't forget to zero out the <code>.x.ss</code> and <code>.x.sp</code> members of
the <code>__dpmi_regs</code> structure!).  See <a href="#Zero%20SP">real-mode functions</a>.

<li>Many real-mode compilers use 16-bit <code>int</code>s, whereas in DJGPP, an
<code>int</code> is 32-bit wide.  You need to change the declaration of all
struct members from <code>int</code> to <code>short</code>, and from <code>unsigned</code>
to <code>unsigned short</code>. 
</ul>

<p>For example, the following real-mode structure declaration:

<pre> struct ncb {
   unsigned ncb_command;
   int ncb_status;
   char far *ncb_buffer;  /* a far pointer to a buffer */
   char ncb_name[32];
   int far (*ncb_dispatch)();  /* a pointer to a far function */
 };
</pre>

<p>should be converted to this in a DJGPP program:

<pre> struct ncb {
   unsigned short ncb_command __attribute__((packed));
   short ncb_status __attribute__((packed));
   unsigned short ncb_buf_offset __attribute__((packed));
   unsigned short ncb_buf_segment __attribute__((packed));
   char ncb_name[32] __attribute__((packed));
   unsigned short ncb_dispatch_offset __attribute__((packed));
   unsigned short ncb_dispatch_segment __attribute__((packed));
 };
</pre>

<p>With the above declaration of <code>struct ncb</code>, the following real-mode
code:

<pre> int status = ncb.ncb_status;
 int value  = *(int far *)ncb.buf[3];
</pre>

<p>should read in DJGPP:

<pre> short status, value;
 struct ncb ncb_struct

 /* Fetch the structure from the transfer buffer.  */
 dosmemget (__tb, sizeof (struct ncb), &amp;ncb_struct);
 status = ncb_struct.ncb_status;
 value  = _farpeekw (_dos_ds,
                     ncb_struct.ncb_buf_segment*16
                     + ncb_buf_offset + 3);
</pre>

<p>In other words, you need to add code that moves the structure to and
from the transfer buffer, and replace each pointer dereference with a
call to an appropriate <code>_farpeekX</code> or <code>_farpokeX</code> function.

<p><hr>
Node:&nbsp;<a name="Fat%20DS">Fat DS</a>,
Next:&nbsp;<a rel=next href="#Above%201MB">Above 1MB</a>,
Previous:&nbsp;<a rel=previous href="#Move%20structs">Move structs</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.6 Fast access to absolute addresses</h2>

<p><em><strong>Q</strong>: The "farptr" functions are too slow for my application which
<strong>MUST</strong> have direct access to a memory-mapped device under DPMI. 
How can I have this in DJGPP?  My entire optimized graphics library is at
stake if I can't! <tt>:-(</tt></em>

<br><p>
<p><strong>A</strong>:  The following so-called <b>Fat DS</b>, or "nearptr" method was
suggested by <a href="mailto:junaid@barney.eng.monash.edu.au">Junaid A. Walker</a>
(he also posted a program which uses this technique to access the video
RAM; you can look it up by searching the mailing list archives).  But
first, a word of warning: the method I'm about to describe effectively
disables memory protection, and so might do all kinds of damage if used
by a program with a wild pointer.  It is depressingly easy, e.g., to
overwrite parts of DOS code or data with "Fat DS" on.  Or, as <a href="mailto:turnbull@shako.sk.tsukuba.ac.jp">Stephen Turnbull</a>
has put it when he read the description of this trick:

<blockquote>
<strong>Surgeon General's WARNING</strong>:  The description below uses the
"Fat DS hack", a steroid derivative which gives your program great
strength, a thick neck, baldness, and is known to be closely linked with
the Alzheimer's disease. 
</blockquote>

<p>In addition to the above warning, experience shows that many programs
which use the safer "farptr" functions do not sacrifice performance at
all.  So, with the exception of a small number of programs, "nearptr"
is really a convenience trick: it allows you to treat memory-mapped
devices with usual C pointers, rather than with function calls. 
Therefore, I would generally advise <strong>against</strong> using "nearptr"
due to speed considerations, unless your program absolutely needs the
last percent of speed.

<p>Having said that, here is the trick: you change the limit of the segment
descriptor stored in <small>DS</small> to <code>0xffffffff</code> (i.e., -1), using
library function <code>__djgpp_nearptr_enable</code>.  After that, you have
access to all the memory which is currently mapped in.  This works due to
32-bit wrap-around in the linear address space to access memory at, say,
linear address 0xa0000 (which belongs to the VGA), or any other address
on your memory-mapped device, by adding the value of the global variable
<code>__djgpp_conventional_base</code> to the target address. 
<code>__djgpp_conventional_base</code> is the negated base address of the
<small>DS</small> selector that you program is using to access its data.  By
adding the value of <code>__djgpp_conventional_base</code>, you effectively
<em>subtract</em> the <small>DS</small> base address, which makes the result
zero-based, exactly what you need to access absolute addresses.

<p>You should know up front that this trick won't work with every DPMI
host.  Linux's DOSEmu and Windows/NT won't allow you to set such a huge
limit on the memory segment, because these operating systems take memory
protection seriously; in these cases <code>__djgpp_nearptr_enable</code> will
return zero--a sign of a failure.  CWSDPMI, QDPMI, Windows 3.X and
Windows 9X all allow this technique (OS/2 Warp seems to allow it too, at
least as of version 8.200), but some events break this scheme even for
those DPMI hosts which will allow it.  A call to <code>malloc</code> or any
other library function which calls <code>sbrk</code> might sometimes change
the base address of the <small>DS</small> selector and break this method unless
the base address is recomputed after <code>sbrk</code> call.  (The "nearptr"
functions support this recomputation by providing you with the
<code>__djgpp_conventional_base</code> variable, but it is <em>your</em>
responsibility to recompute the pointers using it.)  The same change can
happen when you call <code>system</code>, and as a result of some other events
external to the executing code thread, like multitasking or debugger
execution.

<p>You should also know that the <code>__djgpp_nearptr_enable</code> function
in DJGPP v2.0 didn't verify that the limit was properly set.  So if the
DPMI server would fail the call <strong>silently</strong>, the function won't
detect it and will not return a failure indication.  DJGPP v2.01
corrects this omission by always verifying that the DPMI host has
honored the request, and returns a failure indication if it hasn't.

<p>If you are aware of these limitations, and don't need your code to run
under all DPMI hosts, it might be the fix to your problems.

<p>Confused about how exactly should you go about using this technique in
your program?  Look at the docs of the "nearptr" functions in
the Info file <code>libc.info</code> (node <code>__djgpp_nearptr_enable</code>).

<p>Another possibility is to use the DPMI function <code>0x508</code> (a wrapper
function <code>__dpmi_map_device_in_memory_block</code> is available in the
DJGPP library) that can map any range of physical memory addresses into
a block that you allocate.  Note that this is a DPMI 1.0 functionality
which is <strong>not</strong> supported by most DPMI 0.9 hosts (CWSDPMI does
support it).  There is a convenience helper function
<code>__djgpp_map_physical_memory</code> in the DJGPP C library that you can
use to call these services.

<p>If you need a nearptr-style access to a certain region of memory which
is above the base address of the <small>DS</small> selector, you can enlarge the
limit of the <small>DS</small> selector just enough to cover the highest address
you need to access.  To this end, use the library function
<code>__dpmi_set_segment_limit</code> like this (thanks to <a href="mailto:rudd@cyberoptics.com">Eric Rudd</a> for posting this code):

<pre> unsigned long new_limit;

 if (__dpmi_set_segment_limit (_my_ds (), new_limit) == 0)
   {
     if (__dpmi_get_segment_limit (_my_ds ()) != new_limit)
       /* The DPMI host ignored the call.  Fail.  */
     else
       {
         __dpmi_set_segment_limit (__djgpp_ds_alias, new_limit);
         __dpmi_set_segment_limit (_my_cs (), new_limit);
         _crt0_startup_flags |= _CRT0_FLAG_NEARPTR;
       }
   }
 else
   /* The call failed.  */
</pre>

<p>Remember that <code>new_limit</code> should have all its lower 12 bits set,
otherwise the above snippet will not work!

<p><hr>
Node:&nbsp;<a name="Above%201MB">Above 1MB</a>,
Next:&nbsp;<a rel=next href="#RMCB">RMCB</a>,
Previous:&nbsp;<a rel=previous href="#Fat%20DS">Fat DS</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.7 Accessing absolute address above 1MB</h2>

<p><em><strong>Q</strong>: How can I access memory-mapped peripheral devices (or any other
absolute address) above 1 MByte mark?</em>

<br><p>
<p><strong>A</strong>:  You should use DPMI functions to allocate an LDT descriptor, and
map it to an absolute physical address.  This maps the physical address
of the memory on the device to a linear address, and returns that linear
address to you.  You then create a selector to access the span of linear
addresses on the device.

<p>Here are the DPMI calls that you will have to use:

<ul>
<li>physical address mapping (Int 31h/AX=0800h);
<li>allocate an LDT descriptor (Int 31h/AX=0);
<li>set segment base address (Int 31h/AX=7);
<li>set segment limit (Int 31h/AX=8). 
</ul>

<p>All of these DPMI calls have <code>__dpmi_XXX</code> wrappers in the DJGPP
library.  Here's a somewhat schematic example:

<pre> #include &lt;dpmi.h&gt;
 .
 .
 __dpmi_meminfo mi;
 int selector;
 .
 .
 /* Map the physical device address to linear memory.  */
 mi.address = physical_address;
 mi.size    = physical_address_size;
 __dpmi_physical_address_mapping (&amp;mi);
 /* Now mi.address holds the linear address.  */
 .
 .
 /* Allocate an LDT descriptor and set it up to span the entire
    device on-board memory.  */
 selector = __dpmi_allocate_ldt_descriptor (1);
 __dpmi_set_segment_base_address (selector, mi.address);
 __dpmi_set_segment_limit (selector, mi.size - 1);
</pre>

<p>Note that the segment limit should be one less than the size.  Also,
segments over 1MB in length must be a multiple of 4KB, otherwise the
DPMI server might fail the call, or silently change the limit.

<p>You can then use the functions from the <code>sys/farptr.h</code> header file
to access that device.  See <a href="#Xfer">accessing memory-mapped devices</a>, for more
details about accessing memory-mapped devices given their linear
address.

<p>The DPMI function that is issued by
<code>__dpmi_physical_address_mapping</code> only works reliably for addresses
above 1MB mark.  If you call it with a physical address in the first
Megabyte, it might fail, depending on the DPMI server (e.g., CWSDPMI
fails such calls).  (The DPMI spec explicitly says that programs should
<em>not</em> call this function to access memory below the 1MB boundary.) 
This failure usually means that the offending address is already mapped
into the page tables, so you shouldn't worry about it; and most DPMI
servers map the first Megabyte 1:1 anyway.

<p><hr>
Node:&nbsp;<a name="RMCB">RMCB</a>,
Next:&nbsp;<a rel=next href="#Hardware%20interrupts">Hardware interrupts</a>,
Previous:&nbsp;<a rel=previous href="#Above%201MB">Above 1MB</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.8 How to make DOS/BIOS call your function</h2>

<p><em><strong>Q</strong>: How can I make any real-mode service call my function?  E.g., the
mouse driver has a provision (function 0Ch) to call a user-defined handler
when certain events occur, which expects a far pointer to my function in
the <small>ES:DX</small> register pair.</em>

<br><p>
<p><strong>A</strong>:  Those services expect a real-mode function, so you should wrap
your protected-mode function with a real-mode wrapper.  To this end, call
either the <code>_go32_dpmi_allocate_real_mode_callback_retf</code> or the
<code>_go32_dpmi_allocate_real_mode_callback_iret</code> library function, as
required by the real-mode service you want to hook, and pass the
<code>segment</code> and <code>offset</code> members it returns to the service you
want (in the above example, Int 33h function 0Ch) by calling
<code>__dpmi_int</code>.

<p>Here's a code fragment that shows how to do this<a rel=footnote href="#fn-34"><sup>34</sup></a>:

<pre>  #include &lt;dpmi.h&gt;
  #include &lt;go32.h&gt;

  static __dpmi_regs        callback_regs;
  static _go32_dpmi_seginfo callback_info;

  int install_mouse_handler (unsigned mask,
                             void (*func)(__dpmi_regs *))
  {
    __dpmi_regs r;

    callback_info.pm_offset = (long)func;
    if (_go32_dpmi_allocate_real_mode_callback_retf(&amp;callback_info,
                                                    &amp;callback_regs))
      return -1;  /* failure */

    r.x.ax = 0xc;
    r.x.cx = mask;
    r.x.es = callback_info.rm_segment;
    r.x.dx = callback_info.rm_offset;
    __dpmi_int (0x33, &amp;r);
    return (r.x.flags &amp; 1) ? -1 : 0;
  }
</pre>

<p>The handler (<code>func</code> in the above example) will be called with a
pointer to a <code>__dpmi_regs</code> structure which is filled by values
found in the CPU registers when the mouse driver calls the handler.  See
the docs in the library reference Info file for further details about
allocating wrapper functions.

<p>Additional considerations apply if your callback is a C<tt>++</tt> class
member function.  First, you need to remember that member functions
expect a hidden extra first parameter.  Second, if the function is
virtual, you will need to lock the class's virtual table.  Third, you
need to lock the object itself, not only the method you call on it.

<p><hr>
Node:&nbsp;<a name="Hardware%20interrupts">Hardware interrupts</a>,
Next:&nbsp;<a rel=next href="#_go32%20vs%20__dpmi">_go32 vs __dpmi</a>,
Previous:&nbsp;<a rel=previous href="#RMCB">RMCB</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.9 How to hook hardware interrupts</h2>

<p><em><strong>Q</strong>: How do I register my DJGPP function as a hardware interrupt handler?</em>

<br><p>
<p><strong>A</strong>:  The optimal setup depends on the interrupt frequency and on the
amount of processing it requires.  Therefore, only some basic
considerations and techniques are listed below.  What combination of these
is best for your application is up to you to decide.

<p>First, some background.  Hardware interrupts can occur when the
processor is either in real mode (like when your program calls some DOS
service) or in protected mode.  When your program runs under a DPMI
host, hardware interrupts are caught by the DPMI host and passed to
protected mode first; only if unhandled, they are then reflected to real
mode.  Therefore, in DPMI mode you can get away with installing only a
protected-mode handler.  However, if the interrupts happen at a high
frequency (say, more than 10 KHz), and if your program spends lots of
time calling real-mode DOS/BIOS functions, then the overhead of the
interrupt reflection from real to protected mode might be too painful,
and you should consider installing a real-mode interrupt handler in
addition to the protected-mode one.  Such a real-mode handler will be
called <em>before</em> the interrupt gets to the DPMI host, and handle the
interrupt entirely in real mode, so it must be written in assembly and
located in conventional memory (below the 1MB mark).  If you need to
hook an interrupt with both PM and RM handlers, you must hook the PM
interrupt first, then the RM one (because hooking the PM interrupt
modifies the RM one).  Also, you should know that some DPMI hosts don't
allow you to hook the RM interrupt (CWSDPMI does), and some call both
handlers, no matter in what mode the interrupt arrived (CWSDPMI will
only call one of them); the only way to be sure is to try.

<p>To install a protected-mode interrupt handler, you do this:

<ul>
<li>In general, your handler should be written in assembly to be
bullet-proof.  You should lock<a rel=footnote href="#fn-35"><sup>35</sup></a> all the
memory (code, data and stack) that could be touched by your handler
during interrupt processing (this is virtually impossible if the handler
is written in C), explicitly issue the `STI' instruction before `IRET',
and perform all the other chores described in the DPMI spec (see <a href="#DPMI%20Spec">DOS Protected Mode Interface Specification</a>).  To install an assembly handler, you should do this:

<ul>
<li>Call <code>__dpmi_get_protected_mode_interrupt_vector</code> and save the
structure it returns (to restore the previous handler address before your
program exits).

<li>Lock all the memory your handler touches, the code of the handler
itself, and any function it calls, with a series of calls to
<code>__dpmi_lock_linear_region</code>.  Failure to lock memory accessed
during the interrupt handling will cause your program to crash. 
Alternatively, you could set the <code>_CRT0_FLAG_LOCK_MEMORY</code> bit in
the <code>_crt0_startup_flags</code> variable, like this:

<pre>#include &lt;crt0.h&gt;

int _crt0_startup_flags = _CRT0_FLAG_LOCK_MEMORY;
</pre>

<p>Another possibility is to disable virtual memory by using CWSDPR0 as
your DPMI server.

</p><li>Finally, call <code>__dpmi_set_protected_mode_interrupt_vector</code> and pass
it a pointer to a <code>__dpmi_paddr</code> structure filled with the value
returned by <code>_my_cs()</code> in the <code>selector</code> field and the address
of your function in the <code>offset32</code> field. 
</ul>

<li>If your handler function is written in C, you should generally call the
<code>_go32_dpmi_XXX</code> functions instead of the bare-bones API wrappers
whose names start with <code>__dpmi_.</code>  Specifically:

<ul>
<li>Call <code>_go32_dpmi_get_protected_mode_interrupt_vector.</code>  This
function puts the selector and offset of the specified interrupt vector
into the <code>pm_selector</code> and <code>pm_offset</code> fields of the structure
pointed to by its second argument.  This data should be saved and later
passed to <code>_go32_dpmi_set_protected_mode_interrupt_vector</code> to
restore the vector on exit.

<li>Call <code>_go32_dpmi_allocate_iret_wrapper,</code> passing it the address of
your function in the <code>pm_offset</code> field and the value returned by
<code>_my_cs()</code> in the <code>pm_selector</code> field.  The <code>pm_offset</code>
field will get replaced with the address of the wrapper function which
is a small assembler function that handles everything an interrupt
handler should do on entry and before exit (and what the code GCC
generates for an ordinary C function doesn't include); the effect is
similar to using the <code>interrupt</code> or <code>_interrupt</code> keyword in
other DOS-based compilers.

<li>You then call <code>_go32_dpmi_set_protected_mode_interrupt_vector</code> with
the address of the <code>_go32_dpmi_seginfo</code> structure you got from
<code>_go32_dpmi_allocate_iret_wrapper</code>.

<li>If you want your handler to chain to the previous handler, call
<code>_go32_dpmi_chain_protected_mode_interrupt_vector.</code>  This will set
up a wrapper function which, when called, will call your handler, then
jump to the previous handler after your handler returns.  Put the
address of your handler into the <code>pm_offset</code> field and the value of
<code>_my_cs</code> into the <code>pm_selector</code> field of the
<code>_go32_dpmi_seginfo</code> structure and pass a pointer to it to this
function.  <code>_go32_dpmi_chain_protected_mode_interrupt_vector</code>
allocates the wrapper internally, and also arranges for the interrupt to
call your handler, so you need not call
<code>_go32_dpmi_allocate_iret_wrapper</code> and
<code>_go32_dpmi_set_protected_mode_interrupt_vector</code> functions
yourself.  Also note that currently,
<code>_go32_dpmi_chain_protected_mode_interrupt_vector</code> doesn't return
to you the address of the wrapper it allocates, so that wrapper cannot
be freed by your program.  It will be freed by the DJGPP exit code,
though, so this issue is only of concern to programs that allocate and
free lots of wrappers. 
</ul>

<p>The problem with writing handlers in C as above is that in practice you
can't lock all of memory the handler itself uses, because there's no
standard way of finding the size of the code of a C function, or the
addresses on the stack used by C code.  Thus, this approach is generally
unsuitable for production-quality software and should be used only when
the program is known not to page (i.e., if only the physical memory is
used).  You might consider disabling virtual memory to make sure your
program doesn't page.  To accomplish this, either set the
<code>_CRT0_FLAG_LOCK_MEMORY</code> bit in the <code>_crt0_startup_flags</code>
variable, or use CWSDPR0 or PMODE/DJ as your DPMI host.  In fact, using
one of these methods is the recommended way of debugging the first
versions of a program that hooks hardware interrupts; only after you are
sure that your basic machinery works should you move to testing it in a
setup when paging might happen.

<p>Additional considerations apply if your interrupt handler is a C<tt>++</tt>
class member function.  First, you need to remember that member
functions expect a hidden extra first parameter--this is important if
you use member functions as callbacks.  Second, if the function is
virtual, you will need to lock the class's virtual table.  Third, you
need to lock the object itself, not only the method you call on it.

<p>Note that <code>_CRT0_FLAG_LOCK_MEMORY</code> is only recommended for small
programs that run on a machine where enough physical memory is always
available, because the startup code currently doesn't test if memory is
indeed locked, and if there's not enough physical memory installed to
page in all of the memory your program needs, you can end up with
unlocked or partially unlocked memory, which will crash your program. 
If you want to make sure all memory is locked, use a DPMI server which
disables paging.

<p>Buffers in conventional memory (allocated via the
<code>__dpmi_allocate_dos_memory</code> function and its equivalents)
generally need not be locked, since most DPMI servers lock DOS memory by
default.  For safer code, you could try to lock them, and if the call to
<code>__dpmi_lock_linear_region</code> returns a failure indication, it means
that the buffer is already locked.

<p>It is possible to lock only the code and data segments of your program,
but leave everything else unlocked.  The following code snippet shows
how:

<pre> #include &lt;crt0.h&gt;

 int _crt0_startup_flags =
   _CRT0_FLAG_LOCK_MEMORY | _CRT_FLAG_NONMOVE_SBRK;

 int (main (void)
 {
   _crt0_startup_flags &amp;= ~_CRT0_FLAG_LOCK_MEMORY;
   ...
 }
</pre>

<p>This locks the <code>.data</code>, <code>.bss</code>, and <code>.text</code> segments of
the program, and its stack, but doesn't lock the heap allocated after
<code>main</code> is called. 
</ul>

<p>To install a real-mode interrupt handler, you do this:

<ul>
<li>Call <code>__dpmi_get_real_mode_interrupt_vector</code> and save the structure
it returns (to restore the previous handler address before your program
exits).

<li>Allocate some conventional memory with <code>__dpmi_allocate_dos_memory</code>
and put the code of your handler there with the <code>dosmemput</code> function. 
(You could also call one of the functions which allocate a real-mode
call-back, but these will cause a mode switch on every interrupt, which you
want to avoid; otherwise there is no point in installing a real-mode
handler, right?)

<li>Put the address which <code>__dpmi_allocate_dos_memory</code> returned into a
<code>__dpmi_raddr</code> structure (the lower 4 bits into <code>offset16</code>
field, the rest into <code>segment</code> field), then call
<code>__dpmi_set_real_mode_interrupt_vector.</code>
</ul>

<p>Note that Windows 9X is reported to call both the RM and PM handlers if
both are installed, at least for some interrupts (CWSDPMI only invokes
one of them).  So, if you want to play safe, you will need some kind of
a semaphore variable that the two handlers could use so that only one of
them actually handles the interrupt in any given case.

<p>The DPMI spec says that 3 <em>software</em> interrupts are special, in
that they also get reflected to a protected-mode handler.  These
interrupts are: 1Ch (the timer tick interrupt), 23h (Keyboard Break
interrupt), and 24h (Critical Error interrupt).  This means that, to
catch these interrupts, you need to install a protected-mode handler
only.  Unlike hardware interrupts, it doesn't make sense to install dual
RM and PM handlers for these software interrupts.  In particular,
Windows will call both RM and PM handlers if you install both, so you
effectively wind up handling the same interrupt twice.

<p>For examples of installing and using hardware interrupt handlers, see
the sources of the Allegro library, the sample code written by
<a href="mailto:bill@tanihwa.org">Bill Currie</a>, the Sound Blaster
interrupt-driven functions, the <code>mkkbd</code> package, and the
<code>libhw</code> library, described under <a href="#Packages">sample DJGPP packages</a>. 
<a href="mailto:alaric@abwillms.demon.co.uk">Alaric B. Williams</a> has written a
<a href="http://www.abwillms.demon.co.uk/prog/djints.txt">tutorial on interrupt handling</a>.

<p>The DJGPP User's Guide includes a <a href="http://www.delorie.com/djgpp/doc/ug/interrupts/hwirqs.html">chapter on hardware interrupts</a>, written by Peter
Marinov, which includes sample code for hooking hardware interrupts.

<p>The file <code>src/libc/go32/dpmiexcp.c</code> in the DJGPP library sources,
<code>djlsrNNN.zip</code>, is one example of the subtleties involved with
installing a real-mode interrupt handler.  The handlers themselves are
in the file <code>src/libc/go32/exceptn.S</code>.

<p><hr>
Node:&nbsp;<a name="_go32%20vs%20__dpmi">_go32 vs __dpmi</a>,
Next:&nbsp;<a rel=next href="#HW%20Int%20pitfalls">HW Int pitfalls</a>,
Previous:&nbsp;<a rel=previous href="#Hardware%20interrupts">Hardware interrupts</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.10 Should I use _go32_XXX or __dpmi_YYY functions?</h2>

<p><em><strong>Q</strong>: In v1.x I was used to the <code>_go32_<small>...</small></code> functions, but
now comes v2 which also has <code>__dpmi_<small>...</small></code> functions.  Are there
any differences between these two varieties?</em>

<br><p>
<p><em><strong>Q</strong>: Do I need to convert my old v1.x code to use the new
<code>__dpmi_<small>...</small></code> functions?</em>

<br><p>
<p><strong>A</strong>: These two groups of functions have different functionality, so
don't just substitute the new ones for the older ones, because it
usually won't work!  The new <code>__dpmi_<small>...</small></code> functions are just
bare-bones wrappers of the DPMI API calls<a rel=footnote href="#fn-36"><sup>36</sup></a> (see <a href="#DPMI%20Spec">DPMI Specification</a>), generally unsuitable for use with
handlers written in C, whereas the old <code>_go32_<small>...</small></code> functions
are intelligent helper routines which only make sense if your interrupt
handlers are C functions.  They save all the registers on the stack (to
be restored before return to caller), and set up <small>DS</small>, <small>SS</small>, and
<small>ES</small> registers as GCC assumes in the code it produces for a C
program.  If these assumptions are wrong, the C functions called by an
interrupt handler will crash miserably.

<p>The problem with the <code>_go32_<small>...</small></code> functions is that they don't
lock all the code and data that your handlers use, so they can crash on
memory-tight machines and thus aren't suitable for production-quality
code.  But they are certainly useful in the initial stages of writing
and debugging code that hooks hardware interrupts, and for migrating
existing v1.x code to v2.  Some of the old names were just
<code>#define</code>d to the new names where the functionality is identical.

<p>The bottom line is that it shouldn't be necessary to convert your code
for it to work at least as well as it did in v1.x; but if you want it to
be more stable, you should rewrite your handlers in assembly and use the
new <code>__dpmi_<small>...</small></code> functions.  See <a href="#Hardware%20interrupts">How to install a hardware interrupt handler</a>.

<p><hr>
Node:&nbsp;<a name="HW%20Int%20pitfalls">HW Int pitfalls</a>,
Next:&nbsp;<a rel=next href="#Inline%20Asm">Inline Asm</a>,
Previous:&nbsp;<a rel=previous href="#_go32%20vs%20__dpmi">_go32 vs __dpmi</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.11 Hardware interrupt hooking has its subtleties</h2>

<p><em><strong>Q</strong>: I did everything you tell me to install the interrupt handler
correctly, but my program occasionally still hangs<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: From time to time my program crashes with a message "Page Fault
in RMCB".  What's that?</em>

<br><p>
<p><strong>A</strong>:  Hooking interrupts in DJGPP (and in protected mode in general)
has a few subtle aspects.  In general, hardware interrupt handling in
DJGPP v2.x is rock solid <strong>if you play by the rules</strong>. 
Unfortunately, the rules are a bit tricky.

<p>One cause of your problems might be that your interrupt handler or some
memory location it uses get paged out because of the virtual memory
mechanism, or because your program spawned a child program.  In that
case, the interrupt might cause a call to a non-existent service
routine, with the obvious results.  You should lock all the memory pages
that your handler accesses by calling the
<code>__dpmi_lock_linear_region</code> library function.  This also means in
practice that you should write your handler in assembly, as described in
<a href="#Hardware%20interrupts">how to set an interrupt handler</a>, above.  You can disable virtual memory, or put
<code>_CRT0_FLAG_LOCK_MEMORY</code> into <code>_crt0_startup_flags</code> to make
sure nothing is paged out (but then your program might not have enough
memory to run, unless you run on memory-abundant systems).

<p>When CWSDPMI detects that your handler accesses memory that is not
locked, it aborts your program with a message saying "Page Fault in
RMCB".  This can happen if your program installs a callback for
some real-mode service, like the mouse callback, as well as if you
install a hardware interrupt handler; in both of these cases you need to
lock all the memory touched by your handler or by functions it calls. 
CWSDPMI aborts your program if your program attempts to page while an
interrupt handler or a real-mode callback are active, because paging
uses DOS file I/O.  Since DOS is non-reentrant, if the hardware
interrupt handler was called in a middle of another DOS call, paging
could badly damage your hard disk<a rel=footnote href="#fn-37"><sup>37</sup></a>.  By refusing to page in these cases, CWSDPMI ensures
the stability of your system and integrity of your files.  You pay for
that stability by having to lock all code and data touched by the
handler.

<p>Another problem might be that the hardware peripheral you use generates
a lot of interrupts.  Due to specifics of hardware interrupts handling
in protected mode, there is a substantial overhead involved with
reflection of interrupts between real and protected modes.  For
instance, on a 486DX/33 this reflection might consume up to 3000 clocks;
on a 386SX/16, even a 1KHz clock might eat up 1/2 of available cycles. 
One user reported that a 120 MHz Pentium will be able to service up to
45-50K interrupts per second before exhausting its CPU resources, and a
486DX/50 is capable of about half that number.  If your hardware fires
too many interrupts, your CPU might not be able to keep up.  A good rule
of thumb is to consider 20KHz as the breaking point, if your program
needs to do something non-trivial besides servicing interrupts.  If you
are beyond that interrupt rate, consider reducing the interrupt
frequency, or move some of the processing done inside the interrupt
handler to some other place.  Use a ring-0 DPMI server such as CWSDPR0
or PMODE/DJ (of these two, the latter is the faster one) which don't
swap interrupt stacks--this will reduce the overhead of the interrupt
reflection to some degree.  If your handler is written in C, write it in
assembly and make sure it doesn't chain.  And most important--make sure
your program keeps the processor completely in protected mode while
handling high-frequency interrupts: avoid unnecessary library calls,
disk I/O, BIOS calls, and anything else that could generate a mode
switch.  For example, using BIOS services to wait a certain period of
time while interrupts come in is clearly a bad idea when the interrupts
come at high frequency.

<p>Installing a good memory manager will usually also remove most of the
mode switch overhead, since a memory manager runs the CPU in V86 mode,
where hardware interrupts are delivered in protected mode by the
processor, without any need for a mode switch.

<p>Preventing the program from paging (by installing enough physical RAM
and using memory efficiently) will also help keeping the CPU in
protected mode, since paging is done by calling DOS in real mode.  By
keeping your processor in protected mode as much as you can, you avoid
the expensive mode switches when the interrupts are reflected to your PM
handler.

<p>If all that still doesn't help, install a real-mode handler.

<p>Some losing memory managers, notably EMM386, were reported to induce a
high interrupt handling overhead.  In one case, a user reported an
increase in the maximum interrupt rate his program could support from 2
KHz to 6 KHz after uninstalling EMM386.

<p>Still another possibility is that you use a non-default <code>sbrk</code>
algorithm in your program.  Check if the header file <code>crt0.h</code> is
included anywhere in the program, and if so, if the
<code>_CRT0_FLAG_UNIX_SBRK</code> bit in the <code>_crt0_startup_flags</code>
variable is set by the program.  If it is, then a hardware interrupt
which happens at the wrong time could crash your machine, especially if
you run under Windows 3.X.

<p>You should also keep in mind that the DPMI server can decide to handle
some of the interrupts itself and not pass them to your program,
although this is rare.  For example, Windows 9X won't pass the
<kbd>Ctrl-Alt-Del</kbd> combination to your keyboard interrupt handler, but
will rather act on it itself; QDPMI sometimes processes <kbd>Ctrl-C</kbd>
keypresses so that your program never sees them, etc.  Sometimes, but
not always, you can change some configuration option to make some keys
get to your handler (e.g., the Alt-TAB setting on the Windows3.X
<code>.PIF</code> file).

<p>If the above still doesn't explain your problem, then post your code on
the <a href="mailto:djgpp@delorie.com">DJGPP mailing list</a> or
the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a>, tell there how it fails and somebody will
usually have a solution or a work-around for you.

<p><hr>
Node:&nbsp;<a name="Inline%20Asm">Inline Asm</a>,
Next:&nbsp;<a rel=next href="#DMA">DMA</a>,
Previous:&nbsp;<a rel=previous href="#HW%20Int%20pitfalls">HW Int pitfalls</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.12 Inline Assembly code with GCC</h2>

<p><em><strong>Q</strong>: I am used to writing inline assembly with Borland C, but can't
figure out the way to do it with GCC<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: How can I reference C variables from my inline assembly code?</em>

<br><p>
<p><strong>A</strong>:  GCC has extensive inline assembly facilities.  They allow you to
specify everything other compilers let you (like the registers where GCC
will put specific results), but in a way that doesn't interfere with the
compiler's optimizations of the C code that includes inline assembly. 
Because of this flexibility, the syntax of the inline assembly code is
very different from the other DOS-based compilers.  The GCC on-line docs
describe these facilities in detail; to read the relevant sections, type
this from the DOS prompt:

<pre>  info gcc "C Extensions" "Extended Asm"
</pre>

<p>(Note the quotes: they are important.)  You will, of course, need the
stand-alone Info reader to be installed on your system for the above
command to work.  If it is not already installed, get the file
<code>v2gnu/txi40b.zip</code> from the DJGPP distribution and
install it.

<p>If you read this FAQ via WWW, you can also <a href="http://www.delorie.com/gnu/docs/gcc/gcc_86.html">read about the GCC inline assembly extensions with your Web browser</a>.

<a href="mailto:brennan@rt66.com">Brennan Underwood</a> has written <a href="http://www.delorie.com/djgpp/doc/brennan/brennan_att_inline.html">a tutorial on using inline assembly</a>, which is
another valuable resource on this issue.

<p><hr>
Node:&nbsp;<a name="DMA">DMA</a>,
Previous:&nbsp;<a rel=previous href="#Inline%20Asm">Inline Asm</a>,
Up:&nbsp;<a rel=up href="#Low-level">Low-level</a>
<br>

<h2>18.13 Using DMA with DJGPP</h2>

<p><em><strong>Q</strong>: How do I use DMA with DJGPP programs?</em>

<br><p>
<p><em><strong>Q</strong>: I want to use DMA, but I don't know how to get the physical
address of the buffer I allocate for that purpose.</em>

<br><p>
<p><strong>A</strong>:  The main problem in using DMA with DJGPP is how to get the
physical address of a buffer, which is required to program the DMA
controller.  In protected-mode environment, memory addresses that your
program manipulates are actually offsets from the base address of the
data segment.  You can obtain the base address of the data segment by
calling the <code>__dpmi_get_segment_base_address</code> library function and
add it to the address of your buffer, but the resulting address is a
logical address, translated into a physical address by the
memory-mapping unit which is part of the CPU.

<p>You have several alternatives to get the physical address of your
buffer:

<ul>

<li>Allocate the buffer in conventional memory, below the 1MB mark.  This
memory is mapped 1:1 by all DPMI servers, so the linear address is equal
to the physical one.  You can allocate a buffer in conventional memory
using the library function <code>__dpmi_allocate_dos_memory</code>.

<p>This method has a disadvantage of using conventional memory which is at
a premium, and is therefore generally ill-suited for large DMA buffers.

</p><li>Use <dfn>VDS</dfn>, the Virtual DMA Services API.  This is implemented by a
bunch of functions of interrupt 4Bh; see Ralf Brown's Interrupt List for
the details.  The VDS method has a drawback that it needs a real memory
manager, such as <code>EMM386</code> or <code>QEMM</code>, to run, since only memory
managers and Windows support the VDS API (except that Windows/NT
doesn't, or so I'm told).  In other words, if you use VDS, your program
won't work on a system where CWSDPMI<a rel=footnote href="#fn-38"><sup>38</sup></a> is used as the DPMI server, allocating memory by
raw XMS calls or via HIMEM.

<p>The following snippet tests bit 5 of the BIOS data area at 0040:007B, to
see whether the VDS API is supported:

<pre>#include &lt;go32.h&gt;
#include &lt;sys/farptr.h&gt;

 int vds_available = (_farpeekb (_dos_ds, 0x0047b) &amp; 0x20) != 0;
</pre>

<p>(However, an explicit call to the VDS API, after the test above shows
that the bit is set, is a more reliable way to detect the VDS support.)

<p>To use VDS, you allocate a buffer, then use the Lock DMA Buffer Region
function (<small>AX</small>=8103h) to get its physical address.  Then you call the
Disable DMA Translation function (<small>AX</small>=810Bh), program the DMA
controller with the physical address returned by the Lock DMA Region
function, and start the transfer.  After the transfer, you need to call
the Enable DMA Translation (<small>AX</small>=810Ch) and Unlock DMA Buffer Region
(<small>AX</small>=8104h) functions.

<p>Alternatively, you could use the Request DMA Buffer and Release DMA
Buffer services, but then you will need to copy the data to and from the
DMA buffer (e.g. using the <code>movedata</code> function).

<p>The VDS method is convenient when your program needs to work in several
different environments, such as both DOS and Windows, and if you don't
want to waste the conventional memory.  Experience shows, however, that
VDS is inconvenient for buffers larger than 128KB, because many
implementations of VDS fail for large buffers, in particular in plain
DOS.  If you need large DMA buffers, use the XMS method, described next.

</p><li>Use <dfn>XMS</dfn>, the extended memory allocation API.  The XMS services are
invoked by calling the XMS driver entry point, which is returned in
<small>ES:BX</small> by function 4310h of the software interrupt 2Fh.  To call the
XMS driver from a DJGPP program, use the library function
<code>__dpmi_simulate_real_mode_procedure_retf</code> (don't forget to zero
out the <small>SS</small> and <small>SP</small> registers!) passing it the address you got
from the 2Fh/4310h call.  You need to allocate a buffer with XMS
function 09h, then lock that buffer with function 0Ch; the last call
returns the 32-bit physical base address of the allocated block, with
which you program the DMA controller.  You can then map the physical
address to a linear address and build a descriptor that spans the entire
buffer, in the same manner as you would map a memory-mapped device, see
<a href="#Above%201MB">mapping physical address to linear address</a>.  This gives you a selector which you can
use to copy data between your program and the DMA buffer with
<code>movedata</code> and "farptr" functions.

<p>The XMS method is especially suited to very large DMA buffers, like 2MB
(these obviously cannot be allocated in conventional memory).  It is
also supported by more system configurations used to run DJGPP, since
even HIMEM supports XMS. 
</ul>

<p><hr>
Node:&nbsp;<a name="Legalese">Legalese</a>,
Next:&nbsp;<a rel=next href="#Help">Help</a>,
Previous:&nbsp;<a rel=previous href="#Low-level">Low-level</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>19 Legal Aspects</h1>

<p>This chapter answers some questions about various legal aspects of
writing programs with DJGPP.

<ul>
<li><a href="#Application%20distribution">Application distribution</a>:   Legal aspects of programs written with DJGPP. 
<li><a href="#DJGPP%20redistribution">DJGPP redistribution</a>:       Legal aspects of redistributing DJGPP itself. 
</ul>

<p><hr>
Node:&nbsp;<a name="Application%20distribution">Application distribution</a>,
Next:&nbsp;<a rel=next href="#DJGPP%20redistribution">DJGPP redistribution</a>,
Previous:&nbsp;<a rel=previous href="#Legalese">Legalese</a>,
Up:&nbsp;<a rel=up href="#Legalese">Legalese</a>
<br>

<h2>19.1 Legal (un)restrictions on DJGPP applications</h2>

<p><em><strong>Q</strong>: Can you explain in plain English the legal restrictions of
distributing programs compiled with DJGPP?</em>

<br><p>
<p><em><strong>Q</strong>: Can I write commercial programs with DJGPP?</em>

<br><p>
<p><strong>A</strong>: In most cases, you don't have to worry about any legal
restrictions when you compile your programs with DJGPP.  You only need
to include information on how to get DJGPP, and a few other bits of
information, as explained below, in the documentation of your
software<a rel=footnote href="#fn-39"><sup>39</sup></a>.

<p>Using the GNU C/C<tt>++</tt> compiler doesn't make your programs subject to
<em>any</em> restrictions.  The C library which comes with DJGPP is
<em>free</em> (unless you change the library sources, see below), which
means you are free to use the stock <code>libc.a</code> in any way you like
(but please try to comply with <a href="#DJGPP%20redistribution">basic rules of courtesy</a>.)

<p>Some functions from the DJGPP C library are under the BSD copyright
(their sources were taken from the Berkeley Software Distribution of
Unix).  These are time-related functions <code>time</code>, <code>ctime</code>,
<code>gmtime</code>, <code>localtime</code>, <code>mktime</code>, and <code>asctime</code>, and
also <code>tzset</code> and <code>tzsetwall</code>.  <code>random</code> and related
functions <code>srandom</code>, <code>setstate</code> and <code>initstate</code> are also
from the BSD distribution.

<p>The BSD copyright used to require that your binary distribution displays
an acknowledgment of the BSD origin of these functions somewhere in the
docs and in all the ads.  However, as of July 1999, the University of
California at Berkeley withdrew that requirement, and does not require
to include that blurb anymore.

<p>So, if you write C programs and link them with the stock version of the
DJGPP library, you only need to tell your recipients how to get the
latest versions of DJGPP, and have absolutely nothing else to worry
about.

<p>The basic C<tt>++</tt> classes and the Standard Template Library
(<code>libstdcxx.a</code>) which come with DJGPP allow you to use them
binary-wise (i.e., without changing library sources) in your C<tt>++</tt>
programs <em>without restrictions</em>, unless you compile your programs
with a compiler other than Gcc (which won't happen if you work with
DJGPP).  So C<tt>++</tt> programs linked with the <code>-lstdcxx</code> switch are
also free from any restrictions.

<p>Only the library of additional GNU C<tt>++</tt> classes (<code>libgpp.a</code>)
requires that you provide your customers with source or object code of
the application, so they could relink the application with future or
modified versions of the C<tt>++</tt> library.  However, this library is
deprecated and chances are most C<tt>++</tt> programs won't use it.  (If you
intend to distribute commercial programs linked with the <code>libgpp.a</code>
library, you are strongly advised to read the GNU Library General Public
License which comes with the library, for rigorous definition of its
terms.)

<p>Two GNU packages, <code>Flex</code> and <code>Bison</code>, are also special in that
using them to produce your programs doesn't place your programs under GPL
or LGPL.  In other words, lexers produced by <code>Flex</code> and parsers
produced by <code>Bison</code> do <strong>not</strong> imply GPL/LGPL.

<p>If you <strong>do</strong> use in your program any of the FSF sources that fall
under GPL/LGPL (like some of the GCC's sources, or the GNU <code>getopt</code>
or <code>regex</code> packages which come with many GNU programs), then you
must comply with the terms of GNU licenses when distributing your
programs; in this case your entire application becomes GPL.  If that is
unacceptable to you, consider using the versions of <code>regex</code> and
<code>getopt</code> from the DJGPP C library, which are not as powerful, but
are free from any restrictions.

<p>You may ship any of the utilities developed specifically for DJGPP
(e.g., the floating-point emulator <code>emu387.dxe</code> or the DPMI host
<code>cwsdpmi.exe</code>) and the C library, <em>as distributed by DJ
Delorie</em>, with your program with no other requirement besides telling
your customers how to get DJGPP for themselves.

<p>If you do change the sources of either the C library or the utilities
distributed with the <code>djdev</code> package, they, and the programs
developed with them, immediately fall under the GPL, the GNU License. 
In practice this means that you cannot distribute any binaries made with
such a patched version of <code>libc.a</code> without offering the recipient
full sources, including your own sources.  However, if you find bugs in
the library or the utilities and submit your patches to DJ Delorie, DJ
allows to freely use and redistribute patched utilities and binaries
made with the patched version of <code>libc.a</code> (even if no official
DJGPP version was released with your patches yet).

<p>For the precise legal terms of DJGPP distribution, see the file
<a href="http://www.delorie.com/djgpp/dl/ofc/simtel/v2/copying.dj"><code>copying.dj</code> via the Web</a>.  Latest versions of
the <code>djdevNNN.zip</code> package also include that file, so look for it
in you DJGPP installation directory.

<p>Note that the above says nothing about the legal aspects of contributed
packages, like <code>GRX</code> and others; you will need to read their docs
to find out.

<p><hr>
Node:&nbsp;<a name="DJGPP%20redistribution">DJGPP redistribution</a>,
Previous:&nbsp;<a rel=previous href="#Application%20distribution">Application distribution</a>,
Up:&nbsp;<a rel=up href="#Legalese">Legalese</a>
<br>

<h2>19.2 Legal restrictions of DJGPP utilities and libraries</h2>

<p><em><strong>Q</strong>: Can I redistribute djgpp, and if so, how?</em>

<br><p>
<p><em><strong>Q</strong>: I run a business that sells shareware for distribution costs.  Can
I include djgpp on my CD-ROM?</em>

<br><p>
<p><em><strong>Q</strong>: I want to include djgpp in a product that happens to need a
compiler provided with it.  Can I do this?</em>

<br><p>
<p><em><strong>Q</strong>: Is DJGPP public domain software?</em>

<br><p>
<p><em><strong>Q</strong>: Is DJGPP shareware?</em>

<br><p>
<p><strong>A</strong>:  DJGPP is <strong>not</strong> public domain, neither is it shareware (you
<em>don't</em> have to pay a license fee to use DJGPP).  Parts of DJGPP (the
compiler and some of the development tools) <em>are</em> GNU software, so
you must comply with GNU GPL if you distribute those parts (usually, you
won't need to distribute them, because they are freely available to
everyone).  A small part of the C library is taken from the Berkeley BSD
sources, and is therefore in public domain.

<p>Other parts of DJGPP, which include most of the C library, the free DPMI
host CWSDPMI, and some of the utilities, are copyrighted, but in a way
that allows you to use them freely and without restrictions.  The
copyright that covers these parts of DJGPP is GPL, the GNU License, but
with a special exception: if you distribute the utilities unmodified, or
build programs with the unmodified library, the GPL does not apply.

<p><em>Compliance with GPL is therefore all you are legally required to
consider</em> when you redistribute DJGPP itself (as opposed to your
programs compiled with DJGPP).  However, based on many years of
experience of DJGPP distribution, DJ Delorie requests vendors which
distribute DJGPP to follow some additional rules.  These rules are
generally meant to provide a better service to the DJGPP user community:

<ul>
<li>You must redistribute DJGPP as a whole, with all its parts, including
the sources to utilities and libraries that are part of DJGPP, unless
other arrangements are first made with <a href="mailto:dj@delorie.com">DJ Delorie</a>.

<li>Please make a good faith effort to stay up to date with the latest DJGPP
versions, so people don't get old versions with bugs that are long ago
solved, or, worse still, versions that are no longer supported.

<li>You <strong>must</strong> call it <em>DJGPP</em> and nothing else.

<li>You may <strong>not</strong> take credit for it, and you must <strong>not</strong> remove
any notices in DJGPP that give credit to those who worked on it.

<li>You must tell the recipient how to get the latest version off the
Internet, or at least how to find out what the latest version is.  DJ&nbsp;Delorie gets a lot of questions from people who got old versions from
vendors and don't realize that they're way out of date. 
</ul>

<p>In addition, it would be a courtesy to inform DJ that you are including
DJGPP in your product, in case this information is obsolete.  A token
sample of your distribution would be nice also.

<p>Note that the above are <strong>not</strong> legal restrictions (the latter are
described in the file <code>copying.dj</code> mentioned in the previous
section), they are <em>recommended guidelines</em> for redistributing
DJGPP.  These guidelines are based on many years of experience and are
generally meant to make it easier for your clients to use DJGPP and get
support from its developers.  Vendors who do not follow these guidelines
could risk public humiliation, verbal abuse, and boycott by the DJGPP
community, but not legal action.

<p>Note also that if you make source-level changes to DJGPP library or
utilities, the changed software falls under the GNU License, GPL, unless
these changes are made to fix bugs, and provided that you also submit
all such bug-fixes to DJ Delorie for inclusion in a future DJGPP
release.

<p><hr>
Node:&nbsp;<a name="Help">Help</a>,
Next:&nbsp;<a rel=next href="#New%20versions">New versions</a>,
Previous:&nbsp;<a rel=previous href="#Legalese">Legalese</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>20 Getting Help</h1>

<p>This chapter tells you how to get answers to questions you didn't find
in this FAQ, by asking them on DJGPP-related forums.

<ul>
<li><a href="#DJGPP%20is%20not%20GNU">DJGPP is not GNU</a>:             Do <strong>not</strong> post to GNU News groups. 
<li><a href="#How%20to%20post">How to post</a>:                  How to post to the DJGPP forum. 
<li><a href="#Subscribing">Subscribing</a>:                  How to subscribe to the mailing list. 
<li><a href="#Unsubscribing">Unsubscribing</a>:                When it's too much to read<small>...</small>. 
<li><a href="#Languages">Languages</a>:                    Is it okay to post not in English? 
</ul>

<p><hr>
Node:&nbsp;<a name="DJGPP%20is%20not%20GNU">DJGPP is not GNU</a>,
Next:&nbsp;<a rel=next href="#How%20to%20post">How to post</a>,
Previous:&nbsp;<a rel=previous href="#Help">Help</a>,
Up:&nbsp;<a rel=up href="#Help">Help</a>
<br>

<h2>20.1 Don't post DJGPP-specific problems to GNU News groups</h2>

<p><em><strong>Q</strong>: I post my problem to the <a href="news:gnu.gcc.help">gnu.gcc.help news group</a>, but don't get any
answers<small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  Is your problem likely to be special to the DJGPP port or to the
DOS environment?  If so, don't post to GNU Usenet groups, but to
the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a> or to the <a href="mailto:djgpp@delorie.com">DJGPP mailing list</a>.  People who read GNU News groups usually neither
know nor care about DOS-specific problems.  Post there only if the
problem seems to be generic to one of the GNU utilities on any platform. 
For most problems, this can be deduced only after either tracing a
problem in the source code or testing it on some non-DOS platform.  As a
general rule, always post to the DJGPP forums first.

<p><hr>
Node:&nbsp;<a name="How%20to%20post">How to post</a>,
Next:&nbsp;<a rel=next href="#Subscribing">Subscribing</a>,
Previous:&nbsp;<a rel=previous href="#DJGPP%20is%20not%20GNU">DJGPP is not GNU</a>,
Up:&nbsp;<a rel=up href="#Help">Help</a>
<br>

<h2>20.2 How to post to the DJGPP forum</h2>

<p><em><strong>Q</strong>: How do I post to the DJGPP mailing list?</em>

<br><p>
<p><strong>A</strong>:  Send mail to the <a href="mailto:djgpp@delorie.com">list address</a> as if
it were a person.  Please use the mailing list only if you cannot access
the DJGPP news group, because reflecting the mail to and from the mailing
lists incurs additional load on the DJGPP server.  The DJGPP news group,
&lt;<code>news:comp.os.msdos.djgpp</code>&gt;, is two-way gated to the mailing list. 
This means messages posted to either the mailing list or the news group
will appear on both (once, let's hope <b>;-)</b>; you can read either one
and post to either one, and everybody eventually sees everything.  So
please don't post to both the news group and the mailing list.

<p>The gateway works on DJ's server, and has a very strict anti-spam filter
which prevents spam from getting into the news group; it also has an
additional keyword-based anti-crap filter that doesn't pass spam to the
mailing list.  The entire traffic ends up in the mail archives on the
DJ's Web server within 24 hours, and is available for <a href="http://www.delorie.com/djgpp/archives/">searching</a>.

<p>If you have a Usenet feed, now is the time to consider unsubscribing
from the mailing list and switch to reading the news group instead, so
that the load on the list server will get lower.

<p><hr>
Node:&nbsp;<a name="Subscribing">Subscribing</a>,
Next:&nbsp;<a rel=next href="#Unsubscribing">Unsubscribing</a>,
Previous:&nbsp;<a rel=previous href="#How%20to%20post">How to post</a>,
Up:&nbsp;<a rel=up href="#Help">Help</a>
<br>

<h2>20.3 How to become a subscriber to the mailing list</h2>

<p><em><strong>Q</strong>: How do I subscribe to the DJGPP mailing list?</em>

<br><p>
<p><strong>A</strong>:  Send mail to the <a href="mailto:listserv@delorie.com">list server</a> (NOT
to djgpp@!!), leave the subject line empty and in the body write:

<blockquote>
 subscribe &lt;your e-mail address&gt; djgpp
</blockquote>

<p>If you only want to receive announcements of new versions and ported
software, but don't want to see any other DJGPP mail traffic, subscribe
to the <code>djgpp-announce</code> by sending message to the <a href="mailto:listserv@delorie.com">list server</a> which says so:

<blockquote>
 subscribe djgpp-announce
</blockquote>

<p>(Note: no email address when subscribing to the <code>djgpp-announce</code>
list!)

<p>The announcements which go to <code>djgpp-announce</code> get reflected to
<code>djgpp</code>, so you don't need to subscribe to both these lists.

<p>The DJGPP mailing list is available in the daily and weekly digest
forms.  To subscribe to one of these, send this one-line message to the
above list server:

<blockquote>
 subscribe &lt;your e-mail address&gt; djgpp-digest-daily
</blockquote>

<p>or

<blockquote>
 subscribe &lt;your e-mail address&gt; djgpp-digest-weekly
</blockquote>

<p>Some mailers reject messages with too large size, so you might have
trouble with the weekly digest.  If you subscribe to it and don't get
the digest, try the daily one instead, or switch to another mail
software.

<p>You can also subscribe to DJGPP-related mailing lists <a href="http://www.delorie.com/mailing-lists/subscribe.html">through DJ Delorie's WWW server</a>.

<p>Note that you don't have to subscribe to the djgpp mailing list if you don't
want to get all the traffic in your mailbox (typically, about 30 messages
per day).  You can ask questions on the list even if you are not a
subscriber, because people usually answer both to your e-mail address and
to the list (well, actually, the mailer program does it automatically and
most people don't bother to change that).  If you want to be sure the mail
gets to you directly, say in your message that you don't subscribe to the
list, and ask people to answer directly.  Be sure to provide a valid
return address (remove any anti-spam, if you use one) when you ask for
direct replies.

<p><hr>
Node:&nbsp;<a name="Unsubscribing">Unsubscribing</a>,
Next:&nbsp;<a rel=next href="#Languages">Languages</a>,
Previous:&nbsp;<a rel=previous href="#Subscribing">Subscribing</a>,
Up:&nbsp;<a rel=up href="#Help">Help</a>
<br>

<h2>20.4 How to unsubscribe from the mailing list</h2>

<p><em><strong>Q</strong>: Whew!  There's too much traffic on the djgpp mailing list (at least
the SysAdmin glaring over my shoulder thinks so<small>...</small> ;-).  How do I
unsubscribe myself?</em>

<br><p>
<p><em><strong>Q</strong>: I've been trying for days to unsubscribe from the djgpp mailing
list.  What am I doing wrong?</em>

<br><p>
<p><strong>A</strong>:  You should send your unsubscribe messages to the <a href="mailto:listserv@delorie.com">list server</a> <em>(not djgpp@delorie.com!)</em>, with
the contents being just this:

<blockquote>
 unsubscribe &lt;your e-mail address&gt; djgpp
</blockquote>

<p>When you unsubscribe, that stops <em>new</em> messages from being sent to
you.  Messages that are already in the mail queues of various mail
programs between the DJGPP list server and the machine where you receive
your mail--cannot be stopped.  Therefore, allow some time before you
decide that your unsubscribe message didn't work.  In extreme cases,
when one of the machines that are forwarding mail to you is down, you
can get the messages up to 5 days after you've unsubscribed.

<p>If you think you have waited enough and the messages still keep coming,
write to <a href="mailto:djgpp-request@delorie.com">listserv administrator</a> and
ask him to help you.

<p>You can also unsubscribe yourself from any DJGPP-related mailing list
<a href="http://www.delorie.com/djgpp/mailing-lists/subscribe.html">through DJ Delorie's WWW server</a>.

<p>Recently, DJ has added a mail archive browser to his Web site.  With
this tool, you can list and read the messages by year, month and day, as
well as search the last few days for something you might have missed. 
This service is available <a href="http://www.delorie.com/djgpp/mail-archives/browse.cgi">via World-Wide Web</a>.

<p><hr>
Node:&nbsp;<a name="Languages">Languages</a>,
Previous:&nbsp;<a rel=previous href="#Unsubscribing">Unsubscribing</a>,
Up:&nbsp;<a rel=up href="#Help">Help</a>
<br>

<h2>20.5 Is it okay to post messages in languages other than English?</h2>

<p><em><strong>Q</strong>: Would you please switch to English in your messages instead of
using some language nobody understands??</em>

<br><p>
<p><strong>A</strong>: It is rude to require that people speak your language when you
don't speak theirs.  Therefore, <em>any</em> language is allowed on the
DJGPP forum.

<p>It is true that, since most people who read the DJGPP news group do
speak English, posting in English will bring more answers and thus more
efficient help.  So, for the most efficient help, it is best to post in
English.  But this is not a requirement.  If a DJGPP user has a
question, but cannot express it in English, it is better to post it in
some other language than not to be able to post it at all.

<p>Some people can read English (and so will understand replies posted in
English), but have difficulty writing in English.  Therefore, if you see
a message in a language other than English that you happen to  know,
please consider posting its translation, so that others could reply to
it.

<p>If you see a message in a language you don't understand well, and want
to reply to it, try the <a href="http://babelfish.altavista.digital.com">Babelfish on-line translator</a>.  I'm told that it is not very good and
sometimes returns an utter nonsense, but if its translations are treated
creatively, it might help you understand the question (or the answer, as
the case may be).

<p><hr>
Node:&nbsp;<a name="New%20versions">New versions</a>,
Next:&nbsp;<a rel=next href="#Miscellany">Miscellany</a>,
Previous:&nbsp;<a rel=previous href="#Help">Help</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>21 Version 2 vs v1.x</h1>

<p>This chapter is for those who want to know where are the latest
updates for DJGPP software, and what's new and improved in them.  It
also explains the differences between DJGPP v1.x and v2, for those who
are still using DJGPP v1.x and want to know more about v2 while they
consider switching.

<ul>
<li><a href="#New%20and%20improved">New and improved</a>:             What's new in v2.x? 
<li><a href="#Environment">Environment</a>:                  How v2.x environment is different from v1. 
<li><a href="#Slow%20development">Slow development</a>:             When will the next DJGPP version be released? 
<li><a href="#Latest%20DJGPP">Latest DJGPP</a>:                 Where to find the latest DJGPP C library. 
</ul>

<p><hr>
Node:&nbsp;<a name="New%20and%20improved">New and improved</a>,
Next:&nbsp;<a rel=next href="#Environment">Environment</a>,
Previous:&nbsp;<a rel=previous href="#New%20versions">New versions</a>,
Up:&nbsp;<a rel=up href="#New%20versions">New versions</a>
<br>

<h2>21.1 New features in DJGPP v2</h2>

<p><em><strong>Q</strong>: What exciting new features will I find in v2 as opposed to v1.x?</em>

<br><p>
<p><strong>A</strong>:  DJGPP v2.x is a DPMI-only environment, and it includes a free DPMI
host for those who don't have another DPMI provider installed.  In addition,
v2 features the following major improvements upon v1.1x:

<ul>
<li>much faster extender (the free DPMI host) and library functions;

<li>very low memory footprint of the DPMI host below 640KB;

<li>the DPMI server is loaded only once: no more problems with spawning child
programs (e.g., almost unlimited recursive Make's);

<li>ANSI- and POSIX-compliant libraries and header files, which should make
porting Unix programs a lot easier;

<li>support for signals;

<li>387 emulation under DPMI;

<li>graphics which works in <em>any</em> setup, including under Windows;

<li>fixes of many bugs in hardware interrupts' and mixed-mode programming
support;

<li>support of long filenames on Windows 9X;

<li>ability to build all of DJGPP without commercial products (like Turbo C
required to compile go32 in v1.x);
</ul>

<p>If you want to help in further v2 development, check out the list of
features which have yet to be done and volunteer to implement some of
them.

<p><hr>
Node:&nbsp;<a name="Environment">Environment</a>,
Next:&nbsp;<a rel=next href="#Slow%20development">Slow development</a>,
Previous:&nbsp;<a rel=previous href="#New%20and%20improved">New and improved</a>,
Up:&nbsp;<a rel=up href="#New%20versions">New versions</a>
<br>

<h2>21.2 DJGPP environment in v2.x</h2>

<p><em><strong>Q</strong>: There's been this talk about v2 and about <code>go32</code> going away
in that version, but I'm confused on what the new setup will be.  Could
you clarify the details of this change?</em>

<br><p>
<p><strong>A</strong>:  In v1.x of DJGPP, the <code>go32</code> extender was responsible for the
following:

<ul>
<li>Loading and running the application in protected mode.

<li>Managing protected-mode and virtual memory.

<li>"Extending DOS" so that protected-mode programs could issue calls to
real-mode DOS and BIOS services and still run.  (This is mostly done by
switching to real mode and reissuing the interrupt, but some services
require special handling by the extender.)

<li>Handling of hardware interrupts which happen while the CPU is in protected
mode.

<li>Loading 387 emulator (if required).

<li>Loading the graphics driver and working with VGA bank-switching to create
an illusion of a linear video memory.

<li>Command-line and wild-card expansion in a Unix-like fashion. 
</ul>

<p>In v2.x, a minority of these functions are done by a DPMI host, which is
a memory-resident software required to run protected-mode programs under
MS-DOS.  There are a few commercial DPMI hosts (like Quarterdeck's
<code>QDPMI</code>, Qualitas <code>386Max</code>, MS-Windows 3.X and Windows 9X, OS/2,
even Linux), but DJGPP v2 comes with a free DPMI host called
<code>CWSDPMI</code> for those who don't have one already.  Loading the
application into protected-mode memory (a function done in v1.x by
<code>go32</code>) is handled by a 2KB-long real-mode stub which runs at
start-up, before the application's <code>main</code> functions is called
(the stub will also load <code>CWSDPMI</code> if no other DPMI host is
detected).  All the other custom code required to process BIOS- and
DOS-related calls from protected-mode is now built into the library
functions which your program calls, so there is no need for a special
extender, because the application just issues DPMI calls serviced by the
DPMI host.

<p><code>CWSDPMI</code> can be loaded as a TSR, even loaded <code>HIGH</code> into the
HMA/UMB, which will make applications load much faster.

<p><hr>
Node:&nbsp;<a name="Slow%20development">Slow development</a>,
Next:&nbsp;<a rel=next href="#Latest%20DJGPP">Latest DJGPP</a>,
Previous:&nbsp;<a rel=previous href="#Environment">Environment</a>,
Up:&nbsp;<a rel=up href="#New%20versions">New versions</a>
<br>

<h2>21.3 Why are new DJGPP versions released so slowly?</h2>

<p><em><strong>Q</strong>: It's more than a year since the last DJGPP version was released. 
Why won't you guys upload a new version in all this time?</em>

<br><p>
<p><em><strong>Q</strong>: I've been suffering from this bug for months on end!  You know
there's a bug, 'cause I told you so ages ago.  So why in the world
didn't you fix that in a new version??</em>

<br><p>
<p><strong>A</strong>: DJGPP is developed by volunteers on their free time.  This sets
both the schedule of new DJGPP releases and the DJGPP development
agenda: they are determined by what those volunteers think is important
and doable, and by the amount of free time they can devote to
DJGPP-related work.  Since the work of the development team is given
away for free, you cannot demand that they do something they've decided
not to do just yet.  The only way to influence DJGPP development is to
make your own contribution, by fixing a bug or adding a feature, and
then submit your patches to <a href="mailto:dj@delorie.com">DJ Delorie</a>.

<p>You don't need to look for a large project to make your contribution. 
The best way to start being involved with DJGPP development is to fix
any small and minor problems you see, right when and where you see them. 
Even bugs and inaccuracies in the DJGPP documentation, like the
<code>libc.info</code> Info file, are a good place to begin with.  DJ Delorie
says that if everybody corrects every small bug they see, we would run
out of bugs very fast.

<p>When you submit a bug report or code that implements a new feature that
you'd like to add to DJGPP, be prepared to withstand some scrutiny and
peer review from the other participants of the DJGPP development team. 
You might hear various comments, from critique of your code and design
decisions to questions why your changes are at all needed, and even
requests to submit the changes in certain unified format
(see <a href="#Changing">instructions for submitting changes</a>).  Please be ready for that review process and don't
take it as a rebuttal.

<p><hr>
Node:&nbsp;<a name="Latest%20DJGPP">Latest DJGPP</a>,
Previous:&nbsp;<a rel=previous href="#Slow%20development">Slow development</a>,
Up:&nbsp;<a rel=up href="#New%20versions">New versions</a>
<br>

<h2>21.4 Where to find the best C library for DJGPP</h2>

<p><em><strong>Q</strong>: There's been quite some time since the last DJGPP release.  Where
can I get all the latest stuff where the bugs are fixed?</em>

<br><p>
<p><em><strong>Q</strong>: I have heard rumors that there's a better C library for DJGPP
available from the net.  Where is it?</em>

<br><p>
<p><strong>A</strong>: New versions of most parts of DJGPP are released quite
regularly.  For example, DJGPP ports of most GNU packages are generally
released short time after a new version of every package becomes
available from the GNU FTP sites.  So for many DJGPP packages, a new
release should usually be available real soon, just stick around a bit.

<p>The single most important component of DJGPP tool-chain that might
suffer from long release schedule is the <code>djdev</code> package.  This
includes the C library, <code>libc.a</code>, which was written specifically
for DJGPP, and some DJGPP-specific development tools, like <code>redir</code>
and <code>symify</code>.  However, the latter are usually stable and don't
need too much fixing.

<p>A full release of <code>djdev</code> is a lot of work, so DJ Delorie decided
not to make interim releases (experience from v1.x development shows
that such interim releases also generate confusion and are hard to
maintain).

<p>In general, you are advised to constantly improve your C library by
fixing any bugs in the library sources and replacing old modules with
fixed ones.  All this takes is to edit the relevant source file, compile
it, and put it into the library.  For example, assuming you have made a
source-level change in a file called foo.c, here's how you update your
library:

<pre>  gcc -c -O2 foo.c
  ar rvs c:/djgpp/lib/libc.a foo.o
</pre>

<p>(This example assumes that DJGPP is installed in the <code>C:\DJGPP</code>
directory; if not, you will need to change the pathname of <code>libc.a</code>
accordingly.)

<p>Patching the library like that requires that you download the DJGPP
library sources, <code>djlsrNNN.zip</code> (where <code>NNN</code> is the version
number).  That file includes sources to all the DJGPP functions and
utilities, and you can extract them as the need to edit them arises.

<p>Bug reports regarding the library and patches to fix them are posted
from time to time to the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a>.  In addition, the DJGPP
<a href="http://www.delorie.com/djgpp/bugs/">bug-tracking system</a>, stores many
known bugs and the patches required to solve them.  You can use these
resources to find solutions to known bugs.  Patches are applied using
the <code>patch</code> utility which is available <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/pat254b.zip">from the DJGPP sites</a>.

<p>Users who need the cutting edge of the DJGPP development sources can
access the latest development versions of sources of the DJGPP library
and utilities via the net.  All the bugfixes and new features that are
accepted for inclusion in DJGPP are checked into the development source
tree using <small>CVS</small>, a free network-based software configuration
management package.  DJ Delorie has set up anonymous read-only access to
the DJGPP <small>CVS</small> tree, whereby anybody who has a <small>CVS</small> client
installed can check out the sources via the Internet.  You can check out
individual source files, specific subdirectories, or the entire DJGPP
tree; read the <a href="http://www.delorie.com/djgpp/cvs.html">instructions for using <small>CVS</small></a> for the details.  Binaries of <small>CVS</small>
clients for Windows platforms are available from the <a href="http://www.cyclic.com/cvs/windows.html"><small>CVS</small> download page</a>.  If you want to install
the <small>CVS</small> client on Unix or Linux, download the <a href="http://www.cyclic.com/cvs/"><small>CVS</small> sources</a> and build it on your machine.

<p>Note that development sources are not always as stable as the official
release; some of the changes might not be tested by anyone except the
person who submitted those changes.  I recommend to check out only those
sources which fix problems that you cannot work around.

<p><hr>
Node:&nbsp;<a name="Miscellany">Miscellany</a>,
Next:&nbsp;<a rel=next href="#About">About</a>,
Previous:&nbsp;<a rel=previous href="#New%20versions">New versions</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>22 Miscellany</h1>

<p>This chapter is a hodgepodge of questions which don't belong to any of
the other chapters.

<ul>
<li><a href="#RHIDE">RHIDE</a>:                Popular problems with using <small>RHIDE</small>. 
<li><a href="#g++.exe">g++.exe</a>:              Unzip complains about it on DOS. 
<li><a href="#Changing">Changing</a>:             How to change any DJGPP package. 
<li><a href="#Packages">Packages</a>:             Where to find packages for DJGPP. 
<li><a href="#Symlinks">Symlinks</a>:             Yes, DJGPP allows them (well, almost<small>...</small>). 
<li><a href="#DPMI%20Spec">DPMI Spec</a>:            Where to look for DPMI specifications. 
<li><a href="#WWW">WWW</a>:                  The DJGPP Web site. 
<li><a href="#Upload">Upload</a>:               Where to upload your DJGPP packages. 
<li><a href="#Cross-DJGPP">Cross-DJGPP</a>:          You can use DJGPP for cross-development. 
<li><a href="#0xfe+0x20">0xfe+0x20</a>:            Is this a GCC bug? 
<li><a href="#Struct%20size">Struct size</a>:          What is the size of a struct under DJGPP? 
<li><a href="#Struct%20packing">Struct packing</a>:       C<tt>++</tt> compiler doesn't pack structs. 
<li><a href="#Int%2024h">Int 24h</a>:              Catching those ``Abort, Retry'' messages. 
<li><a href="#go32-v2">go32-v2</a>:              What is go32-v2 for? 
<li><a href="#DXE">DXE</a>:                  What are those <code>.dxe</code> files? 
<li><a href="#LFN">LFN</a>:                  LFN support had some subtle bugs in v2.0. 
<li><a href="#Missing%20separator">Missing separator</a>:    What does Make mean by that? 
<li><a href="#Modification%20time">Modification time</a>:    Make says file time is in the future<small>...</small>. 
<li><a href="#Dual%20DOS%2fWindows">Dual DOS/Windows</a>:     How to set up a dual DOS/Windows system. 
<li><a href="#Zoneinfo">Zoneinfo</a>:             What's in that <strong>zoneinfo/</strong> directory? 
<li><a href="#dev%20directory">dev directory</a>:        Don't use it! 
<li><a href="#ELF%20vs%20COFF">ELF vs COFF</a>:          Why doesn't DJGPP switch to ELF object format? 
<li><a href="#Random%20numbers">Random numbers</a>:       How to get them, and how to seed them. 
<li><a href="#Lexicon">Lexicon</a>:              What are all these buzzwords you are using? 
<li><a href="#void%20main">void main</a>:            Is this okay in a C program? 
<li><a href="#Reboot%20the%20PC">Reboot the PC</a>:        How to reboot your PC from a DJGPP program. 
<li><a href="#usleep">usleep</a>:               How to delay your program for a short period. 
<li><a href="#CGI%20programs">CGI programs</a>:         You cannot make them with DJGPP. 
<li><a href="#Input%20EOF">Input EOF</a>:            Program gets immediate EOF from stdin. 
<li><a href="#FAQ%20format">FAQ format</a>:           How to convert this FAQ to other formats. 
</ul>

<p><hr>
Node:&nbsp;<a name="RHIDE">RHIDE</a>,
Next:&nbsp;<a rel=next href="#g++.exe">g++.exe</a>,
Previous:&nbsp;<a rel=previous href="#Miscellany">Miscellany</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.1 Problems with using <small>RHIDE</small>.</h2>

<p><em><strong>Q</strong>: Why does <small>RHIDE</small> put all my source files in the
<code>C:\Windows\Desktop</code> directory?</em>

<br><p>
<p><em><strong>Q</strong>: <small>RHIDE</small> doesn't remember the path names of the files I edited
in my previous session<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: Why does <small>RHIDE</small> show the "Compile" option as disabled,
although there's a source file loaded?</em>

<br><p>
<p><em><strong>Q</strong>: Sometimes, especially during debugging, <small>RHIDE</small> seems to screw
up the display, or crash, or blank the screen and hang.  How can I avoid
this?</em>

<br><p>
<p><strong>A</strong>:  To prevent problems with source files not being found by
<small>RHIDE</small> or being put into strange directories, use a simple two-step
recipe:

<ul>
<li>Always start <small>RHIDE</small> from the same directory where you want your
sources to live.  On Windows, open a DOS box (you can use a shortcut to
do that), change to the directory where you want to put your files using
the <code>cd</code> command, then type <kbd>rhide <var>file</var></kbd> from the
command line, where <var>file</var> is either the name of the source file or
the name of the project file, usually with a <code>.gpr</code> extension.

<li>Use project files.  Start <small>RHIDE</small> from the directory of your project,
as described above, then add the source files to the project using the
<code>Project | Add</code> dialog from the main menu.  If you use a project
file, you can have your source files in several different directories;
in that case, start <small>RHIDE</small> from the directory where you keep the
project file. 
</ul>

<p>Alternatively, you could double-click on the project file for your
project; Windows will then invoke <small>RHIDE</small> in the directory of the
project file.  You might need to associate the <code>.gpr</code> extensions
with <small>RHIDE</small>, before you can use this feature.

<p>By default, your program's <code>.exe</code> executable file goes to the same
directory where you keep the project file, but the <code>Project</code> dialog
lets you specify a different directory, in case you need that.

<p>Display-related problems with <small>RHIDE</small> are usually caused by a faulty
video driver (on Windows 9X) or bugs in the SVGA firmware.  <small>RHIDE</small>
uses advanced VESA functions to save and restore the screen contents and
mode-specific settings, and some SVGAs and video drivers don't implement
these functions very well.  One particularly problematic SVGA card
(which will remain unnamed) has bugs even in the standard VGA modes. 
Downloading the latest video drivers from the vendor's site and
upgrading the video BIOS usually helps; if not, the only solution is to
replace the video adapter.

<p><hr>
Node:&nbsp;<a name="g++.exe">g++.exe</a>,
Next:&nbsp;<a rel=next href="#Changing">Changing</a>,
Previous:&nbsp;<a rel=previous href="#RHIDE">RHIDE</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.2 Unzipping complains about duplicate/invalid files.</h2>

<p><em><strong>Q</strong>: When I unzip the C<tt>++</tt> compiler distribution in gppNNb.zip, the
unzip program complains about something called <code>g++.exe</code>.  What
should I do?</em>

<br><p>
<p><em><strong>Q</strong>: I installed DJGPP, and found two different versions of
<code>gxx.exe</code> and two versions of <code>cxxfilt.exe</code>.  Which one shall
I keep?</em>

<br><p>
<p><strong>A</strong>:  If you install DJGPP on anything but Windows 9X, just ignore that
error message about <code>g++.exe</code> and use <code>gpp.exe</code> or
<code>gxx.exe</code> to compile C<tt>++</tt> programs.  <code>g++.exe</code> is an
invalid file name on DOS, but is allowed on Windows 9X.  It is included
for compatibility with Unix, where the C<tt>++</tt> compiler is called
<code>g++</code>.  All <code>g++.exe</code> does is just to run <code>gxx</code> or
<code>gpp</code>.  So you don't lose much by not having it.

<p>If you <em>are</em> installing DJGPP on Windows 9X, find an unzip program
which supports long file names and unzip the files again.  Make sure
that the DJGPP long file names support (a.k.a. LFN) is enabled,
otherwise DJGPP programs such as Make won't be able to invoke
<code>g++</code>.  To enable LFN support, set <code>LFN=y</code> in the environment.

<p>Duplicate versions of some programs come from different distributions
that include the same programs.  For example, the <code>cxxfilt</code> is
part of two GNU distributions: GCC and Binutils.  You should generally
kep the latest version, judging by the time stamp of the executable
file.

<p><hr>
Node:&nbsp;<a name="Changing">Changing</a>,
Next:&nbsp;<a rel=next href="#Packages">Packages</a>,
Previous:&nbsp;<a rel=previous href="#g++.exe">g++.exe</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.3 How to change a DJGPP package?</h2>

<p><em><strong>Q</strong>: I want to change cc1.  How do I do this?</em>

<br><p>
<p><em><strong>Q</strong>: How do I fix a bug/add a feature to one of the DJGPP programs?</em>

<br><p>
<p><em><strong>Q</strong>: How should I produce patches for DJGPP programs I want to submit,
and to whom should I submit them?</em>

<br><p>
<p><strong>A</strong>:  First, get the sources.  These are called <code>*s.zip</code> in the
DJGPP distribution.  The C Library sources are in
<code>djlsr203.zip</code>.  Some sources are too big, and
might be split into multiple zips, all of which must be unzipped to get
a complete source distribution, like this:

<pre> em1934s1.zip
 em1934s2.zip
 em1934s3.zip
</pre>

<p>All sources are shipped in ready-to-build form.  Any diffs that come
with the source distribution, like the files called <code>DIFFS</code>, have
already been applied, and any configuration scripts and/or batch files
have been run already; you don't need to run them again.

<p>Next, try to build the program without changing it.  Look for a file
called <code>README.dos</code> or <code>README.djgpp</code>: it should explain the
build procedure and list any optional packages you need to install for
that.

<p>If such a <code>README</code> file is unavailable, you will have to poke
around and figure things out for yourself; here are some hints to help
you out:

<ul>
<li>A file called <code>Makefile</code> or <code>makefile</code> probably means you
could just type <kbd>make</kbd>.

<li>Some packages will have a <code>CONFIGUR.BAT</code> file, possibly in a
subdirectory called <code>djgpp/</code> or <code>pc/</code>; if so, run it first.

<li>If there is a <code>MAKE.BAT</code> file, run it; if not, look for a file
named <code>MAKEFILE.DJ</code> or <code>MAKEFILE.DJG</code>; sometimes these will be
in a subdirectory called <code>dos/</code>, or <code>msdos/</code>, or <code>pc/</code>. 
If there is such a file, then type, e.g., <kbd>make -f makefile.djg</kbd>, if
not, just say <kbd>make</kbd> and see what happens. 
</ul>

<p>The reason for an apparent lack of a standard here is that different
packages were ported to DJGPP by different people, as best as they saw
fit.

<p>After you've successfully built the program, make your fixes and build
the program the same way you did before.

<p>Note that generally to build these programs, you must have the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/mak3781b.zip">GNU Make program</a>,
installed, and some makefiles require that you install additional
development utilities, like the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/sed302b.zip"><small>SED</small> editor</a>. 
Sometimes the makefiles won't even run under <code>COMMAND.COM</code> (they
require a smarter shell).  In that case, either get a better shell, or
convert the makefile to be runnable by <code>COMMAND.COM</code>, or do the
required steps manually.  If the Makefile is too complex for you and you
can't figure out what are the necessary commands, invoke make with
<code>-n</code> switch and see what it would have done.

<p>If your machine lacks floating-point hardware (like a 386 without a 387,
or a 486SX), then you should know that current versions of GNU Sed and
GNU Make issue floating point instructions, so you will have to make
provisions for loading an emulator, see above, <a href="#Emulation">FP Emulation</a>.  The port of Make 3.75
and later can be built so that it doesn't issue FP instructions, but you
will have to get the sources and recompile Make first, as the stock
version wasn't configured in that way.

<p>If you think that you found a bug in one of the programs or libraries
written for DJGPP (e.g. the C library, CWSDPMI, symify, etc.) be sure to
check the <a href="http://www.delorie.com/djgpp/bugs/">list of known bugs</a>.  If
your bug is not there, you can later submit it to the bug-tracking
system.

<p>Before you submit a bug report, please make every effort to verify that
your bug is not caused by incorrect usage, or by problems in your DJGPP
installation.  Reports such as "All DJGPP programs crash" or "I
cannot compile any program" are clearly not bugs, because these things
work for many hundreds of DJGPP users every day; so either your system
setup is messed up or you invoke programs incorrectly.

<p>If you can investigate the cause of the bug and find a solution that
makes it go away, submit a bug report with all the details.  If you
cannot find the cause(s), I suggest posting your problem description to
the news group and asking people to verify that it is indeed a bug,
before you submit a bug report.  The bug-tracking system includes a list
of all known bugs, many of them with solutions or work-arounds; please
check them before creating a new bug report.

<p>Patches to DJGPP programs and ports should be sent to the person who
maintains the relevant package.  Patches for the C library, utilities
and other software which comes with the <code>djdevNNN.zip</code> distribution
should be sent to <a href="mailto:dj@delorie.com">DJ Delorie</a>.  If you don't know who maintains a particular
package or port, post the patches to the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a>, since
the maintainer is most probably reading that group.

<p>To generate a patch, run the <code>diff</code> program (from GNU Diffutils,
<code>v2gnu/dif272b.zip</code>) on the old and the new version
of a source file.  For example:

<pre> diff -c src/libc/dos/dos/int86.old src/libc/dos/dos/int86.c &gt;int86.dif
</pre>

<p>The file <code>int86.dif</code> created this way should be sent to the
maintainer, with a short description of the problem it solves.  It is a
good idea to run the patch file through <code>DTOU</code> (a utility which
comes with DJGPP and converts DOS-style CR-LF pairs into Unix-style
newlines), since this makes the patch work on Unix as well, in case the
maintainer of the package in question does that on Unix.  (The DJGPP
port of GNU <code>patch</code> accept both Unix-style and DOS-style patch
files.)

<p>Observing the following guidelines when creating the patch will make
your patches easy to apply:

<ul>
<li>Always use the <code>-c</code> switch to <code>diff</code>, and <strong>never</strong> use
<code>-c</code> with an argument that is less than 3 (for example, do
<em>not</em> use <code>-c2</code>).

<li>Invoke <code>diff</code> from the root of the DJGPP installation, i.e. from
the directory where you keep the <code>DJGPP.ENV</code> file, and specify the
files being compared with their pathnames relative to that directory. 
This allows to concatenate related patches to several files, and apply
the combined patch in a single run of the <code>patch</code> utility.

<li>Always use <em>forward</em> slashes in pathnames.  Backslashes will work
on DOS/Windows, but some packages are maintained on Unix machines, where
<code>patch</code> doesn't understand backslashes.  In particular, DJ Delorie
maintains DJGPP on a Unix box.

<li>It is best to let the new version of the file have the exact pathname of
the file, and rename the old to some other name like <code>foo.old</code> or
<code>foo.bak</code>; see the example above.

<li>Do <strong>not</strong> put together (on the same patch file) several unrelated
patches for different problems: the maintainer might decide to apply
only some of them, and could become confused which parts of the patch
fix what problems.  Correct one problem at a time and then make a patch
file for that problem alone; then correct another problem and generate a
patch for that one; etc.

<li>When you change the sources, try to preserve the programming style,
including indentation, of the original.  In particular, DJ Delorie
requests that the sources included in the <code>djlsrNNN.zip</code>
distribution follow his distinct style (that style is quite obvious from
the sources, but if you are unsure, ask DJ).

<li>You should <strong>never</strong> use any switches that let <code>diff</code> ignore
whitespace, like <code>-b</code> or <code>-w</code>.  In most cases, patches
generated with these switches will fail to apply. 
</ul>

<p>In addition, it would be mighty nice if every change in functionality
were accompanied by a suitable change in the relevant docs (e.g., for a
patch to a library function, edit the corresponding <code>.txh</code> file
with its docs), although you are under no obligation to do that.

<p><hr>
Node:&nbsp;<a name="Packages">Packages</a>,
Next:&nbsp;<a rel=next href="#Symlinks">Symlinks</a>,
Previous:&nbsp;<a rel=previous href="#Changing">Changing</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.4 Where to find DJGPP packages?</h2>

<p><em><strong>Q</strong>: Where can I find an example of XXXX / a package doing YYYY ?</em>

<br><p>
<p><strong>A</strong>: <a href="mailto:salvador@inti.gov.ar">Salvador Eduardo Tropea (SET)</a>
maintains a <a href="http://www.geocities.com/SiliconValley/Vista/6552/dlinks.html">DJGPP Web Ring page</a>.  <a href="mailto:dj@delorie.com">DJ Delorie</a>
offers another very large collection of <a href="http://www.delorie.com/djgpp/dl/elsewhere.html">DJGPP-related links</a>.

<p>Here is a list of places you might look into for examples of frequently
needed code fragments, or for packages people keep asking about:

<ul>
<li>Interrupt-driven support of peripheral devices and hooking hardware
interrupts:

<ul>
<li>The Allegro library is an excellent place to look for code that install
hardware interrupt handlers and handles several peripheral devices. 
<li><a href="mailto:alaric@abwillms.demon.co.uk">Alaric B. Williams</a> maintains a
library of utility functions and example handlers, useful for writing
<a href="http://www.abwillms.demon.co.uk/prog/index.html">hardware interrupt handling code</a>. 
<li><a href="mailto:bill@tanihwa.org">Bill Currie</a> wrote examples of
<a href="ftp://ftp.delorie.com/pub/djgpp/contrib/sample-interrupt-handlers-v2.zip">interrupt handlers</a>
which should get you off the ground if you need to write your own
handlers. 
<li><a href="mailto:martynas.kunigelis@vm.ktu.lt">Martynas Kunigelis</a> donated a
tutorial and a working <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/mkkbd3.zip">code that installs a handler for the hardware keyboard interrupt 09h</a> that can
also serve as a good example of handling interrupts. 
<li>you can look at the latest version of <a href="ftp://x2ftp.oulu.fi/pub/msdos/programming/djgpp2/sb05_dj2.zip">Sound Blaster support library at Oulu</a> or <a href="ftp://ftp.delorie.com/pub/djgpp/contrib/sb05_dj2.zip">on DJGPP server</a>; this
is maintained by <a href="mailto:jhunter@kendaco.telebyte.net">Joel Hunter</a>. 
<li>check out the package available from SimTel.NET that <a href="ftp://ftp.simtel.net/pub/simtelnet/msdos/c/pctime14.zip">hooks the timer interrupt</a>. 
<li>if you need a serial communications package, check out the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/svas011b.zip">SVAsync library</a>. 
<li>another package for serial communications, called <small>BCSERIO</small>, was
written by <a href="mailto:bill@tanihwa.org">Bill Currie</a>.  <small>BCSERIO</small>
is available <a href="http://www.tssc.co.nz/~bcurrie/serio.zip">from Bill's home page</a>. 
<li><a href="mailto:mar22@usa.net">Peter Marinov</a> has written <code>pmcom</code>, a serial
communications library for DJGPP; it is available from <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/pmcom10.zip">DJGPP sites</a>. 
<li>if you need serial communications from programs that use the Allegro
library, try DZComm, which is available from the <code>v2tk/allegro</code>
directory on the usual DJGPP sites.  You can also download DZComm from
GeoCities <a href="http://www.geocities.com/SiliconValley/Pines/7817/progs.htm">via the Web</a>. 
<li>for system hardware and diagnostics software, check out the
<a href="http://members.tripod.com/prashant_tr/products.html"><small>SYSINFO</small> package</a>. 
</ul>

<li>Network support libraries:

<ul>
<li>for TCP/IP, check out the WATTCP library, which is available <a href="ftp://ftp.delorie.com/pub/djgpp/contrib/tcplib.zip">from the DJGPP Web site</a>, or
<a href="ftp://lab1.psy.univie.ac.at/pub/djgpp/tcplib/">from a Europe mirror</a>,
it provides the TCP/IP sockets interface.  (I am told that you can
safely ignore the warnings you get when compiling the package.) 
<li>another DJGPP-compatible C networking library is <a href="http://people.qualcomm.com/karn/tcpip.html">KA9Q NOS TCP/IP package</a>. 
<li>another TCP/IP stack is <a href="http://www.bgnett.no/~giva/">Watt-32</a>; it is
basically WATTCP upgraded to include <small>DHCP</small>, <small>RARP</small>, file-based
lookup, and BSD-compatible API. 
<li>as part of the DOS Lynx port done by <a href="mailto:dj@delorie.com">DJ Delorie</a>, he ported the WATTCP library
as well; that port is available <a href="ftp://ftp.delorie.com/pub/dj/lynx26s.zip">from DJ's server</a>.  There's also a <a href="http://www.rahul.net/dkaufman/lynx2.8.2rel.1-DOS.zip">newer DJGPP port of Lynx</a>. 
<li>a Winsock library called <code>libsocket</code> is available, originally
developed by <a href="mailto:indrek@warp.edu.ee">Indrek Mandre</a>, currently
maintained by <a href="mailto:richdawe@bigfoot.com">R. Dawe</a>.  The latest version
(0.7.3, as of this writing) is available <a href="http://www.phekda.freeserve.co.uk/richdawe/lsck/lsck_dl.htm">from the libsocket home page</a>, and
<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/lsck073b.zip">via FTP</a> from
the DJGPP archives.  The latest versions support both Winsock and the
newer Winsock2 VxD which is part of Windows 98.  Many useful links to
related packages and info is available from <a href="http://www.phekda/freeserve.co.uk/richdawe/lsck/lsck_lnk.htm">Rich Dawe's home page</a>. 
<li>if you need to program an IPX interface, you can get started by
downloading <a href="http://www.rt66.com/~brennan/djgpp/jonipx.zip">examples of IPX programming</a>, and also read the <a href="http://www.ladder.org/ddr/ipx.html">IPX Web page</a>. 
<li>code to access the NetBIOS API with DJGPP is available from
<a href="http://www.people.cornell.edu/pages/asu1/netbios/nbapi.html">A. Sinan Unur's page</a>. 
</ul>

<li>Dynamically loaded code:

<ul>
<li>Check out the DLM (Dynamic Link Modules) environment for DJGPP, written
by <a href="mailto:orangy@inetlab.com">Ilya Ryzhenkov</a>, available from the
<a href="http://www.iis.nsk.su/orangy/dlm/">DLM home page</a>.  This package makes it
very easy to use dynamically loaded code, since it has almost no impact
on how you write your code, and supports all common C<tt>++</tt> features,
like inheritance, virtual functions, etc. 
<li>A dynamic linker for DJGPP, called DLX, is available <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/dlx291.zip">from the DJGPP sites</a>. 
</ul>

<li>X library:

<ul>
<li>the <a href="ftp://asterix.inescn.pt/pub/PC/X/">Xlibemu library</a> includes
<code>Xt</code> and <code>Xmu</code> toolkits, a 3D version of the <code>AW</code> toolkit,
a few demo applications (e.g. <code>xmine</code>), and can be used to compile
<code>Tcl/Tk</code> and GNU Emacs with X support.  Xlibemu is based on
X11R5 and was originally developed by <a href="mailto:acc@asterix.inescn.pt">Antonio Costa</a> for DJGPP v1.x.  It is also available <a href="ftp://ftp.dei.isep.ipp.pt/pub/pc/djgpp/etc/X/">on an alternative site</a> and <a href="ftp://ftp.delorie.com/pub/djgpp/contrib/xlibemu/">on the DJGPP server</a>. 
<li>there are also the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v1tk/qddvx102.zip">Xlib and Xt libraries for the Quarterdeck's DV/X environment</a>
(you will also need qdlib102.zip and qdtkt102.zip from the same site). 
This is also for DJGPP v1.x. 
</ul>

<li>Ports of various GNU utilities not included in DJGPP:

<ul>
<li>Many of these are now part of DJGPP, so first look on SimTel.NET mirrors
<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/">with rest of DJGPP</a>.

<li><a href="mailto:elf@netcom.com">Marc Singer</a> maintains a DJGPP port of RCS, the
<a href="ftp://ftp.netcom.com/pub/el/elf/rcsdos/">Revision Control System</a>.

<li><a href="mailto:bowman@montana.com">bowman</a> ported MC, the GNU Midnight
Commander, a Norton Commander clone, to DJGPP.  The port is available
<a href="http://people.montana.com/~bowman/Software/Midnight.htm">via the Web</a>.

<li><a href="mailto:schultz@ma.tum.de">Waldemar Schultz</a> ported David Gillespie's
Pascal to C translator <code>p2c</code> version 1.02.  the port is available
<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/p2c120b.zip">from the DJGPP sites</a>.

<li>A port of <small>GMP</small>, the GNU Multiple-Precision math library, is
available <a href="ftp://agnes.dida.physik.uni-essen.de/gnu-pascal/beta/djgpp/gmp202b.zip">via FTP</a>. 
</ul>

<li>GUI libraries:

<ul>
<li><small>SWORD</small> (an acronym for System With Objects for Rapid Development) is
a set of C<tt>++</tt> classes that provide the developer with a portable
development environment.  <small>SWORD</small> classes cover subject such as
building graphical user interface, date/time, files, network (socket
client and server), strings, random numbers, vectors and matrices. 
<small>SWORD</small> was written and maintained by <a href="mailto:nicolas@bnp-eng.remcomp.com">Eric Nicolas</a> and the Sword Group.  The latest version
3.0beta06.1 is available from the <a href="http://193.55.36.92/enicolas/computer/sword/download/sword.zip"><small>SWORD</small> download site</a>.  An older
version 2.10 is available together with DJGPP, in the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/">v2tk directory</a> as sw21_*.zip. 
<small>SWORD</small> is a powerful system for dedicated programmers, specifically
designed to allow a programmer to learn GUI programming.  However, I'm
told that its documentation might not be clear enough for beginners;
documentation for version 3.0 is being worked on. 
<li>JPTUI is an object-oriented textual user interface, written by
<a href="mailto:jpdelprat@teaser.fr">Jean-Pierre Delprat</a>.  It is designed for
C<tt>++</tt>, and supports several languages besides US English.  You can get
<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/jptui4jd.zip">JPTUI from SimTel.NET or any of its mirrors</a>. 
<li>the BCGUI package, written by <a href="mailto:bill@tanihwa.org">Bill Currie</a>; you can get it from Bill upon request. 
<li><a href="mailto:salvador@inti.gov.ar">Salvador Eduardo Tropea (SET)</a> maintains a
DJGPP port of Borland's Turbo Vision.  This port also supports the Linux
console.  For more info on this port, visit the <a href="http://www.geocities.com/SiliconValley/Vista/6552/tvision.html">DJGPP port of TVision site</a>. 
The latest version of TVision is available with the rest of DJGPP <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/tv107s.zip">from SimTel.NET</a>.  Instructions for
installing TVision are available <a href="http://www.delorie.com/howto/djgpp/turbo-vision-howto.html">in the HOWTO repository</a>. 
<li>Another port of TVision was done by <a href="mailto:robert.hoehne@gmx.net">Robert Hoehne</a>.  Due to copyright problems, that port cannot be
distributed (at Borland's request, Robert has removed it from his Web
page).  So you will have to get the Turbo Vision sources from the
<a href="ftp://ftp.borland.com/pub/borlandcpp/devsupport/archive/turbovision/tv.zip">Borland's site</a>,
patch them using patches included in the RHIDE distribution, and rebuild
it yourself. 
<li>A Turbo Vision like library for plain C, called C-Desktop, by
<a href="mailto:blp01@uow.edu.au">Brett Porter</a>, is available from DJGPP sites
<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/cdesk100.zip">on SimTel.NET mirrors</a>. 
<li>Another GUI library is XView-PC GUI interface, maintained by
<a href="mailto:acmq@coe.ufrj.br">Antonio Carlos M. de Queiroz</a>.  XView-PC is
available <a href="http://www.coe.ufrj.br/~acmq/xview_pc.html">via the Web</a> and
also <a href="ftp://coe.ufrj.br/pub/acmq/xv_pc18a.zip">via the FTP transfer</a>. 
<li><small>MGUI</small> is a cross-platform C/C<tt>++</tt> GUI library for DOS, Windows 3.X
and 9X/NT, and Unix X Window environments.  The DJGPP version is based
on GRX.  <small>MGUI</small> is available <a href="ftp://ftp.simtel.net/pub/simtelnet/msdos/c/mgdos212.zip">fromSimTel.NET mirrors</a>. 
</ul>

<li>Game programming:

<ul>
<li>The best library for game programming is the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/allegro/alleg312.zip">Allegro game programming library</a>,
written and maintained by <a href="mailto:Shawn@talula.demon.co.uk">Shawn Hargreaves</a>; also available <a href="http://www.talula.demon.co.uk/allegro/">from Allegro home page</a>.  <a href="http://www.canvaslink.com/allegro/xwinallegro/">Allegro is ported to X</a> under Linux, to MS-Windows
using <small>MSVC</small>, and can also be compiled with Watcom compiler.  A
tutorial for game programming, called Allegro Vivace, was written by
<a href="mailto:george.foot@merton.oxford.ac.uk">George Foot</a>, and is available
<a href="http://www.canvaslink.com/gfoot/vivace/">from George's home page</a>. 
<li>Also try <a href="http://jlib.future.easyspace.com/jlib/">Jlib</a> written by
<a href="mailto:tntjpgriff@tsnxt.co.uk">J P Griffiths</a>.  This library is best
suited to multi-platform game programming, since it's portable to
Linux, MSVC, Watcom, and X11.   Visit the Jlib Web page, for the latest
developments. 
<li>Another popular library for game development is MGL, the
<dfn>MegaGraphics Library</dfn> by SciTech Software.  MGL provides
transparent support for DirectX, OpenGL, Mesa, and several other popular
graphics standards (although some of these standards reportedly only
work when used with RSXNTDJ).  The latest version 4.1 has full DJGPP
support.  MGL is available <a href="ftp://ftp.scitechsoft.com/devel/beta/dj20lib.zip">from SciTech's FTP site</a>. 
<li>The Mesa library itself supports DJGPP and is available <a href="http://www.ssec.wisc.edu/~brianp/Mesa.html">from the Mesa home page</a>. 
<li>Yet another package that supports DirectX 5 for DJGPP and RSXNTDJ is
available <a href="http://bbs.para.co.kr/~bng/drdx/drdx.html">via the Web</a>. 
<li>FreeBE/AF is a free implementation of the <small>VBE/AF</small> graphics driver
API, which provides high performance 2D hardware acceleration for
packages such as Allegro and SciTech MGL; it is available <a href="ftp://ftp.simtel.net//pub/simtelnet/gnu/djgpp/v2tk/allegro/freebb11.zip">from SimTel</a>. 
</ul>

<li>VGA graphics:

<ul>
<li><a href="mailto:bg914@FreeNet.Carleton.CA">Paul Fenwick</a> wrote an X-Mode package
<a href="ftp://ftp.delorie.com/pub/djgpp/contrib/xlibdj24.zip">Xlib</a> or
<a href="ftp://x2ftp.oulu.fi/pub/msdos/programming/djgpp2/xlibdj24.zip">Xlib at Oulu</a>. 
<li><a href="mailto:mrb8@waikato.ac.nz">Matthew Bentley</a> has written a C<tt>++</tt> VGA
graphics library for mode 13h (and is reportedly 4 times faster than
Allegro in this mode) called EZVGA.  It is available as ezvga14.zip from
the <code>v2tk</code> directory on DJGPP sites. 
</ul>

<li>Multi-tasking libraries and OS kernels:

<ul>
<li><a href="ftp://ftp.cs.fsu.edu/pub/PART/PTHREADS/pthreads.zip">Pthreads</a>, a Posix threads
library, is a portable, standard package supported on many platforms.

<li>The LWP package is a lightweight preemptive multitasking library written
by <a href="mailto:snarfy@goodnet.com">Josh Turpen</a> for DJGPP.  It has an
extremely simple API and is very fast.  You can get <a href="http://www.goodnet.com/~snarfy">LWP via the Web</a>.

<li><small>PDMLWP</small> is a multithreading package for DJGPP.  It is available as
<code>pdmlwpNN.zip</code> (<code>NN</code> is a version number) from the <code>v2tk</code>
directory on the DJGPP sites.

<li><a href="mailto:bill@tanihwa.org">Bill Currie</a> has written a COFF boot
loader using DJGPP; you can get this <a href="http://www.abwillms.demon.co.uk/prog/kernel2.zip">COFF boot loader from Alaric Williams' Web site</a>.

<li>Palantir is a multitasking kernel for Allegro, written and maintained by
<a href="mailto:zager@post.comstar.ru">Dim Zegebart</a>.  Palantir is available
<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/allegro/plntir05.zip">from DJGPP sites</a> and
<a href="http://www.geocities.com/SiliconValley/Pines/7817/progs.htm">via HTTP</a>. 
</ul>

<li>Development toolkits and packages:

<ul>
<li>MSS is a package for detecting problems with dynamic memory allocation,
such as using uninitialized memory, overwriting the limits of allocated
blocks, memory leaks, repeated deallocations, etc.  It is available
<a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2tk/mss12b.zip">from the DJGPP sites</a>, and supports both C
and C<tt>++</tt> programs.  MSS was written and is maintained by <a href="mailto:blizzar@hem1.passagen.se">Peter Palotas</a>. 
<li>Another package for debugging memory-related problems is
<a href="http://www.geocities.com/SiliconValley/Horizon/8596/fortify.html"><small>FORTIFY</small></a>. 
<li><small>YAMD</small> is yet another malloc debugging package; it was written by
<a href="mailto:neldredge@hmc.edu">Nate Eldredge</a> and is available <a href="http://www3.hmc.edu/~neldredge/yamd/">from Nate's home page</a>. 
<li>Cdecl is a program for translating hairy C and C<tt>++</tt> declarations and
type casts into human-readable English.  A DJGPP port by Nate Eldredge
is available <a href="http://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2apps/cdecl25b.zip">via FTP</a>. 
<li><small>LCLINT</small> is a Lint clone.  Lint is a program which analyses C source
files, identifies unsafe or potentially buggy code and prints
error/warning messages about each such case.  <code>gcc -Wall</code> can
identify many such cases as well, due to the superior diagnostics of
GCC, but for those who still want Lint, you can find <a href="http://larch-www.lcs.mit.edu:8001/larch/lclint.html">LCLint sources on the Web</a>. 
<li><small>VIM</small> is a programmer's editor, mostly popular in the Unix world.  It
features syntax highlighting for more than 60 different file formats,
context-sensitive help, and a macro language for writing extensions. 
The sources are available <a href="ftp://ftp.fu-berlin.de/misc/editors/vim/">via ftp</a>, and should compile with DJGPP. 
Binaries are available for Windows 9X and NT, as well as for DOS. 
<li><code>SeeR</code> is a scripting engine to use in extensible programs.  It
features basic C and C<tt>++</tt> operators and data types, access to C and
C<tt>++</tt> functions and classes, support for multitasking, ability to run
several scripts at the same time, etc.  <code>SeeR</code> was written by
<a href="mailto:ppodsiad@elka.pw.edu.pl">Przemyslaw Arkadiusz Podsiadly</a>, and is
available <a href="http://home.elka.pw.edu.pl/~ppodsiad/seer/">from his Web page</a>. 
<li><a href="mailto:neldredge@hmc.edu">Nate Eldredge</a> wrote a library of farptr
versions of most of the mem*/str* library functions.  You can get this
library <a href="http://www.cartsys.com/eldredge/n/djgpp/farstr.zip">from Nate's home page</a>. 
<li>Berkeley Yacc, <code>byacc</code>, and <code>bzip2</code> compressor/decompressor,
both ported by <a href="mailto:ST001906@HRZ1.HRZ.TU-Darmstadt.De">Juan Manuel Guerrero</a>, are available from the
<code>v2apps</code> directory on the DJGPP sites. 
</ul>

<li>Interface with Windows:

<ul>
<li><code>libwin</code> is a library of functions that allow DJGPP programs to
interface with some Windows services.  This includes clipboard and
registry access, control of the DOS box and virtual machine titles, and
interface with Windows <dfn>Virtual Devices</dfn>, VxDs in short.  The
library can be downloaded <a href="http://www.geocities.com/SiliconValley/Lab/3216/mysoft.html">via the Web</a>. 
<li><code>libmslot</code> is a library of functions for using the Windows LAN
Manager Mailslot API, which is a unidirectional form of Interprocess
Communication (IPC) facility.  It was written by <a href="mailto:richdawe@bigfoot.com">Richard Dawe</a>, and is available <a href="http://www.geocities.com/SiliconValley/Lab/3216/mysoft.html#libmslot">from his home page</a>. 
<li><code>LibINI</code> is a library for manipulating Windows style <code>.INI</code>
configuration files.  You can find it in the programming section of
&lt;<code>http://stealthtech.tsx.org</code>&gt;. 
</ul>

</ul>

<p><hr>
Node:&nbsp;<a name="Symlinks">Symlinks</a>,
Next:&nbsp;<a rel=next href="#DPMI%20Spec">DPMI Spec</a>,
Previous:&nbsp;<a rel=previous href="#Packages">Packages</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.5 How to create symbolic links to programs</h2>

<p><em><strong>Q</strong>: How do I create symbolic links?</em>

<br><p>
<p><em><strong>Q</strong>: I have this program that behaves differently depending on the
name it's called.  Under Unix, I just create symbolic links to achieve
that, but DOS doesn't support links.  Do I have to put several identical
programs under different names on my disk??</em>

<br><p>
<p><strong>A</strong>:  DJGPP allows you to simulate symbolic links to programs.  Generate
a stub (which is a small DOS program attached to every DJGPP program by
the <code>stubify.exe</code> program), call it by the name of the link you want,
then edit its header to run another program.  For example, let's say the
real program is <code>dj1.exe</code> and we want to make a link called
<code>dj2.exe</code> that really calls <code>dj1.exe.</code>  First, generate a stub
under the name <code>dj2.exe.</code>  Next, run <code>STUBEDIT</code> to modify the
new program's stub info block and change the name of the executable it
runs.  In this case, we'd change it to <code>dj1</code>:

<pre> C:\USR\BIN&gt; stubify -g dj2.exe
 C:\USR\BIN&gt; stubedit dj2.exe runfile=dj1
</pre>

<p>Voila!  Now, when you run <code>dj2</code>, it tells the stub to load the image
of <code>dj1</code>, but pass "dj2" in <code>argv[0].</code>

<p>If you use the DJGPP port of GNU Fileutils 3.13 or later, the <code>ln</code>
program there can do the above steps for you if you say this (like on
Unix):

<pre> ln -s dj1.exe dj2.exe
</pre>

<p><hr>
Node:&nbsp;<a name="DPMI%20Spec">DPMI Spec</a>,
Next:&nbsp;<a rel=next href="#WWW">WWW</a>,
Previous:&nbsp;<a rel=previous href="#Symlinks">Symlinks</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.6 Where to find the DPMI specification?</h2>

<p><em><strong>Q</strong>: What is this DPMI thing you are all talking about?</em>

<br><p>
<p><em><strong>Q</strong>: Where can I find the specifications for the DPMI functions?</em>

<br><p>
<p><strong>A</strong>: DPMI, the <dfn>DOS Protected-Mode Interface</dfn>, is an API that
allows protected-mode programs to run on top of DOS, which is a
real-mode operating system, and still be able call real-mode DOS and
BIOS services.  A special API is required because DOS code cannot be run
in protected mode: if you try, your system will immediately crash, since
the real-mode DOS and BIOS code violates many restrictions of
protected-mode programming.  See <a href="#ASM%20GPF">restrictions of protected mode</a>, for more details.  Another place to
look for explanations why DPMI is necessary is in the <a href="http://www.delorie.com/djgpp/eli-m17n99.html#Extending%20DOS">Overview of DJGPP</a>.

<p>The DPMI API is implemented as a set of functions of Interrupt 31h which
allow such chores as switch from real to protected mode and back
(generally done upon startup and at exit), memory allocation, calling
real-mode services, etc.  DPMI is by far the most portable way of
running protected-mode programs on MS-DOS, MS-Windows and compatible
systems.

<p>You can find the DPMI 0.9 spec by anonymous ftp to one of the following
sites:

<ul>
<li><a href="ftp://ftp.qdeck.com/pub/general/dpmispec.zip">At the Quarterdeck ftp site</a>.

<li><a href="ftp://x2ftp.oulu.fi/pub/msdos/programming/specs/dpmispec.arj">At Oulu</a>.

<li>The DPMI 1.0 specs are available by anonymous ftp from the <a href="ftp://ftp.intel.com/pub/IAL/software_specs/dpmiv1.txt">Intel anonymous ftp site</a>
(the file <code>dpmip1.zip</code> at the same location is the PostScript
version of this spec), and also <a href="ftp://x2ftp.oulu.fi/pub/msdos/programming/specs/dpmi100.zip">at the Oulu site</a>.

<li>A paper copy of the DPMI specifications can be ordered from Intel as
document number 240977-001.

<li>Some information about the DPMI API is also found in the <a href="ftp://ftp.simtel.net/pub/simtelnet/msdos/info/inter60c.zip">Ralf Brown's Interrupt List</a>,
also available <a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html">via WWW</a>.  Look at
the functions of Interrupt 31h, or search the files for the word
<code>DPMI</code>.

<li>The DJGPP Web server allows you to use WWW to <a href="http://www.delorie.com/djgpp/doc/dpmi/">browse the DPMI spec on-line</a>. 
</ul>

<p><hr>
Node:&nbsp;<a name="WWW">WWW</a>,
Next:&nbsp;<a rel=next href="#Upload">Upload</a>,
Previous:&nbsp;<a rel=previous href="#DPMI%20Spec">DPMI Spec</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.7 The DJGPP Web site.</h2>

<p><em><strong>Q</strong>: Where is the DJGPP Web site?</em>

<br><p>
<p><strong>A</strong>:  Yes, DJGPP has its own home on the Internet, set up and maintained
by (who else?) <a href="mailto:dj@delorie.com">DJ Delorie</a>.  It has an HTML version of this FAQ list with search
capabilities, the entire set of DJGPP distribution files, a searchable
archive of the DJGPP mailing list and news group traffic, plus other
useful and interesting information about DJGPP.  For instance, did you
ever wonder how DJGPP got started and what DJ's original goals were? 
Rejoice: the Web site includes <a href="http://www.delorie.com/djgpp/history.html">the story of DJGPP genesis</a>.

<p>To visit, point your browser to <a href="http://www.delorie.com/djgpp/">the DJGPP Web site</a>.

<p><hr>
Node:&nbsp;<a name="Upload">Upload</a>,
Next:&nbsp;<a rel=next href="#Cross-DJGPP">Cross-DJGPP</a>,
Previous:&nbsp;<a rel=previous href="#WWW">WWW</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.8 Where to upload your contributions to DJGPP</h2>

<p><em><strong>Q</strong>: I wrote a program using DJGPP.  How can I make it available to
others?</em>

<br><p>
<p><em><strong>Q</strong>: I found and corrected a bug in one of the programs distributed with
DJGPP.  Where should I put it?</em>

<br><p>
<p><em><strong>Q</strong>: What should I do to upload my DJGPP package to SImTel.NET?</em>

<br><p>
<p><strong>A</strong>:  If your program/patches are small enough, consider posting it to
the mailing list or the the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a>.  Please do
<strong>not</strong> post binaries to the news group; only post source code as
plain text, and only if it is not too large.  Many people who read the
news group cannot save the MIME attachments, and don't like to be
forced to download a large message; you are requested to respect that.

<p>If the program is larger than, say, 50K bytes, it's best to upload
it to a public site where everybody can get it.  You can upload your
contribution to a special directory on the <a href="ftp://ftp.delorie.com/incoming/">DJ Delorie's FTP server</a>.  This directory is write-only, and it gets
purged every couple of days, so be sure to write to <a href="mailto:dj@delorie.com">DJ Delorie</a> about your upload;
he will then move it to the <code>/pub/djgpp/contrib</code> directory.

<p>If you decide to upload, please send mail to the <code>djgpp-announce</code>
list with a brief description of your program/patch.  (The message will
get reflected to both the news group and the DJGPP mailing list, so you
don't have to cross-post there, but it also goes to people who only
subscribe to <code>djgpp-announce</code> list because they want to get such
announcements and nothing else.)

<p>If your program is more than a patch or a beta version, you might
consider uploading it to the DJGPP archives on SimTel.NET.  Material
uploaded there gets automatically distributed to all of the SimTel.NET
mirrors throughout the world, which makes it easier to get.

<p>DJ Delorie requests that all contributed packages uploaded to his server
be source-only distributions, if at all possible.  This is so there will
be no danger of distributing programs infected by a virus.  Please avoid
uploading self-extracting archives because DJ extracts them on a Unix
machine which can't run DOS executables.  Detailed instructions for
packaging and uploading DJGPP-related files to SimTel.NET are available
in the <a href="http://www.delorie.com/howto/djgpp/simtel-upload.html">DJGPP HOWTO repository</a>.  When the package
appears on SimTel.NET mirrors, send an announcement to the
<code>djgpp-announce</code> mailing list.

<p><hr>
Node:&nbsp;<a name="Cross-DJGPP">Cross-DJGPP</a>,
Next:&nbsp;<a rel=next href="#0xfe+0x20">0xfe+0x20</a>,
Previous:&nbsp;<a rel=previous href="#Upload">Upload</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.9 DJGPP as cross-compiler</h2>

<p><em><strong>Q</strong>: I want to use DJGPP as a cross-compiler for Motorola 68K targets. 
How should I proceed about this?</em>

<br><p>
<p><em><strong>Q</strong>: I want to build GCC as a Unix-to-DOS cross-compiler.  What should I
do?</em>

<br><p>
<p><strong>A</strong>:  If you want a cross-compiler for m68k on a DOS machine, you need
DJGPP configured as <code>host=i386-go32</code>, and <code>target=m68k-coff.</code>
Such a package <a href="ftp://ftp.lysator.liu.se/pub/msdos/gnu/gcc-dos-m68k/">is already available</a>.  The binaries there are
based on GCC 2.7.2.  This package is reportedly no longer supported, but
if you have questions about it, you can send them to <a href="mailto:jk55@cornell.edu">Jim Karpinski</a>.  You can also try to contact <a href="mailto:karuottu@freenet.hut.fi">Kai Ruottu</a>, who is the provider of DOS-hosted
gcc-m68k.  Note that this package has only basic support for C<tt>++</tt>:
the compiler is included, but the libraries, including <code>libstc++</code>
and <code>libg++</code>, and the C<tt>++</tt> headers are missing, so even
<code>cin</code> and <code>cout</code> don't work.

<p>A <a href="http://www.calm.hw.ac.uk/davidf/coldfire.htm">Win32-hosted gcc-m68k</a> is
another possibility.  It was created by David Fiddes.  The Cygwin port
of GCC can also be configured as a cross-compiler with m68k as the
target.  See <a href="#Windows%20apps">the description of the Cygwin project</a>, for more details about the Cygwin
port.

<a href="http://www.objsw.com/CrossGCC/">Object Software Inc.</a> is a company that
supports cross-builds based on GCC and DJGPP.  Pre-built binaries of the
compiler and some minimal development tools are available from this site
for m68k, PowerPC, and Hitachi's SH-3 targets, all based on DJGPP v2. 
The CrossGCC FAQ, available from the same site, includes detailed
instructions for building a cross-compiler for any target.

<p>DJGPP can be built and installed as a cross-compiler running on a Unix
machine and targeting DOS/Windows platforms.  Detailed instructions for
doing this on Linux can be found in the <a href="http://www.delorie.com/howto/djgpp/linux-x-djgpp.html">DJGPP HOWTO Repository</a>.  Here is the summary of
the necessary steps to do that:

<ol type=1 start=1>
</p><li>Download the cross-compiler toolkit
<code>v2/djcrx203.zip</code> from the usual DJGPP sites.

<li>Unpack <code>djcrx203.zip</code> on the Unix machine using
<code>unzip -a</code>.

<p>You <strong>must</strong> use the <code>-a</code> switch, to force <code>unzip</code> to
convert any DOS-style text file with CR-LF pairs at the end of each line
to Unix-style text files.  If you don't, things will break for you.

<p><code>unzip</code> is available in source form from many FTP sites.  Linux
systems generally come with <code>unzip</code>, but if your system doesn't,
download the sources and build it.

</p><li>Link or move the files in the <code>cross</code> directory to the top-level
directory, where you unzipped <code>djcrxNNN.zip</code>.

<li>Download the latest GCC and Binutils distributions from your favorite
GNU FTP site.

<p>The main GNU site is <a href="ftp://ftp.gnu.org/gnu/">at ftp.gnu.org</a>.

</p><li>Unpack GCC and Binutils from the same directory where you unzipped
<code>djcrxNNN.zip</code>.

<li>You might need to edit the Makefile, either to choose an installation
directory as appropriate for your machine, or to change the names of the
directories where the GCC and Binutils distributions are unpacked (e.g.,
because their version numbers are different from those for which the
Makefile was prepared).

<li>Follow instructions in the file <code>cross/install</code> that was unpacked
from <code>djcrx203.zip</code> to build and install the
cross compiler.
</ol>

<p>The cross-compiler you build is installed as <code>dos-gcc</code>, so to
compile programs with it, use <code>dos-gcc</code> rather than <code>cc</code> or
<code>gcc</code>, or set <code>CC=dos-gcc</code> when invoking Make.

<p>The file <code>cross/readme</code> has some usage info for <code>dos-gcc</code>.  It
is generally correct, except that the version numbers for the various
packages might not be up to date.  You should always use the latest
releases of every package.

<p>Another alternative is the <code>build.cross</code> script included in the
source distribution of the DJGPP port of GCC, <code>gccNNNs.zip</code>.  This
script was tested on GNU/Linux systems, and it allows to build GCC as a
cross compiler hosted on a GNU/Linux system whose target is
DJGPP-supported platforms.  To use this script "out of the box", you
will need to take care of some preliminaries:

<ul>
<li>the <code>stubify</code> program is somewhere on your <code>PATH</code>;

<li>DJGPP headers (from the <code>djcrxNNNb.zip</code> package) are in the
<code><var>prefix</var>/i586-pc-msdosdjgpp/include</code> directory;

<li>DJGPP C<tt>++</tt> headers (from the <code>gppNNNb.zip</code> package) are in the
<code><var>prefix</var>/i586-pc-msdosdjgpp/lang/cxx</code> directory;

<li>DJGPP libraries are in the <code><var>prefix</var>/i586-pc-msdosdjgpp/lib</code>
directory;

<li>cross-binutils for the target <code>i586-pc-msdosdjgpp</code> are on your
<code>PATH</code>;

<li>the directory <code><var>prefix</var>/i586-pc-msdosdjgpp/<var>version</var></code>,
where <var>version</var> is the version of GCC, exists. 
</ul>

<p>Here, <var>prefix</var> is the root of your cross-development installation,
usually <code>/usr</code> or <code>/usr/local</code>.

<p><hr>
Node:&nbsp;<a name="0xfe+0x20">0xfe+0x20</a>,
Next:&nbsp;<a rel=next href="#Struct%20size">Struct size</a>,
Previous:&nbsp;<a rel=previous href="#Cross-DJGPP">Cross-DJGPP</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.10 GCC says "garbage at end of number"</h2>

<p><em><strong>Q</strong>: There is a severe bug in GCC: it says "garbage at end of
number" for this line:</em>

<br><p>
<pre> i = 0xfe+0x20;
</pre>

<p><em>Ain't it silly that such a great compiler would fail so miserably?</em>

<p><strong>A</strong>:  That's not a bug, that's a feature of the <em>ANSI C language
definition.</em>  By ANSI rules, the above expression is a single
<dfn>preprocessing token</dfn>, unless you place whitespace in front of the
plus sign.  The reason for this seemingly counterintuitive feature is
the syntax of floating-point constants in which letters `e' and `E'
followed immediately by a sign signal a decimal exponent.  You can use
the <code>-traditional</code> compiler switch to turn this feature off
(however, it will also turn off a plethora of other ANSI features; see
the GCC docs for details).

<p>Judging by the published draft, this is unchanged even in the
forthcoming C9X standard.

<p><hr>
Node:&nbsp;<a name="Struct%20size">Struct size</a>,
Next:&nbsp;<a rel=next href="#Struct%20packing">Struct packing</a>,
Previous:&nbsp;<a rel=previous href="#0xfe+0x20">0xfe+0x20</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.11 What should sizeof (struct xyzzy) return?</h2>

<p><em><strong>Q</strong>: When I call <code>sizeof</code> on a struct, I sometimes get values
which are larger than the sum of the sizes of the struct members, whereas
in Borland C<tt>++</tt> I always get the correct result.  Is it a bug in GCC?</em>

<br><p>
<p><em><strong>Q</strong>: I have a program that reads struct contents from a binary file. 
It works OK when compiled with BC, but reads garbage when compiled with
DJGPP.  This must be a bug in DJGPP, right?</em>

<br><p>
<p><strong>A</strong>: No, it's not a compiler bug.  GCC generates 32-bit code, and in
that mode, there is a significant penalty (in terms of run-time
performance) for unaligned accesses, like accessing a 16-bit short which
isn't aligned on a 16-bit word boundary, or accessing a 32-bit int which
isn't aligned on a 32-bit dword boundary.  To produce faster code, GCC
pads struct members so that each one can be accessed without delays;
this sometimes produces struct size which is larger than the sum of the
sizes of its members.  If you need to minimize this padding (e.g., if
your program uses large arrays of such structs, where padding will waste
a lot of memory), lay out your structures so that the longer members are
before the shorter ones.  For example, let's say that you have a struct
defined thus:

<pre>  struct my_struct {
    char name[7];
    unsigned long offset;
    double quality;
  };
</pre>

<p>To make such a struct use the least number of bytes, rearrange the
members, like this<a rel=footnote href="#fn-40"><sup>40</sup></a>:

<pre>  struct my_struct {
    double quality;
    unsigned long offset;
    char name[7];
  };
</pre>

<p>If the layout of the structure cannot be changed (e.g., when it must
match some external specification, like a block of data returned by a
system call), you can use the <code>__attribute__((packed))</code> extension
of GCC (see <a href="http://www.delorie.com/gnu/docs/gcc/gcc_84.html">GNU C/C++ Manual</a>.) to prevent GCC from padding
the structure members; this will make accesses to some of the members
significantly slower.

<p>Beginning with version 2.7.0, GCC has a command-line option
<code>-fpack-struct</code> which causes GCC to pack all members of all structs
together without any holes, just as if you used
<code>__attribute__((packed))</code> on every struct declaration in the
source file you compile with that switch.  If you use this switch, be
sure that source files which you compile with it don't use <strong>any</strong>
of the structures defined by library functions, or you will get some
members garbled (because the library functions weren't compiled with
that switch).  Also, GCC 2.95.1 and 2.95.2 had bugs in their support of
<code>-fpack-struct</code> (the bug is corrected in v2.96 and later).

<p>Alternatively, you could declare a particular structure to be packed,
like so:

<pre>  struct my_struct {
    char name[7];
    unsigned long offset;
    double quality;
  } __attribute__ ((packed));
</pre>

<p>However, note that the latter will only work when you compile it as a C
source; C<tt>++</tt> doesn't allow such syntax, and you will have to fall back to
declaring each struct member with the packed attribute.  Therefore, it's
best to only use declarations such as above if you are <strong>certain</strong>
it won't be ever compiled as a C<tt>++</tt> source.

<p>The padding of struct members should be considered when you read or
write struct contents from or to a disk file.  In general, this should
only be done if the file is read and written by the same program,
because the exact layout of the struct members depends on some subtle
aspects of code generation and the compiler switches used, and these may
differ between programs, even if they were compiled by the same compiler
on the same system.  If you do need this method, be aware of the struct
member padding and don't assume that the number of the file bytes that
the structure uses is equal to the sum of the members' sizes, even if
you instructed the compiler to pack structs: GCC still can add some
padding after the last member.  So always use <code>sizeof struct foo</code>
to read and write a structure.

<p>Another problem with porting programs that read structs from binary
files is that the size of some data types might be different under
different compilers.  Specifically, an <code>int</code> is 16-bit wide in most
DOS-based compilers, but in DJGPP it's 32-bit wide.

<p>You should <strong>never</strong> read whole structures if they were written by
other programs.  Instead, read the struct members one by one, and make
sure the member declarations are consistent with their definitions in
the program that wrote the struct.  For example, if a struct member was
declared <code>int</code> in a 16-bit program, you need to declare it
<code>short</code> in a DJGPP program.

<p>The best, most robust and portable way to read and write structs is
through a <code>char</code> buffer, which your code then uses to move the
contents into or out of the struct members, one by one.  This way, you
always know what you are doing and your program will not break down if
the padding rules change one day, or if you port it to another
OS/compiler.  The ANSI-standard <code>offsetof</code> macro comes in handy in
many such cases.  If you need to change the byte order in struct members
that occupy more than a single byte, use special library functions such
as <code>ntohl</code> and <code>htons</code>.

<p><hr>
Node:&nbsp;<a name="Struct%20packing">Struct packing</a>,
Next:&nbsp;<a rel=next href="#Int%2024h">Int 24h</a>,
Previous:&nbsp;<a rel=previous href="#Struct%20size">Struct size</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.12 C<tt>++</tt> doesn't pack structs!</h2>

<p><em><strong>Q</strong>: When I use <code>struct ffblk</code> from the header <code>dir.h</code> in a
C<tt>++</tt> program, I get garbage in some members of the structure!</em>

<br><p>
<p><strong>A</strong>:  There is a known bug in GCC 2.7.2: the C<tt>++</tt> compiler
effectively ignores the <code>__attribute__((packed))</code> directives, so
the structures end up being not packed.  GCC versions 2.7.2.1 and later
corrected that bug, so upgrade.  As a work-around, surround the
declaration of the structure that needs to be packed with <code>#pragma
pack</code>, like this:

<pre>  #ifdef __cplusplus
  #pragma pack(1)
  #endif
  .
  .
  .
  #ifdef __cplusplus
  #pragma pack()
  #endif
</pre>

<p><hr>
Node:&nbsp;<a name="Int%2024h">Int 24h</a>,
Next:&nbsp;<a rel=next href="#go32-v2">go32-v2</a>,
Previous:&nbsp;<a rel=previous href="#Struct%20packing">Struct packing</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.13 How to avoid "Abort, Retry, Fail" messages</h2>

<p><em><strong>Q</strong>: How do I write a program that accesses floppy and CD-ROM drives,
but avoids popping that "Abort, Retry, Fail?" message from DOS?</em>

<br><p>
<p><em><strong>Q</strong>: Other DOS compilers supply a function named <code>harderr</code> or
<code>_harderr</code> to hook the critical-error interrupt 24h, but DJGPP
doesn't seem to have these...</em>

<br><p>
<p><strong>A</strong>:  Under DPMI, Int 24h is always hooked by the DPMI server, since
Int 24h is issued by the real-mode DOS code, and it is not possible to
terminate a DPMI client (like DJGPP programs) from real mode, if you
press <kbd>A</kbd> in response to that prompt.  The default handler under
most DPMI servers will just set <small>AL</small> register to 3 and do an
<code>IRET</code>, thus silently failing the DOS call that triggered Int 24h. 
The DJGPP startup code also hooks the protected-mode Int 24h with a
handler that fails the DOS call as described above.  So in most
circumstances you won't see that DOS prompt at all; your program will
just see a failed DOS call.

<p>However, some DPMI hosts (notably, QDPMI), will sometimes crash your
program if it generates Int 24h, for instance when you access an empty
floppy drive.  In such cases, or when the default action of failing the
DOS call is not good enough, you will have to hook Int 24h with your
handler.  This should be done in exactly the same manner as hooking
hardware interrupts (see <a href="#Hardware%20interrupts">how to set an interrupt handler</a>), because Int 24h is one of
the few software interrupts that, like all hardware interrupts, are
always reflected to protected-mode.  Note that CWSDPMI currently doesn't
support hooking Int 24h; if you set an interrupt handler, it won't be
called.

<p>There are ways to avoid program crashes due to Int 24h (under those DPMI
hosts that exhibit this buggy behavior) other than to install a handler
for it.  For instance, you can test if the floppy drive is empty with a
BIOS call before accessing it with DOS functions; there are also similar
ways to check if a CD-ROM drive is empty.  The library function
<code>getmntent</code>
(see <a href="libc.info.html">getmntent</a>.) 
can be used to detect all the drives that can be safely
accessed by DOS; or you can borrow some of the internal functions used
by <code>getmntent</code> from the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2/djlsr203.zip">library source distribution</a>, or
from the <a href="http://www.delorie.com/djgpp/dl/ofc/">zip picker</a>.

<p><hr>
Node:&nbsp;<a name="go32-v2">go32-v2</a>,
Next:&nbsp;<a rel=next href="#DXE">DXE</a>,
Previous:&nbsp;<a rel=previous href="#Int%2024h">Int 24h</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.14 What is that <code>go32-v2.exe</code> program?</h2>

<p><em><strong>Q</strong>: What is go32-v2 for?</em>

<br><p>
<p><strong>A</strong>:  The <code>go32-v2</code> program does the following:

<ul>
<li>With no command-line arguments, it prints the available physical and
virtual memory, much like <code>go32</code> did in v1.x.

<li>It can run unstubified v2 COFF images, like this:

<pre> go32-v2 myprog
</pre>

<li>If you rename it to <code>go32.exe</code> and put on your <code>PATH</code> before
the v1.x <code>go32.exe</code>, it can also run a v1 COFF images, by loading
the v1.x <code>go32</code> and letting it do the job.  With this setup, you
can run v2 programs from v1.x programs, because the v1.x program will
load <code>go32-v2</code> (since it found it first on the PATH) which knows
how to run v2 images, instead the original <code>go32</code> which cannot. 
</ul>

<p><hr>
Node:&nbsp;<a name="DXE">DXE</a>,
Next:&nbsp;<a rel=next href="#LFN">LFN</a>,
Previous:&nbsp;<a rel=previous href="#go32-v2">go32-v2</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.15 What is DXE?</h2>

<p><em><strong>Q</strong>: What is a DXE?</em>

<br><p>
<p><em><strong>Q</strong>: Can I make a DLL using the DXE support?</em>

<br><p>
<p><em><strong>Q</strong>: Where can I find information or examples about writing/loading
the DXE files?</em>

<br><p>
<p><em><strong>Q</strong>: Why do I get undefined references when I run <code>dxegen</code>?</em>

<br><p>
<p><strong>A</strong>: DXE is a limited facility to dynamically load code which is
rarely needed in DJGPP.  An example is the floating-point emulator code
(see <a href="#Emulation">the details of DJGPP FP emulator</a>) which is only used on those few machines that lack an
FPU.  The DXE design is intentionally limited to keep it as simple as
possible, so that the code that loads a DXE could be small (it's a few
hundreds bytes).  Because of this, there are a number of limitations in
the DXE mechanism that prevent using it for full-fledged dynamic linking
(i.e., a DLL).  For instance, the DXE module cannot access variables or
functions in the main module.

<p>A DXE cannot link in any library functions which reference static
variables (or which call other routines which reference static
variables); this effectively prohibits linking in I/O functions,
allocating memory, and many other useful things.  If you do call any of
these, you'll get unresolved externals from <code>dxegen</code>.  To work
around this limitation, introduce an array of function addresses, or a
structure with pointers to functions as its members, which will be used
from the DXE at run time to call the "special" routines you cannot
link in.  Then arrange for the address of this array to be returned by
<code>_dxe_load</code> when it loads the DXE, and make the init routine fill
the array with the actual addresses of those "special" functions.

<p>Unloading a DXE is also not supported (but I'm told you can add this by
making a few simple changes in the C library).

<p>The only place you can find some docs and examples of writing and using
a DXE is in the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2/djtst203.zip">"tests" archive</a>. 
The example there is <em>exceedingly</em> simplistic, but then so is the
entire DXE mechanism<small>...</small>.

<p><hr>
Node:&nbsp;<a name="LFN">LFN</a>,
Next:&nbsp;<a rel=next href="#Missing%20separator">Missing separator</a>,
Previous:&nbsp;<a rel=previous href="#DXE">DXE</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.16 Long Filenames Don't Work!</h2>

<p><em><strong>Q</strong>: I cannot make Info find some of its files under Windows 9X...</em>

<br><p>
<p><em><strong>Q</strong>: Why does Make behave as if some of the files were not there?</em>

<br><p>
<p><strong>A</strong>: Are you running DJGPP v2.0 on Windows 9X with long filename support
enabled (LFN=y in the environment)?  If so, set LFN=n from the DOS
prompt and try again.  If the problems go away, they are probably due to
known bugs in some v2.0 programs wrt the LFN support.  Make and Info
which came with DJGPP v2.0 are two programs which are known to reveal
these bugs.  Before you decide that you are a victim of these bugs,
though, make sure that all the files that your programs need to access
have been renamed to their long names.  For example, if Make needs to
find a file called <code>ALongFileName.cc</code> (because the Makefile tells
it to build <code>ALongFileName.o</code>), make sure there indeed is such a
file in the directory.  Sometimes people use archive tools (like
<code>PKZIP</code>) that truncate long names, even on Windows 9X, when they
unpack an archive, which leaves you with names like <code>alongfil.cc</code>,
which is not the same as the original name when LFN is supported.  Be
sure to use archivers that support long filenames, e.g. use
<code>DJTAR</code>, or rename all the files to their original long names after
you unpack the archive.

<p>If the problems persist even though the filenames are correct, upgrade
to DJGPP v2.01 or later, where all programs should support long
filenames properly.  If you cannot upgrade, you will have to disable LFN
support (set LFN=n from the DOS prompt, setting it in <code>DJGPP.ENV</code>
does not always work in DJGPP v2.0).

<p><hr>
Node:&nbsp;<a name="Missing%20separator">Missing separator</a>,
Next:&nbsp;<a rel=next href="#Modification%20time">Modification time</a>,
Previous:&nbsp;<a rel=previous href="#LFN">LFN</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.17 Make says "missing separator"</h2>

<p><em><strong>Q</strong>: When I invoke Make, it refuses to do anything and prints a
cryptic message: "makefile:10: *** missing separator.  Stop."  Now
what kind of excuse is that?</em>

<br><p>
<p><strong>A</strong>: Unlike most other DOS Make programs which accept any whitespace
character at the beginning of a command in a rule, GNU Make insists that
every such line begins with a TAB.  (Most other Unix Make programs also
require TABs, and the Posix standard requires it as well.)  Make sure
that the line whose number is printed in the error message (in this
case, line 10) begins with a TAB.

<p>Beginning with version 3.78, GNU Make prints a message that hints at a
possible SPACEs-vs-TAB problem, like this:

<pre>*** missing separator (did you mean TAB instead of 8 spaces?).  Stop.
</pre>

<p>If you need to repair a Makefile that uses spaces, one way of converting
leading spaces into TABs is to use the <code>unexpand</code> program from
the GNU Textutils package (<code>v2gnu/txt20b.zip</code> from
the DJGPP sites).  Another possibility is to open the Makefile in
<small>RHIDE</small> and choose the <code>Edit-&gt;Compact Text</code> option from the menu
bar.

<p>Note that there are editors that automatically replace TABs with spaces,
so even a Makefile that used to work can become unworkable if you edit
them with such an editor.  Don't use such editors.

<p>Another, more rare, cause of the above error message is if you use static
pattern rules (with the <code>%</code> character) incorrectly.  Read the
documentation that comes with Make carefully and try to find the error.

<p><hr>
Node:&nbsp;<a name="Modification%20time">Modification time</a>,
Next:&nbsp;<a rel=next href="#Dual%20DOS%2fWindows">Dual DOS/Windows</a>,
Previous:&nbsp;<a rel=previous href="#Missing%20separator">Missing separator</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.18 Make says "<code>foo</code> has modification time in the future"</h2>

<p><em><strong>Q</strong>: I keep getting messages about file modification time in the
future when I compile my programs using Make<small>...</small>.</em>

<br><p>
<p><strong>A</strong>: This happens on fast machines running Windows/NT and Windows 9X. 
(However, somebody even reported such a problem on a FAT32 drive under
plain DOS.)  It is evidently due to a misfeature in the way Windows
reports the time a file was last modified.  Current versions of Windows
9X store this time with 2-second granularity, but the file creation time
is stored with a 100-nanosecond granularity.  It seems that Windows
blindly adds 2 seconds to the system clock reading when it calculates
the file modification time, apparently to prevent it from being older
than the file creation time, which could happen because of the greater
accuracy used to store the creation time.  On a fast machine, this
2-second add-on can very easily make the file modification time be ahead
of the system clock when Make checks the time stamp of a file it has
just created/updated.

<p>GNU Make reports such cases because inconsistencies in file times could
easily defeat Make's decisions about which files need to be rebuilt.  In
particular, if some of the files reside on a networked drive, and
there's a clock skew between the machine where Make runs and the one
which exports the drive, Make could really fail to rebuild some files.

<p>DJGPP ports of GNU Make v3.77 and later allow for up to 3 seconds of
positive difference between the file timestamp and the system clock
(that is, the file is allowed to be up to 3 seconds into the future),
before the above warning is printed.  So upgrading to the latest version
of Make should eliminate such bogus warnings and leave you only with
messages due to real clock skews.

<p><hr>
Node:&nbsp;<a name="Dual%20DOS%2fWindows">Dual DOS/Windows</a>,
Next:&nbsp;<a rel=next href="#Zoneinfo">Zoneinfo</a>,
Previous:&nbsp;<a rel=previous href="#Modification%20time">Modification time</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.19 How to Set Up a Dual DOS/Windows Installation</h2>

<p><em><strong>Q</strong>: I want to be able to run DJGPP both under Windows 9X with long
file names, and when I boot into plain DOS, where long file names aren't
supported.  How can I set that up?</em>

<br><p>
<p><strong>A</strong>: Such a setup is possible, but it involves a few special actions,
and some vigilance on your part during routine operations.

<p>First, you must set the option in the Windows registry which prevents it
from using numeric tails when it invents short 8+3 aliases for long file
names.  When numeric tails are enabled, and a file with a long name is
created, Windows generates a short 8+3 alias for that long name by
attaching to the first 6 characters of the basename a numeric tail
<code>~<var>n</var></code>, where <var>n</var> is a digit.  For example, a file called
<code>ALongFileName.LongExtension</code> will get a short alias
<code>alongf~1.lon</code>.  When you then reboot into plain DOS, your programs
will see this short version only, which will almost certainly break
them, since, when a program running under DOS asks for a file with the
above long name, DOS transparently truncates it to <code>alongfil.lon</code>,
and such a file does not exist.  Disabling the numeric tails forces
Windows not to use numeric tails unless there is another file in the
same directory whose short alias clashes with that of the new file.  If
no such clash happens, Windows will simply truncate the long name as DOS
would, which is exactly what you want.

<p>Here is how you disable the numeric tails on Windows 9X:

<ul>

<li>From the "Start" menu select "Run" and type <code>regedit</code>, to start
the Registry Editor.

<li>Expand the <code>HKEY_LOCAL_MACHINE</code> branch of the registry until you
see in the left pane an item called
<code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\FileSystem</code>,
then click on it.

<li>The right pane now shows the list of values assigned to the
<code>FileSystem</code> key.  If you don't see an item there called
<code>NameNumericTail</code>, select "New", "Binary Value" from the
"Edit" menu, then type <code>NameNumericTail</code> and it will appear.  Now
double-click on <code>NameNumericTail</code> and enter a value of 0.

<li>Exit <code>regedit</code> and restart Windows 9X. 
</ul>

<p>As an alternative to running <code>regedit</code>, you can create a file
named, say <code>notail.reg</code> (the name is arbitrary, but it
<strong>must</strong> have a <code>.reg</code> extension), with this content:

<pre>REGEDIT4

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem]
"NameNumericTail"=hex:00
</pre>

<p>then double-click on the name of this file in Explorer or My Computer. 
Windows will then run <code>regedit</code> for you.  You still need to
reboot the machine afterwards.

<p>If setting <code>NameNumericTail</code> to 0 breaks some programs, you can
restore its original setting temporarily, while you run those programs. 
<code>NameNumericTail</code> only affects the short names of new files being
created, it has no effect on the files that already exist.<a rel=footnote href="#fn-41"><sup>41</sup></a>

<p>Besides the numeric tails, you need to make sure any files and
directories you create have unique 8+3 aliases which are true
truncations of the long names to 8+3 limits.  This means that you should
avoid file names with leading dots, such as <code>.emacs</code> and
<code>.bashrc</code>, file names with more than a single dot, like
<code>make-3.77.tar.gz</code>, or file names which include characters not
allowed by DOS, like <code>libg++.a</code>.

<p>One other problem is to avoid using programs which create numeric tails
even if they are disabled in Windows.  One such program is
<code>pkunzip</code> version 2.50.  Don't use it, if you want to keep your
dual DOS/Windows installation in working order.

<p>The most simple method of deciding at boot time which configuration (DOS
or Windows) to start is to edit the (hidden) file <code>MSDOS.SYS</code>,
which is a text file in Windows 9X, and force the Windows boot process
to present a menu where one menu item, called "Command Prompt Only",
allows you to start DOS 7 without the Windows GUI.  To this end, change
the line of <code>MSDOS.SYS</code> that reads "BootMenu=0" to say
"BootMenu=1" instead, and reboot.  Since <code>MSDOS.SYS</code> is a hidden
file, you will need to remove the hidden attribute from it before you
can edit it; use the <code>ATTRIB</code> command for that.

<p><hr>
Node:&nbsp;<a name="Zoneinfo">Zoneinfo</a>,
Next:&nbsp;<a rel=next href="#dev%20directory">dev directory</a>,
Previous:&nbsp;<a rel=previous href="#Dual%20DOS%2fWindows">Dual DOS/Windows</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.20 What is in that <code>zoneinfo</code> directory?</h2>

<p><em><strong>Q</strong>: When I installed DJGPP v2, it created a directory named
<code>zoneinfo</code> with a lot of small files that take up 3.5MB of my disk
space.  What are they for?  Can I delete them?</em>

<br><p>
<p><strong>A</strong>:  These files exist so that time-related library functions can
correctly calculate the offset between the local time and the <dfn>UTC</dfn>
(Universal Coordinated Time).  This offset is required when you get
files from another time-zone, like from the Internet, or when you
download an archive that was compressed in another time-zone.

<p>One case where the time stamps might be very important is when you need
to rebuild some package with Make.  Make uses file time stamps to decide
which files need to be rebuilt.  Another case is if you distribute some
files compressed with <code>Zip</code> and want your recipients to be able to
restore the correct time stamps of your files when they unzip them.

<p>If you don't care about file time stamps being incorrect in such cases,
you can delete all those files and never look back.

<p>You might wonder why we need all these zoneinfo files when the UTC
offset <em>is</em> required.  Well, the simplest way to tell programs
what the UTC offset is, is to have the user specify a single number
which is the offset; but then this number needs to be changed twice a
year, to accommodate for the daylight saving time.  Another,
not-quite-so-simple way is to have the user specify the current UTC
offset and the DST rules; but this is a tedious and error-prone process,
and many users get it wrong.  Both of these methods have the drawback
that if the rules change, programs misinterpret old time-stamps, since
they treat them according to new rules.  Using a table that is read from
a file and includes the offset calculation rules for every year avoids
all these problems and requires the user to point the <code>TZ</code>
environment variable to the file that is pertinent to his/her time zone,
which is easy:

<pre> set TZ=c:/djgpp/zoneinfo/israel
</pre>

<p><em>or</em>

<pre> set TZ=c:/djgpp/zoneinfo/us/alaska
</pre>

<p>To find the rule suitable for your location, look into the <code>src</code>
subdirectory of <code>zoneinfo</code> and browse the file whose name is your
continent/part of the world.  If no binary file exists with the name of
your zone, you can create one with using the time-zone compiler
<code>zic</code> which comes with the <code>v2/djtzn203.zip</code>
file (it unzips into the <code>etc</code> subdirectory of the main DJGPP
installation directory).

<p>A public domain time-zone database exists, and is updated from time to
time with the latest world-wide changes to the offset calculation rules. 
(The rules change because politicians in different countries make laws
that change the local clock settings.)  The contents of the
<code>zoneinfo</code> directory which comes with DJGPP is based on this
database, but if you want the latest rules, you can <a href="ftp://elsie.nci.nih.gov/pub/">download them from the net</a> as <code>tzdata*.tar.gz</code>;
<code>tzcode*.tar.gz</code> in the same directory includes the programs that
can be used to generate the offset tables from their source in
<code>tzdata*.tar.gz</code>, the latest implementations of POSIX library
functions that use time-zone information, and the manual pages that
document the rules and the software.  The last update as of this writing
was in September 1999.

<p>On any single machine, you don't need more than a single file from that
directory, which is the file for your time zone; once you find that
file, you can safely delete the rest.  But if you distribute a program
that uses the TZ setting, you will have to include all of the files, or
tell your users how to get and install them.

<p><hr>
Node:&nbsp;<a name="dev%20directory">dev directory</a>,
Next:&nbsp;<a rel=next href="#ELF%20vs%20COFF">ELF vs COFF</a>,
Previous:&nbsp;<a rel=previous href="#Zoneinfo">Zoneinfo</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.21 The dark secrets of the /dev/ directory<small>...</small></h2>

<p><em><strong>Q</strong>: All DJGPP programs cannot find files in the <code>d:\dev</code>
directory, but work okay in other directories.  What is going on here??</em>

<br><p>
<p><em><strong>Q</strong>: I installed DJGPP in the <code>e:/dev/djgpp</code>, and it doesn't
work!</em>

<br><p>
<p><strong>A</strong>: This is an unfortunate side-effect of the special treatment given
to the <code>\dev</code> directory on each drive.  DJGPP transparently
supports Unix-style devices such as <code>/dev/null</code> and
<code>/dev/tty</code>, so that programs ported from Unix that refer to these
devices will work.  Unfortunately, due to a half-hearted way DOS and
Windows support devices, the DJGPP library must treat the
<code>\dev</code> directory specially.  The net effect is that if you have
a real directory by that name, you will get erratic behavior.

<p>A work-around is either to rename the <code>\dev</code> directory to some
other name, like <code>\devel</code>, or move it down the directory
hierarchy, for example make it <code>d:\software\dev</code>.  (The
special treatment is only reserved to the <code>\dev</code> directories
immediately under the root of every drive.)

<p><hr>
Node:&nbsp;<a name="ELF%20vs%20COFF">ELF vs COFF</a>,
Next:&nbsp;<a rel=next href="#Random%20numbers">Random numbers</a>,
Previous:&nbsp;<a rel=previous href="#dev%20directory">dev directory</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.22 How about switching to ELF as DJGPP's object file format?</h2>

<p><em><strong>Q</strong>: I hear all that stuff about the limitations of the COFF format,
and I don't understand why won't DJGPP switch to a modern standard such
as ELF?</em>

<br><p>
<p><strong>A</strong>:  DJGPP uses COFF for historical reasons: at the time it was
developed ELF was not available yet.  There are several grave reasons
why DJGPP didn't switch to ELF yet:

<ul>
<li>Changing the binary format requires many changes to several packages
that are central to DJGPP:

<ul>
<li>The Binutils should be configured for ELF, which requires that the parts
of Binutils that deal with ELF be ported to DJGPP<a rel=footnote href="#fn-42"><sup>42</sup></a>.  GCC also needs to be
configured differently.

<li>The DJGPP stub loader (<code>stub.asm</code> in the library sources) needs to
be partially rewritten to be able to load an ELF executable and set it
up for execution.  Since the stub loader is written in assembly and
optimized for size, this is a formidable task.

<li>All stub-related programs, like <code>go32-v2</code>, <code>stubify</code> and
<code>stubedit</code>, need to be changed as well.

<li>The DJGPP debugger support (functions in the <code>src/debug/</code> directory
in the <code>djlsr</code> distribution) need to be changed to support ELF.

<li>The ported GDB needs to be built with ELF support instead of COFF. 
Again, this means that the GDB ELF-specific code needs to be ported to
DJGPP. 
</ul>

<li>Since ELF requires that external symbols have the same name in C and in
object files, the DJGPP prepending of underscores to C object names
needs to be abandoned.  This means that any assembly code that refers to
C symbols or calls C functions needs to be rewritten.  In particular,
this involves rewriting some C library functions and a significant
portion of Allegro.

<li>Because of the above, switching to ELF will totally break
back-compatibility with old libraries and object files. 
</ul>

<p>None of the above is a show-stopper, so such a switch <em>is</em>
possible.  But it is a large project, and without several devoted
volunteers, chances are it will never happen.

<p><hr>
Node:&nbsp;<a name="Random%20numbers">Random numbers</a>,
Next:&nbsp;<a rel=next href="#Lexicon">Lexicon</a>,
Previous:&nbsp;<a rel=previous href="#ELF%20vs%20COFF">ELF vs COFF</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.23 How to produce random numbers?</h2>

<p><em><strong>Q</strong>: How do I produce random numbers with DJGPP?</em>

<br><p>
<p><em><strong>Q</strong>: I keep getting the same random numbers each time I run my
program.  How do I get a different series on every run?</em>

<br><p>
<p><em><strong>Q</strong>: How do I get random numbers between 20 and 200?</em>

<br><p>
<p><strong>A</strong>: DJGPP has in its library several functions to produce series of
<dfn>pseudo-random</dfn><a rel=footnote href="#fn-43"><sup>43</sup></a> numbers.  One of them,
<code>rand</code>, is part of the ANSI C Standard, and is therefore very
portable to other environments.  Other random-number functions,
<code>random</code> and the <code>rand48</code> family of functions, are available
on almost every Unix platform, but are usually unsupported by
DOS/Windows compilers.  On the other hand, series produced by
<code>random</code> and <code>rand48</code> have better qualities than those
produced by <code>rand</code>.  In particular, the least-significant bits in
the numbers produced by <code>random</code> are much more random than those
you get from <code>rand</code>, so if you need, say, a random number between 0
and 4, and portability is not an issue, you will get better results with
<code>random&nbsp;()&nbsp;%&nbsp;5</code>.  However, the DJGPP implementation of
<code>rand</code> is quite good, so when portability <em>is</em> important, you
should use <code>rand</code>.

<p>Both <code>rand</code> and <code>random</code> return a pseudo-random integer in the
range <code>[0..RAND_MAX)</code>, where <code>RAND_MAX</code> is defined in the
<code>stdlib.h</code> header.  Within the <code>rand48</code> family, some functions
return integers, either in the range <code>[0..RAND_MAX)</code> or in
<code>[-RAND_MAX..RAND_MAX)</code>, while others return a <code>double</code> value
between 0.0 and 1.0.

<p>By default, every time you restart a program, you get the same series of
pseudo-random numbers.  This is important in some applications, because
it allows to reproduce exactly the results of running a program which
used random series, and thus makes debugging easier.  But sometimes,
e.g. in a game, you will want a different series every time.  To achieve
that, you need to initialize the random series with a different
<dfn>seed</dfn>.  Every random-generating function has its own seed function
provided for this purpose: <code>rand</code> has <code>srand</code>, <code>random</code>
has <code>srandom</code>, the <code>rand48</code> family can be seeded with either
<code>srand48</code> or <code>seed48</code>.  You seed the series with a single call
to the appropriate seed function, and then proceed by calling
<code>rand</code>, <code>random</code>, etc. as usual.

<p>A popular way of getting a different seed every run is to use the
current system clock as the seed, like this:

<pre>  srand (time (NULL));
</pre>

<p>If the 1-second granularity of the values returned by <code>time</code> is not
enough for you (e.g., if you need to generate more than one series every
second), use <code>gettimeofday</code> or <code>uclock</code>, or use the values
returned by <code>rand</code> as an argument to <code>srandom</code> (or vice
versa).

<p>To produce random integers from the inclusive interval
<code>[<var>low</var>..<var>high</var>]</code> (where <var>low</var> and <var>high</var> are two
integer numbers), use code like this:

<pre> #include &lt;stdlib.h&gt;

 int random_number =
       low + (double)rand () * (high - low + 1) / RAND_MAX;
</pre>

<p>This produces a more random sequence than if you use the <code>%</code>
operator, but for the price of producing slower code (since it involves
floating-point math).

<p>If you want to know more about random number generation, I suggest
reading the article <cite>Random Number Generators: Good Ones Are Hard
To Find</cite>, by Stephen K. Park and Keith W. Miller, in CACM, v31(10),
1988, pp. 1192-1201.

<p><hr>
Node:&nbsp;<a name="Lexicon">Lexicon</a>,
Next:&nbsp;<a rel=next href="#void%20main">void main</a>,
Previous:&nbsp;<a rel=previous href="#Random%20numbers">Random numbers</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.24 What are all these buzzwords I see?</h2>

<p><em><strong>Q</strong>: All your FAQs and tutorials seem to take for granted that I know
what words like "compile", "link", "makefile" etc. mean.  Where
can I find all these buzzwords explained??</em>

<br><p>
<p><strong>A</strong>: The DJGPP docs use some basic computer lexicon, without which it
would be impossible to communicate.  If you find yourself completely
lost in terminology you don't understand, and this FAQ doesn't explain
it, try looking up the words in the <a href="http://www.delorie.com/djgpp/doc/lexicon/">DJGPP Lexicon page</a>.  Another excellent resource for
computer-related terminology is the <a href="http://www.ccil.org/jargon/">Jargon File</a>, also available from the <a href="ftp://ftp.gnu.org/gnu/jargon/">GNU FTP site</a> as an Info file and in several other formats.

<p><hr>
Node:&nbsp;<a name="void%20main">void main</a>,
Next:&nbsp;<a rel=next href="#Reboot%20the%20PC">Reboot the PC</a>,
Previous:&nbsp;<a rel=previous href="#Lexicon">Lexicon</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.25 What should the <code>main</code> function return in a C/C<tt>++</tt> program?</h2>

<p><em><strong>Q</strong>: Why does everybody tell me that <code>void main</code> is bad?</em>

<br><p>
<p><em><strong>Q</strong>: If <code>void main</code> is incorrect, how come the compiler lets it
compile?</em>

<br><p>
<p><strong>A</strong>: The <cite>ANSI/ISO C Standard</cite> specifies that the <code>main</code>
function be declared in one of the following two ways:

<pre> int main (void);
</pre>

<p>or

<pre> int main (int argc, char **argv);
</pre>

<p>In both cases the return type is an <code>int</code>, and your <code>main</code>
function should therefore either return an <code>int</code> or call the
library function <code>exit</code>, when the program ends.  The C<tt>++</tt>
standard includes a similar requirements for C<tt>++</tt> programs.

<p>Since the runtime environment assumes that <code>main</code> returns an
<code>int</code>, declaring <code>main</code> with any other return type, including
<code>void</code>, invites trouble.  The compiler might compile such a
program, since the ANSI Standard doesn't <em>require</em> it to fail, but
the behavior of such a program is, in the Standard's parlance,
"undefined" (read: anything can happen).  That is why GCC will print a
warning in these cases if you use the <code>-Wall</code> switch.

<p>To summarize, using <code>void main</code> is <em>unsafe</em> and can
potentially do evil things to your program.  It is best to avoid it.

<p>Note that the C<tt>++</tt> standard, in contrast to the C standard,
explicitly prohibits <code>void main()</code>, and explicitly says that if the
controls reaches the end of <code>main</code> without encountering a
<code>return</code> statement, the effect is that of executing <code>return&nbsp;0;</code>.  When compiling a C<tt>++</tt> program, GCC automatically generates the
code to return zero from the <code>main</code> function, in case the
programmer leaves that out.

<p><hr>
Node:&nbsp;<a name="Reboot%20the%20PC">Reboot the PC</a>,
Next:&nbsp;<a rel=next href="#usleep">usleep</a>,
Previous:&nbsp;<a rel=previous href="#void%20main">void main</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.26 Rebooting the PC from a DJGPP program</h2>

<p><em><strong>Q</strong>: How can I reboot the PC from a DJGPP program?</em>

<br><p>
<p><strong>A</strong>:  There are several possible ways to achieve this:

<ul>
<li>In plain DOS, have your code call the INT 19h handler via
<code>__dpmi_int</code> instruction.  (Emitting the literal <code>INT 19h</code>
instruction won't work with CWSDPMI, because CWSDPMI deliberately blocks
it; version r5 of CWSDPMI might remove this restriction.)

<li>On Windows, emitting the literal <code>INT 19h</code> instruction is a better
alternative, since Windows misbehaves when INT 19h is issued via
<code>__dpmi_int</code>.

<li>Send the <code>FEh</code> command to the port 64h:

<pre> outportb (0x64, 0xfe);
</pre>

<p>(this should be preceded by a test whether the keyboard buffer is full;
because then the keyboard will ignore the command; however,
keyboard-full is a very rare condition). 
</ul>

<p><hr>
Node:&nbsp;<a name="usleep">usleep</a>,
Next:&nbsp;<a rel=next href="#CGI%20programs">CGI programs</a>,
Previous:&nbsp;<a rel=previous href="#Reboot%20the%20PC">Reboot the PC</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.27 Delaying execution for short periods of time</h2>

<p><em><strong>Q</strong>: The function <code>usleep</code> doesn't work for me!  When its
argument is less than 10000, there's no delay at all, and when the
argument is larger than 10000, the delay is always the same<small>...</small>.</em>

<br><p>
<p><em><strong>Q</strong>: How can I delay the execution of my program for 2msec?</em>

<br><p>
<p><em><strong>Q</strong>: I need to pause my program for 100 microseconds.  Can I do it?</em>

<br><p>
<p><strong>A</strong>:  Most time-related facilities in DJGPP have the same 55msec
granularity of the time intervals they measure.  This is because the
timer tick interrupt that updates the time has the frequency of
18.2Hz.  This is why calling <code>usleep</code> with arguments less
than 55000 produces strange effects: the resolution of the argument is
1usec (for compatibility with other compilers), but the
granularity is still 55msec.

<p>If you need to pause your program for periods of time shorter than
55msec, you have several alternatives:

<ol type=a start=1>
</p><li>For delays longer than 1msec, use the library function
<code>delay</code>.  It is based on the CMOS clock chip whose frequency is
1024Hz.

<li>For periods shorter than 1msec, write your own wait loop that
calls library function <code>uclock</code> to see when the pause time
expires.  <code>uclock</code> measures time with 840-nanosecond granularity. 
Here's a possible implementation of such a wait loop:

<pre> #include &lt;time.h&gt;

 uclock_t start;

 /* Wait for 200 microseconds.  */
 start = uclock ();
 while (uclock () &lt; start + UCLOCKS_PER_SEC / 5000)
   ;
</pre>

</ol>

<p><hr>
Node:&nbsp;<a name="CGI%20programs">CGI programs</a>,
Next:&nbsp;<a rel=next href="#Input%20EOF">Input EOF</a>,
Previous:&nbsp;<a rel=previous href="#usleep">usleep</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.28 CGI programs and DJGPP</h2>

<p><em><strong>Q</strong>: I wrote a CGI program and compiled it with DJGPP, but it doesn't
seem to work<small>...</small>.</em>

<br><p>
<p><strong>A</strong>:  If you are using a Windows Web server, it probably won't work. 
The reason is that Windows programs cannot easily redirect standard
input and output of DOS programs (because DOS programs are run by
Windows in a different <dfn>Virtual Machine</dfn>), and many Windows Web
servers don't consider the case of a DOS CGI program, and don't bother
to include the machinery necessary to do the redirection in a way that
would work for DOS programs.  So the output of your program never gets
to the server.

<p>Consult the docs of the server: it might include some feature that
enables redirection from DOS programs.  If that doesn't help, rebuild
your CGI program with a Windows compiler, such as Mingw32 or Lcc-Win32
(see <a href="#Windows%20apps">free Win32 compilers</a>), and it will work.

<p><hr>
Node:&nbsp;<a name="Input%20EOF">Input EOF</a>,
Next:&nbsp;<a rel=next href="#FAQ%20format">FAQ format</a>,
Previous:&nbsp;<a rel=previous href="#CGI%20programs">CGI programs</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.29 Why Do I Get EOF From <code>stdin</code>?</h2>

<p><em><strong>Q</strong>: Whenever I run my program, which reads <code>stdin</code>, from
<small>RHIDE</small> or Bash, it gets EOF indication immediately, without any
input being typed!  This program runs okay from the DOS prompt, so
something must be wrong with Bash and <small>RHIDE</small>, yes?</em>

<br><p>
<p><strong>A</strong>:  This is a known (mis-)behavior of DOS: to clear the EOF
condition of the console device, you need to write something to it.  If
during some previous invocation of a program you typed
<kbd>Ctrl-&lt;Z&gt;</kbd>, the resulting EOF condition will stick until
something is written to the console device.  When the program is run
from the DOS prompt, that "something" is the prompt string printed by
<code>COMMAND.COM</code>.  However, <small>RHIDE</small> doesn't print any prompt, and
Bash prints its prompt via the BIOS.  So, as soon as you type
<kbd>Ctrl-&lt;Z&gt;</kbd>, the console device is stuck in the EOF condition,
and all subsequent invocations of programs that read standard input
immediately get receive EOF and exit.  (This problem is not specific to
DJGPP: Norton Commander also exhibits it.)

<p>A work-around is to output something to <code>stdout</code> or <code>stderr</code>
(assuming they both are connected to the console device).

<p><hr>
Node:&nbsp;<a name="FAQ%20format">FAQ format</a>,
Previous:&nbsp;<a rel=previous href="#Input%20EOF">Input EOF</a>,
Up:&nbsp;<a rel=up href="#Miscellany">Miscellany</a>
<br>

<h2>22.30 Generating the FAQ in your favorite format</h2>

<p><em><strong>Q</strong>: How can I generate the FAQ list in a format I'm used to?</em>

<br><p>
<p><strong>A</strong>: First, I suggest to check whether the FAQ is already available in
your format.  The <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2/faq230b.zip">FAQ distribution</a>
includes the Info, plain-ASCII (text), and HTML (one large <code>.html</code>
file) versions of the FAQ list.  (Personally, I recommend to use the
Info version, because Info readers generally have superior search
facilities.)  More formats will be available as the tools for their
generation are developed/tested.

<p>If you prefer to read the FAQ list as hard-copy, get
<code>faq230p.zip</code> from the same place.  It includes the
FAQ in PostScript and PCL formats; the former is for printing on a
PostScript printer, the latter is for the LaserJet series.  Be warned:
the FAQ is a large document, more than 200 printed pages. 
<code>faqNNNp.zip</code> also includes a <code>.dvi</code> file which you can print
or view using one of the available DVI drivers and previewers, such as
Ghostscript or <code>dvivga</code>.

<p>If none of these formats is good enough for you, you will need to get
the FAQ sources and convert them into the format of your liking.  The
sources of the latest version of this FAQ list are <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2/faq230s.zip">on SimTel</a>. 
This includes the FAQ sources themselves (written in Texinfo), and all
the auxiliary tools required to produce all the formats in
<code>faqNNNb.zip</code> and <code>faqNNNp.zip</code>.

<p>Once you download the sources, you will need one or more of the tools
listed below to generate the FAQ list in other formats.

<p>A program called <code>Makertf</code> can reportedly be used to convert a
Texinfo sources of this FAQ to the <dfn>Rich File Format</dfn> which can then
either be browsed by an RTF browser (such as Adobe Acrobat) or converted
into a Windows Help file with a Windows Help compiler.  The Windows Help
Compiler is available via anonymous ftp <a href="ftp://ftp.microsoft.com/Softlib/MSLFILES/HC505.EXE">from the Microsoft ftp site</a>.  I'm told that the
Windows Help compiler, <code>hcp</code>, issues a lot of warnings when it
runs on <code>Makertf</code>s output, but these warnings can be safely
ignored.

<p>A derivative of TeX called PDFTeX can be used to generate a PDF
file from TeX sources.  This means that a Texinfo source can also be
submitted to PDFTeX, but I didn't try that.  PDFTeX was ported to
DJGPP and can be downloaded from its home site <a href="ftp://ftp.cstug.cz/pub/tex/local/cstug/thanh/pdftex-testing/">via FTP</a>.  Another option
for generating a PDF version of the FAQ is to use the <code>DviPDFm</code>
program which can convert the FAQ in the DVI format (included in the
<code>faqNNNp.zip</code> distribution) into a PDF file.  <code>DviPDFm</code> is
available with several TeX distributions and can be compiled with
DJGPP.

<p>There's also a program called <code>INFNG</code> that can be used to convert
the Info (<strong>not</strong> Texinfo) version of the FAQ to the Norton Guide
format.  <code>INFNG</code> is available from <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2misc/infng100.zip">the DJGPP archives</a>.

<p>If you know about any format not mentioned above that can be generated
using widely available tools, please drop me a note so I could update
this list and consider that format or those tools for inclusion in a
future release of the FAQ.  If you develop any such tools, consider
uploading them to a site where they will be publicly available, and tell
me about that site.

<p>Note that the FAQ sources are heavy users of the Texinfo macro facility,
so any conversion program that doesn't support Texinfo macros will
probably have hard time coping with the FAQ.  When confronted with this
problem, try feeding the converter with the macro-expanded version of
the FAQ (the Makefile in the source distribution has a special target
for such cases).

<p><hr>
Node:&nbsp;<a name="About">About</a>,
Next:&nbsp;<a rel=next href="#Topic%20Index">Topic Index</a>,
Previous:&nbsp;<a rel=previous href="#Miscellany">Miscellany</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>23 About this FAQ</h1>

<p>Maintainer: <a href="mailto:eliz@is.elta.co.il">Eli Zaretskii</a>.

<p>Copyright &copy; 1994, 1995, 1996, 1997, 1998, 2000 by <a href="mailto:eliz@is.elta.co.il">Eli Zaretskii</a>.  This FAQ may be freely redistributed
with the DJGPP package or any part thereof, provided that you don't
prevent anybody else from redistributing it on the same terms, and that
this copyright notice is left intact.

<p>Comments about, suggestions for, or corrections to this FAQ list are
welcome.  Please make sure to include in your mail the version number of
the document to which your comments apply (you can find the version at the
beginning of this FAQ list).

<p>Much of the info in this FAQ list was taken from the DJGPP mailing
list/news group traffic, so many of you have (unbeknownst to you)
contributed to this list.  The following people deserve special credit
for reading this list in its previous versions and providing useful
feedback, comments, information and/or suggestions:

<pre><a href="mailto:fighteer@cs.net">John M. Aldrich</a>
<a href="mailto:A.APPLEYARD@fs2.mt.umist.ac.uk">Anthony Appleyard</a>
<a href="mailto:grbhat@unigoa.ernet.in">Gurunandan R Bhat</a>
<a href="mailto:bodfish@austen.notis.com">John Bodfish</a>
<a href="mailto:deef@pobox.oleane.com">Francois Charton</a>
<a href="mailto:Alain.Culos@bigfoot.com">Alain CULOS</a>
<a href="mailto:bill@tanihwa.org">Bill Currie</a>
<a href="mailto:bdavidson@ra.isisnet.com">Bill Davidson</a>
<a href="mailto:dj@delorie.com">DJ Delorie</a>
<a href="mailto:Demmer@LStM.Ruhr-Uni-Bochum.De">Tom Demmer</a>
<a href="mailto:neldredge@hmc.edu">Nate Eldredge</a>
<a href="mailto:jae@laden.ilk.de">Juergen Erhard</a>
<a href="mailto:x-aes@telelogic.com">Andy Eskilsson</a>
<a href="mailto:prime@UDel.Edu">Jeremy Filliben</a>
<a href="mailto:peter@agnes.dida.physik.uni-essen.de">Peter Gerwinski</a>
<a href="mailto:harbaum@ibr.cs.tu-bs.de">Till Harbaum</a>
<a href="mailto:Jim@anolis.bnr.usu.edu">James W. Haefner</a>
<a href="mailto:kheidens@actrix.gen.nz">Kris Heidenstrom</a>
<a href="mailto:kvhk@barco.com">Koen Van Herck</a>
<a href="mailto:Vik.Heyndrickx@rug.ac.be">Vik Heyndrickx</a>
<a href="mailto:robert.hoehne@gmx.net">Robert Hoehne</a>
<a href="mailto:ghogenso@u.washington.edu">Gordon Hogenson</a>
<a href="mailto:dbjh@gmx.net">Daniel Horchner</a>
<a href="mailto:omega@es.co.nz">Harry Johnston</a>
<a href="mailto:jules@acris.demon.co.uk">Jules</a>
<a href="mailto:martynas.kunigelis@vm.ktu.lt">Martynas Kunigelis</a>
<a href="mailto:kunst@prl.philips.nl">Pieter Kunst</a>
<a href="mailto:yitzg@haven.ios.com">Y. Lazarovitch</a>
<a href="mailto:lehmann@mathematik.th-darmstadt.de">Alexander Lehmann</a>
<a href="mailto:leisner@sdsp.mc.xerox.com">Marty Leisner</a>
<a href="mailto:d.love@dl.ac.uk">Dave Love</a>
<a href="mailto:randym@acm.org">Randy Maas</a>
<a href="mailto:mallory@wcug.vwu.edu">Cameron Mallory</a>
<a href="mailto:csmiller@iname.com">Colin S. Miller</a>
<a href="mailto:D.J.Murdoch@bristol.ac.uk">Duncan Murdoch</a>
<a href="mailto:naderr@topaz.cqu.edu.au">Rob Nader</a>
<a href="mailto:nicolas@JUPITER.saclay.cea.fr">Eric Nicolas</a>
<a href="mailto:ash@cinf.usm.md">Adrian Oboroc</a>
<a href="mailto:jan@stack.nl">Jan Oonk</a>
<a href="mailto:e.oti@stud.warande.ruu.nl">Elliott Oti</a>
<a href="mailto:bpaddock@execpc.com">Bob Paddock</a>
<a href="mailto:peuha@cc.helsinki.fi">Esa A E Peuha</a>
<a href="mailto:prashant_tr@yahoo.com">Prashant TR</a>
<a href="mailto:prins@quark.cs.sun.ac.za">Walter Prins</a>
<a href="mailto:salters@admin.fanshawec.on.ca">Steve Salter</a>
<a href="mailto:sandmann@clio.rice.edu">Charles Sandmann</a>
<a href="mailto:Shumw001@Cerritos.edu">Terrel Shumway</a>
<a href="mailto:ams@ludd.luth.se">Martin Str&ouml;mberg</a>
<a href="mailto:aes@solia.gsfc.nasa.gov">Andrew Szymkowiak</a>
<a href="mailto:ljt@sierrasemi.com">Launey Thomas</a>
<a href="mailto:C.J.Tilbury@estate.warwick.ac.uk">Chris Tilbury</a>
<a href="mailto:nedu@ee.washington.edu">Ned Ulbricht</a>
<a href="mailto:turnbull@shako.sk.tsukuba.ac.jp">Stephen Turnbull</a>
<a href="mailto:waider@waider.ie">Ronan Waide</a>
<a href="mailto:terra@diku.dk">Morten Welinder</a>
<a href="mailto:awesley@galaxy.anutech.com.au">Anthony Edward Wesley</a>
<a href="mailto:Kbwms@aol.com">K.B. Williams</a>
<a href="mailto:mwood@mhw.OIT.IUPUI.EDU">Mark H. Wood</a>
</pre>

<p><hr>
Node:&nbsp;<a name="Topic%20Index">Topic Index</a>,
Next:&nbsp;<a rel=next href="#Program%20Index">Program Index</a>,
Previous:&nbsp;<a rel=previous href="#About">About</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>24 Topic Index</h1>

<p>This is an alphabetical list of all the topics covered in this FAQ.  Use
it to search for a description of your problem and follow the link to find
the answer(s).

<ul compact>
<li>!proxy method of passing long command lines: <a href="#Long%20commands">Long commands</a>
<li>* character in command lines: <a href="#Filename%20globbing">Filename globbing</a>
<li>-ansi switch and C<tt>++</tt>-style comments in C programs: <a href="#C++%20comments">C++ comments</a>
<li>-fconserve-space switch: <a href="#Large%20image">Large image</a>
<li>-fno-rtti switch, crashes C<tt>++</tt> programs: <a href="#Still%20unresolved">Still unresolved</a>
<li>-fpack-struct, GCC option: <a href="#Struct%20size">Struct size</a>
<li>-frtti switch: <a href="#C++%20exceptions">C++ exceptions</a>
<li>-lfoo, linker switch: <a href="#Libraries">Libraries</a>
<li>-lg++: No such file or directory: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>-liostream option, linker errors: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>-lstdcxx, linker cannot find: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>-lstdcxx, No such file or directory, linker message: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>-lwmemu, undefined references when linking: <a href="#Emulation">Emulation</a>
<li>-traditional switch and C<tt>++</tt>-style comments in C programs: <a href="#C++%20comments">C++ comments</a>
<li>-Wall, uses lots of memory: <a href="#GCC%20optimizations">GCC optimizations</a>
<li>.lib libraries, using with GCC: <a href="#OBJ%20and%20LIB">OBJ and LIB</a>
<li>.o files from EMXAOUT can't be put into a library: <a href="#OBJ%20and%20LIB">OBJ and LIB</a>
<li>.obj object files, using with GCC: <a href="#OBJ%20and%20LIB">OBJ and LIB</a>
<li>//-style comments in C programs: <a href="#C++%20comments">C++ comments</a>
<li>//-style comments, rejecting: <a href="#C++%20comments">C++ comments</a>
<li>/bin/sh in shell scripts: <a href="#Bash%20crashes">Bash crashes</a>
<li>16-bit code, using with DJGPP: <a href="#16-bit%20code">16-bit code</a>
<li>16-bit DPMI programs cannot run under DJGPP: <a href="#Make%20hangs">Make hangs</a>
<li><code>387</code>, an environment variable: <a href="#Emulation">Emulation</a>
<li>68K targets, cross-compiling with DJGPP: <a href="#Cross-DJGPP">Cross-DJGPP</a>
<li>? character in command lines: <a href="#Filename%20globbing">Filename globbing</a>
<li>@ character, how to pass it to programs: <a href="#Special%20chars">Special chars</a>
<li>^Z character at end of DJGPP.ENV: <a href="#Info%20crashes">Info crashes</a>
<li>___djgpp_exception_table, traceback points to: <a href="#Stack%20size">Stack size</a>
<li>__crt0_glob_function, disable filename globbing: <a href="#Disable%20globbing">Disable globbing</a>
<li>__dj_movedata, high in program's profile: <a href="#IO%20bound%20programs">IO bound programs</a>
<li>__DJGPP__ pre-processor symbol: <a href="#DJGPP-specific">DJGPP-specific</a>
<li>__DJGPP_MINOR__ pre-processor symbol: <a href="#DJGPP-specific">DJGPP-specific</a>
<li>__dpmi_get_memory_information, doesn't change after free/malloc: <a href="#Confusing%20alloc">Confusing alloc</a>
<li>__dpmi_get_protected_mode_interrupt_vector: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>__dpmi_get_real_mode_interrupt_vector: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>__dpmi_int, calling DOS/BIOS services: <a href="#int86">int86</a>
<li>__dpmi_int, high in program's profile: <a href="#IO%20bound%20programs">IO bound programs</a>
<li>__dpmi_int, how to pass buffers: <a href="#Pointer%20segment">Pointer segment</a>
<li>__dpmi_simulate_real_mode_procedure_iret, need zero SS, SP and FLAGS: <a href="#Zero%20SP">Zero SP</a>
<li>__dpmi_simulate_real_mode_procedure_retf, need zero SS, SP and FLAGS: <a href="#Zero%20SP">Zero SP</a>
<li>__dpmi_YYY vs _go32_XXX, which one to use: <a href="#_go32%20vs%20__dpmi">_go32 vs __dpmi</a>
<li>__EH_FRAME_BEGIN__, undefined references: <a href="#C++%20exceptions">C++ exceptions</a>
<li>__eh_pc and __throw, undefined references: <a href="#Still%20unresolved">Still unresolved</a>
<li>__GO32__ pre-processor symbol: <a href="#DJGPP-specific">DJGPP-specific</a>
<li>__tb, an alias for the address of transfer buffer: <a href="#Pointer%20segment">Pointer segment</a>
<li>__throw and __eh_pc, undefined references: <a href="#Still%20unresolved">Still unresolved</a>
<li>_AX variable, porting to DJGPP: <a href="#Pseudo-registers">Pseudo-registers</a>
<li>_BP variable, porting to DJGPP: <a href="#Pseudo-registers">Pseudo-registers</a>
<li>_BX variable, porting to DJGPP: <a href="#Pseudo-registers">Pseudo-registers</a>
<li>_CRT0_FLAG_LOCK_MEMORY, how to use: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>_CRT0_FLAG_LOCK_MEMORY, silent failure: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>_crt0_startup_flags settings and QDPMI: <a href="#QDPMI%20VM">QDPMI VM</a>
<li>_crt0_startup_flags, setting to lock memory: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>_crt0_startup_flags, Unix sbrk is incompatible with HW interrupts: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>_CX variable, porting to DJGPP: <a href="#Pseudo-registers">Pseudo-registers</a>
<li>_DI variable, porting to DJGPP: <a href="#Pseudo-registers">Pseudo-registers</a>
<li>_dos_ds, a selector to access conventional memory: <a href="#Xfer">Xfer</a>
<li>_DS variable, porting to DJGPP: <a href="#Pseudo-registers">Pseudo-registers</a>
<li>_DX variable, porting to DJGPP: <a href="#Pseudo-registers">Pseudo-registers</a>
<li>_ES variable, porting to DJGPP: <a href="#Pseudo-registers">Pseudo-registers</a>
<li>_go32_dpmi_allocate_iret_wrapper: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>_go32_dpmi_chain_protected_mode_interrupt_vector: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>_go32_remaining_physical_memory, doesn't change after free/malloc: <a href="#Confusing%20alloc">Confusing alloc</a>
<li>_go32_remaining_physical_memory, under OS/2: <a href="#Confusing%20alloc">Confusing alloc</a>
<li>_go32_XXX vs __dpmi_YYY, which one to use: <a href="#_go32%20vs%20__dpmi">_go32 vs __dpmi</a>
<li><code>_interrupt</code> keyword, DJGPP replacement: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>_SI variable, porting to DJGPP: <a href="#Pseudo-registers">Pseudo-registers</a>
<li>_stklen, setting stack size: <a href="#Stack%20size">Stack size</a>
<li>_streamv, undefined references: <a href="#Still%20unresolved">Still unresolved</a>
<li>Abort! message during compilation: <a href="#Internal%20error">Internal error</a>
<li>Abort! message in C<tt>++</tt> programs that use exceptions: <a href="#C++%20exceptions">C++ exceptions</a>
<li>Access to drives, anti-virus software: <a href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>
<li>Accessing absolute addresses above 1MB: <a href="#Above%201MB">Above 1MB</a>
<li>Accessing absolute addresses in conventional memory: <a href="#Xfer">Xfer</a>
<li>Accessing absolute addresses with dedicated selector: <a href="#Xfer">Xfer</a>
<li>Accessing C variables from inline assembly: <a href="#Inline%20Asm">Inline Asm</a>
<li>Accessing VBE 2.0 linear frame buffer: <a href="#Direct%20access">Direct access</a>
<li>Accessing video memory: <a href="#Direct%20access">Direct access</a>
<li>Alignment of data and code by GAS can slow-down code: <a href="#Pentium">Pentium</a>
<li>Alignment, effect on program speed: <a href="#Older%20is%20faster">Older is faster</a>
<li>Allegro header files, not found: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Allegro library, failure to compile: <a href="#Allegro%20and%20GRX">Allegro and GRX</a>
<li>Allegro, home page and mailing list: <a href="#What%20to%20download">What to download</a>
<li>Allocating DOS memory: <a href="#Pointer%20segment">Pointer segment</a>
<li>Alt-TAB, cannot switch away from graphics programs: <a href="#Graphics%20and%20Windows">Graphics and Windows</a>
<li>Announcements, mailing list: <a href="#Subscribing">Subscribing</a>
<li>ANSI C<tt>++</tt> Standard: <a href="#Cannot%20find%20docs">Cannot find docs</a>
<li>Anti-virus programs find virus in DJGPP: <a href="#Virus">Virus</a>
<li>Archives, DJGPP mailing list/News group, how to search: <a href="#Archive%20search">Archive search</a>
<li>Arrays, and code speed: <a href="#Older%20is%20faster">Older is faster</a>
<li>Asking for help: <a href="#Totally%20lost">Totally lost</a>
<li>Assembly code crashes when linked with optimized C code: <a href="#ASM%20and%20C">ASM and C</a>
<li>Assembly code, generating with GCC: <a href="#Assembly%20output">Assembly output</a>
<li>Assembly functions, which registers to preserve: <a href="#ASM%20and%20C">ASM and C</a>
<li>Assembly modules, link errors: <a href="#ASM%20and%20C">ASM and C</a>
<li>Assembly source, converting from AT&amp;T to Intel: <a href="#Converting%20ASM">Converting ASM</a>
<li>Assembly source, converting to AT&amp;T syntax: <a href="#Converting%20ASM">Converting ASM</a>
<li>Assembly source, converting to protected mode: <a href="#ASM%20GPF">ASM GPF</a>
<li>Assembly source, GCC/Gas syntax: <a href="#Syntax">Syntax</a>
<li>Assembly syntax: <a href="#Syntax">Syntax</a>
<li>Asynchronous communications packages for DJGPP: <a href="#Packages">Packages</a>
<li>AT&amp;T vs Intel assembly syntax: <a href="#Syntax">Syntax</a>
<li>AT&amp;T-style assembly, converting to Intel: <a href="#Converting%20ASM">Converting ASM</a>
<li>atan, inaccuracies with FP emulator: <a href="#Emulator%20accuracy">Emulator accuracy</a>
<li>AUTOEXEC.BAT, how to edit: <a href="#Urgent">Urgent</a>
<li>Automated downloading from a PC: <a href="#DJGPP%20Fatware">DJGPP Fatware</a>
<li>Automated downloading from a Unix box: <a href="#DJGPP%20Fatware">DJGPP Fatware</a>
<li>Automated FTP from a Unix box: <a href="#DJGPP%20Fatware">DJGPP Fatware</a>
<li>Automatic variables, how much memory: <a href="#Stack%20size">Stack size</a>
<li>Batch files running programs, Windows complains: <a href="#Windows%2098">Windows 98</a>
<li>Beep, on NT: <a href="#WindowsNT">WindowsNT</a>
<li>Binary attachments, do not post: <a href="#Upload">Upload</a>
<li>Binary file I/O: <a href="#File%20data%20corrupted">File data corrupted</a>
<li>Binutils 2.8.x, slower than 2.7: <a href="#Older%20is%20faster">Older is faster</a>
<li>BIOS service calls: <a href="#int86">int86</a>
<li>BIOS service calls which need buffers: <a href="#Pointer%20segment">Pointer segment</a>
<li>BIOS setup, influence on compilation speed: <a href="#Slow%20compiler">Slow compiler</a>
<li>Blanks in DJGPP variable definition: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Books for Win32 programming: <a href="#Windows%20apps">Windows apps</a>
<li>bool type, cannot be displayed by debugger: <a href="#Bool%20vars">Bool vars</a>
<li>Breakpoints don't work in GDB under Windows: <a href="#Debugging%20woes">Debugging woes</a>
<li>Breakpoints in <code>#include</code>d files: <a href="#Included%20source">Included source</a>
<li>Browsing documentation: <a href="#Where%20is%20the%20docs">Where is the docs</a>
<li>BSD copyright: <a href="#Application%20distribution">Application distribution</a>
<li>Buffered I/O, effect of buffer size on I/O speed: <a href="#IO%20speed">IO speed</a>
<li>Bug report, how to submit: <a href="#Changing">Changing</a>
<li>Bug-tracking system for DJGPP: <a href="#Changing">Changing</a>
<li>Bugfixes, how to ensure they are done: <a href="#Slow%20development">Slow development</a>
<li>Bugs, how to browse a list of known DJGPP problems: <a href="#Changing">Changing</a>
<li><code>build.cross</code> script: <a href="#Cross-DJGPP">Cross-DJGPP</a>
<li>C compiler overflows its stack for large programs: <a href="#Internal%20error">Internal error</a>
<li>C library, legal restrictions: <a href="#DJGPP%20redistribution">DJGPP redistribution</a>
<li>C Library, the latest release: <a href="#Latest%20DJGPP">Latest DJGPP</a>
<li>C programs compilation, recommended system RAM: <a href="#Minimum">Minimum</a>
<li>C<tt>++</tt> class libraries, legal restrictions: <a href="#Application%20distribution">Application distribution</a>
<li>C<tt>++</tt> class variables under GDB: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li>C<tt>++</tt> compiler crashes for large programs: <a href="#Stack%20size">Stack size</a>
<li>C<tt>++</tt> compiler overflows its stack for large programs: <a href="#Internal%20error">Internal error</a>
<li>C<tt>++</tt> debugging with stabs information: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li>C<tt>++</tt> exceptions, support by GCC: <a href="#C++%20exceptions">C++ exceptions</a>
<li>C<tt>++</tt> linking problems with String class: <a href="#Still%20unresolved">Still unresolved</a>
<li>C<tt>++</tt> method names under GDB: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li>C<tt>++</tt> programs compilation, recommended system RAM: <a href="#Minimum">Minimum</a>
<li>C++ programs, automatically return 0: <a href="#void%20main">void main</a>
<li>C<tt>++</tt> programs, large executable: <a href="#Large%20image">Large image</a>
<li>C<tt>++</tt> programs, linking with C functions: <a href="#Still%20unresolved">Still unresolved</a>
<li>C<tt>++</tt> programs, problems with packed structs: <a href="#Struct%20packing">Struct packing</a>
<li>C<tt>++</tt> source, debugger cannot find: <a href="#GDB%20and%20C++%20source">GDB and C++ source</a>
<li>C<tt>++</tt> STL library, not in lgp271b distribution: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>C<tt>++</tt>, documentation: <a href="#Cannot%20find%20docs">Cannot find docs</a>
<li>C<tt>++</tt>, missing header files: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>C<tt>++</tt>-style comments in C programs, GCC won't compile: <a href="#C++%20comments">C++ comments</a>
<li>Caldera OpenDOS, DPMI services crash DJGPP: <a href="#Buggy%20DPMI">Buggy DPMI</a>
<li>Caldera's DOS and VDISK: <a href="#Minimum">Minimum</a>
<li>Call frame traceback, number of levels: <a href="#Crash%20dump">Crash dump</a>
<li>Callbacks, class member function: <a href="#RMCB">RMCB</a>
<li>Calling 16-bit code from DJGPP: <a href="#16-bit%20code">16-bit code</a>
<li>Calling C or assembly functions from C++ programs: <a href="#Still%20unresolved">Still unresolved</a>
<li>Calling real-mode functions: <a href="#Move%20structs">Move structs</a>
<li>calloc fails under EMM386 or HIMEM: <a href="#EMM386%20alloc">EMM386 alloc</a>
<li>calloc fails under QDPMI or Windows: <a href="#QDPMI%20alloc">QDPMI alloc</a>
<li>calloc fails under Windows 3.X: <a href="#Windows%20alloc">Windows alloc</a>
<li>calloc fails under Windows 9X: <a href="#Windows9X%20alloc">Windows9X alloc</a>
<li>calloc function, crashes with SIGSEGV: <a href="#malloc%20crash">malloc crash</a>
<li>calloc, effect on "Fat DS": <a href="#Fat%20DS">Fat DS</a>
<li>Can't find node "Top", Info message: <a href="#Info%20cannot%20find%20Top">Info cannot find Top</a>
<li>Cannot continue from exception message: <a href="#Crash%20dump">Crash dump</a>
<li>Cannot exec as, GCC message: <a href="#Missing%20subprograms">Missing subprograms</a>
<li>Cannot exec cc1plus, GCC message: <a href="#Missing%20subprograms">Missing subprograms</a>
<li>Cannot exec cpp, GCC message: <a href="#Missing%20subprograms">Missing subprograms</a>
<li>cannot exec stubify, compiler message: <a href="#No%20stubify">No stubify</a>
<li>Cannot open -lg++, linker message: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>cannot open -liostr, linker message: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Case-sensitivity, while expanding wildcards: <a href="#Filename%20globbing">Filename globbing</a>
<li>CCT sites, no longer maintained: <a href="#SimTel">SimTel</a>
<li>CD installation program doesn't copy stubify.exe: <a href="#No%20stubify">No stubify</a>
<li>CD-ROM installation of DJGPP: <a href="#General%20trouble">General trouble</a>
<li>CD-ROM, accessed by the linker: <a href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>
<li>CD-ROM, getting DJGPP: <a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>
<li>CDROM-based DJGPP installation, temporary directory: <a href="#Urgent">Urgent</a>
<li>CGI programs: <a href="#CGI%20programs">CGI programs</a>
<li>Chaining interrupt: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Changing GNU/DJGPP programs: <a href="#Changing">Changing</a>
<li>Child processes, spawning under OS/2: <a href="#OS2">OS2</a>
<li>Child programs, __dpmi_allocate_dos_memory decreases DOS memory: <a href="#Pointer%20segment">Pointer segment</a>
<li>Child programs, how much memory is left: <a href="#Swap%20out">Swap out</a>
<li>Class member functions, as interrupt handlers: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Class member functions, as real-mode callbacks: <a href="#RMCB">RMCB</a>
<li>Class method name in GDB: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li>Class static variable name in GDB: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li>Clobbering registers in assembly code: <a href="#ASM%20and%20C">ASM and C</a>
<li>Closing brace of function, program crashes there: <a href="#Crash%20dump">Crash dump</a>
<li>CMOS setup, a cause for GCC crashes: <a href="#Internal%20error">Internal error</a>
<li>Code is slow due to incorrect alignment by GAS: <a href="#Pentium">Pentium</a>
<li>Code page change might prevent MSHELL from working: <a href="#Debug%20graphics">Debug graphics</a>
<li>Code quality, GCC: <a href="#How%20fast">How fast</a>
<li>Code speed, slower in v2.x: <a href="#Older%20is%20faster">Older is faster</a>
<li>Code, DJGPP-specific: <a href="#DJGPP-specific">DJGPP-specific</a>
<li>COFF boot loader: <a href="#Packages">Packages</a>
<li>COFF debug format, does not support <code>#include</code>d files: <a href="#Included%20source">Included source</a>
<li>COFF debug format, does not support <code>bool</code> variables: <a href="#Bool%20vars">Bool vars</a>
<li>COFF debug format, does not support variables in <code>.bss</code>: <a href="#Static%20vars">Static vars</a>
<li>COFF debug format, limitations: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li>COFF option of <small>MASM</small>, debugging problems: <a href="#Converting%20ASM">Converting ASM</a>
<li>COFF, why is DJGPP using it: <a href="#ELF%20vs%20COFF">ELF vs COFF</a>
<li>Color text cannot be printed with `printf': <a href="#Screen%20IO">Screen IO</a>
<li>Command line, * and ? characters: <a href="#Filename%20globbing">Filename globbing</a>
<li>Command line, disabling filename expansion/globbing: <a href="#Disable%20globbing">Disable globbing</a>
<li>Command line, escaping special characters: <a href="#Special%20chars">Special chars</a>
<li>Command line, filename expansion/globbing: <a href="#Filename%20globbing">Filename globbing</a>
<li>Command lines truncated in a Makefile: <a href="#Makefiles">Makefiles</a>
<li>Command lines, longer than 126 characters: <a href="#Long%20commands">Long commands</a>
<li>Command-line arguments: <a href="#Command%20line">Command line</a>
<li>Comments, C<tt>++</tt>-style in C programs: <a href="#C++%20comments">C++ comments</a>
<li>Commercial programs, writing with DJGPP: <a href="#Application%20distribution">Application distribution</a>
<li>Compatibility, hardware, general: <a href="#Requirements">Requirements</a>
<li>Compatibility, Linux: <a href="#Minimum">Minimum</a>
<li>Compatibility, Novell NWDOS 7: <a href="#Minimum">Minimum</a>
<li>Compatibility, operating systems, general: <a href="#Requirements">Requirements</a>
<li>Compatibility, OS/2: <a href="#Minimum">Minimum</a>
<li>Compatibility, Warp: <a href="#Minimum">Minimum</a>
<li>Compatibility, Windows 3.X: <a href="#Minimum">Minimum</a>
<li>Compatibility, Windows 9X: <a href="#Minimum">Minimum</a>
<li>Compatibility, Windows/NT: <a href="#Minimum">Minimum</a>
<li>Compilation errors don't show with Caldera's DR-DOS: <a href="#Minimum">Minimum</a>
<li>Compilation for debugging: <a href="#How%20to%20debug">How to debug</a>
<li>Compilation messages, bogus: <a href="#Which%20language">Which language</a>
<li>Compilation progress, GCC switch: <a href="#GCC%20optimizations">GCC optimizations</a>
<li>Compilation speed: <a href="#Slow%20compiler">Slow compiler</a>
<li>Compilation time, for Allegro: <a href="#Slow%20compiler">Slow compiler</a>
<li>Compile-time problems: <a href="#Compiling">Compiling</a>
<li>Compiler crashes on Windows 3.X: <a href="#Internal%20error">Internal error</a>
<li>Compiler crashes, which subprogram of: <a href="#General%20trouble">General trouble</a>
<li>Compiler speed: <a href="#Compiler%20performance">Compiler performance</a>
<li>Compiler, non-DJGPP, crashes under Make: <a href="#Make%20hangs">Make hangs</a>
<li>Compiling GCC and CPP: <a href="#Reasonable%20hardware">Reasonable hardware</a>
<li>Compiling GCC and CPP, RAM disk: <a href="#Config">Config</a>
<li>Compiling large programs on DOSEmu: <a href="#DOSEmu">DOSEmu</a>
<li>Compiling large programs, disk cache settings: <a href="#Reasonable%20hardware">Reasonable hardware</a>
<li>Compiling large programs, RAM disk settings: <a href="#Reasonable%20hardware">Reasonable hardware</a>
<li>Compiling large source files: <a href="#Reasonable%20hardware">Reasonable hardware</a>
<li>Compiling Objective C sources: <a href="#Objective%20C">Objective C</a>
<li>Compiling, on machines without a co-processor: <a href="#GCC%20optimizations">GCC optimizations</a>
<li><code>complex</code> data type, how to debug: <a href="#Complex%20vars">Complex vars</a>
<li>complex.h functions, linker can't find: <a href="#Still%20unresolved">Still unresolved</a>
<li>Complex.h, GCC can't find: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>Compressing DJGPP executables: <a href="#Large%20executable">Large executable</a>
<li>Configuration, for optimal performance: <a href="#Config">Config</a>
<li>Configuration, reasonable: <a href="#Reasonable%20hardware">Reasonable hardware</a>
<li>Configuration, the best: <a href="#Optimal%20hardware">Optimal hardware</a>
<li>Conventional memory, locking: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Conventional memory, moving data to/from: <a href="#Xfer">Xfer</a>
<li>Conversion of the FAQ to different formats: <a href="#FAQ%20format">FAQ format</a>
<li>Converting DOS .obj/.lib files to GCC: <a href="#OBJ%20and%20LIB">OBJ and LIB</a>
<li>Converting DOS code to DJGPP: <a href="#Converting">Converting</a>
<li>Converting spaces to TABs in Makefiles: <a href="#Missing%20separator">Missing separator</a>
<li>Copyleft, effect on DJGPP: <a href="#Application%20distribution">Application distribution</a>
<li>Copyright issues: <a href="#Legalese">Legalese</a>
<li>Crash message, how to interpret: <a href="#Crash%20dump">Crash dump</a>
<li>Crash traceback, how to read: <a href="#Crash%20traceback">Crash traceback</a>
<li>Crash traceback, number of levels: <a href="#Crash%20dump">Crash dump</a>
<li>Crash traceback, saving to a file: <a href="#Crash%20dump">Crash dump</a>
<li>Crash, DJGPP programs: <a href="#Trouble">Trouble</a>
<li>Crash, inside <code>malloc</code> or <code>free</code>: <a href="#malloc%20crash">malloc crash</a>
<li>Crashes, due to faulty disk: <a href="#Internal%20error">Internal error</a>
<li>Crashes, general troubleshooting: <a href="#General%20trouble">General trouble</a>
<li>Crashes, v2.0 programs: <a href="#v2%20crash">v2 crash</a>
<li>Critical error handling in DJGPP: <a href="#Int%2024h">Int 24h</a>
<li>Cross-compiling with DJGPP: <a href="#Cross-DJGPP">Cross-DJGPP</a>
<li>crt0.o, GCC can't find: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Ctrl-Alt-Del, not passed by Windows 9X: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Ctrl-BREAK crashes on Caldera's DR-DOS: <a href="#Minimum">Minimum</a>
<li>Ctrl-BREAK, causes abort with Double Fault: <a href="#Crash%20dump">Crash dump</a>
<li>Ctrl-C aborts programs on Windows/NT: <a href="#WindowsNT">WindowsNT</a>
<li>Ctrl-C and OS/2: <a href="#OS2">OS2</a>
<li>Ctrl-C in debugged programs: <a href="#Debugging%20woes">Debugging woes</a>
<li>Ctrl-C, causes abort with Double Fault: <a href="#Crash%20dump">Crash dump</a>
<li>Curses library for DJGPP: <a href="#What%20to%20download">What to download</a>
<li>CVS access to latest DJGPP library sources: <a href="#Latest%20DJGPP">Latest DJGPP</a>
<li>Cygnus GCC port to Windows: <a href="#WindowsNT">WindowsNT</a>
<li>Cygwin port of GCC for Windows 9X and NT: <a href="#Windows%20apps">Windows apps</a>
<li>DEADBEEF, use to spot uninitialized memory: <a href="#v2%20crash">v2 crash</a>
<li>Debugger cannot find C<tt>++</tt> source: <a href="#GDB%20and%20C++%20source">GDB and C++ source</a>
<li>Debugger causes programs to overflow the stack: <a href="#Stack%20size">Stack size</a>
<li>Debugger crashes on programs compiled for profiling: <a href="#Debugging%20woes">Debugging woes</a>
<li>Debugger crashes on programs which use exceptions: <a href="#Debugging%20woes">Debugging woes</a>
<li>Debugger doesn't know about #include'd source: <a href="#Included%20source">Included source</a>
<li>Debugger doesn't pass signals to debuggee: <a href="#Debugging%20woes">Debugging woes</a>
<li>Debugger GP Faults on Windows 3.X: <a href="#Debugging%20woes">Debugging woes</a>
<li>Debugger, usage: <a href="#How%20to%20debug">How to debug</a>
<li>Debuggers for DJGPP programs: <a href="#How%20to%20debug">How to debug</a>
<li>Debugging C<tt>++</tt> programs: <a href="#GDB%20and%20C++%20source">GDB and C++ source</a>
<li>Debugging C/C<tt>++</tt> code generated by another program: <a href="#Included%20source">Included source</a>
<li>Debugging graphics programs: <a href="#Debug%20graphics">Debug graphics</a>
<li>Debugging graphics programs on Windows: <a href="#Debug%20graphics">Debug graphics</a>
<li>Debugging issues: <a href="#Debugging">Debugging</a>
<li>Debugging problems, with COFF option of <small>MASM</small>: <a href="#Converting%20ASM">Converting ASM</a>
<li>Debugging programs which crash: <a href="#Crash%20dump">Crash dump</a>
<li>Debugging symbols, how to strip from executables: <a href="#Large%20executable">Large executable</a>
<li>Debugging, dwarf2 format: <a href="#How%20to%20debug">How to debug</a>
<li>Debugging, stabs format: <a href="#How%20to%20debug">How to debug</a>
<li><code>delay</code> function on OS/2: <a href="#OS2">OS2</a>
<li><code>delay</code> function, on Windows/NT: <a href="#WindowsNT">WindowsNT</a>
<li>delaying program's execution: <a href="#usleep">usleep</a>
<li>delete operator, crashes with SIGSEGV: <a href="#malloc%20crash">malloc crash</a>
<li>Deleting a package: <a href="#Uninstall">Uninstall</a>
<li>DEV directory, problems with DJGPP programs: <a href="#dev%20directory">dev directory</a>
<li>Development environments for DJGPP: <a href="#Packages">Packages</a>
<li>Development of DJGPP, how to contribute: <a href="#Slow%20development">Slow development</a>
<li>Dinkumware site: <a href="#Cannot%20find%20docs">Cannot find docs</a>
<li>Direct hardware access on Windows/NT: <a href="#WindowsNT">WindowsNT</a>
<li>Directories accessed by the linker: <a href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>
<li>DirectX for DJGPP and RSXNTDJ: <a href="#Packages">Packages</a>
<li>DirectX programming: <a href="#Packages">Packages</a>
<li>Disabling globbing in filenames: <a href="#Disable%20globbing">Disable globbing</a>
<li>Disabling virtual memory for CWSDPMI: <a href="#Slow%20compiler">Slow compiler</a>
<li>Disabling wildcard expansion: <a href="#Disable%20globbing">Disable globbing</a>
<li>Disk cache, influence on compilation speed: <a href="#Slow%20compiler">Slow compiler</a>
<li>Disk cache, recommended settings: <a href="#Config">Config</a>
<li>Disk cache, when compiling large programs: <a href="#Reasonable%20hardware">Reasonable hardware</a>
<li>Disk editors destroy long file names: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>Disk I/O, compared with Linux: <a href="#IO%20speed">IO speed</a>
<li>Disk space, required for installation: <a href="#Minimum">Minimum</a>
<li>Disk space, using less of it: <a href="#DJGPP%20Fatware">DJGPP Fatware</a>
<li>Disks, accessed by the linker: <a href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>
<li>Display or set static variables inside debugger: <a href="#Static%20vars">Static vars</a>
<li>Display problems with RHIDE: <a href="#RHIDE">RHIDE</a>
<li>Distributing DJGPP programs, FP emulator: <a href="#Emulation">Emulation</a>
<li>Distributing DJGPP programs, required files: <a href="#Distributing">Distributing</a>
<li>DJGPP applications, legal restrictions: <a href="#Application%20distribution">Application distribution</a>
<li>DJGPP archives, how to search: <a href="#Archive%20search">Archive search</a>
<li>DJGPP as cross-compiler: <a href="#Cross-DJGPP">Cross-DJGPP</a>
<li>DJGPP development sources, how to get: <a href="#Latest%20DJGPP">Latest DJGPP</a>
<li>DJGPP distribution, list of: <a href="#What%20to%20download">What to download</a>
<li>DJGPP Documentation: <a href="#Docs">Docs</a>
<li>DJGPP documentation, in man page format: <a href="#Man%20pages">Man pages</a>
<li>DJGPP documentation, in PostScript format: <a href="#Printed%20docs">Printed docs</a>
<li>DJGPP documentation, look in source distributions: <a href="#Cannot%20find%20docs">Cannot find docs</a>
<li>DJGPP documentation, printing: <a href="#Printed%20docs">Printed docs</a>
<li>DJGPP documentation, reading as ASCII file: <a href="#No%20Info">No Info</a>
<li>DJGPP documentation, reading with a Web browser: <a href="#Printed%20docs">Printed docs</a>
<li>DJGPP documentation, see source files: <a href="#Last%20resort">Last resort</a>
<li>DJGPP documentation, where to find it: <a href="#Where%20is%20the%20docs">Where is the docs</a>
<li>DJGPP environment variable, how to set and test: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>DJGPP environment variable, setting under LFN: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>DJGPP mailing list, how to post: <a href="#How%20to%20post">How to post</a>
<li>DJGPP mailing list, how to subscribe: <a href="#Subscribing">Subscribing</a>
<li>DJGPP mailing list, how to unsubscribe: <a href="#Unsubscribing">Unsubscribing</a>
<li>DJGPP mailing list, in digest form: <a href="#Subscribing">Subscribing</a>
<li>DJGPP mailing list/news group, read via WWW: <a href="#Unsubscribing">Unsubscribing</a>
<li>DJGPP on a CD-ROM: <a href="#General%20trouble">General trouble</a>
<li>DJGPP programs, problems with: <a href="#Trouble">Trouble</a>
<li>DJGPP programs, problems with DPMI host: <a href="#Buggy%20DPMI">Buggy DPMI</a>
<li>DJGPP programs, profiling: <a href="#How%20to%20profile">How to profile</a>
<li>DJGPP release schedule: <a href="#Slow%20development">Slow development</a>
<li>DJGPP software, where to upload: <a href="#Upload">Upload</a>
<li>DJGPP users, asking for help: <a href="#Totally%20lost">Totally lost</a>
<li>DJGPP utilities, legal restrictions: <a href="#DJGPP%20redistribution">DJGPP redistribution</a>
<li>DJGPP v2.x, alternative DPMI hosts: <a href="#Environment">Environment</a>
<li>DJGPP won't run, prints "No DPMI": <a href="#No%20DPMI">No DPMI</a>
<li>DJGPP, a list of packages: <a href="#What%20to%20download">What to download</a>
<li>DJGPP, beware of blanks when setting: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>DJGPP, downloading via e-mail: <a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>
<li>DJGPP, downloading with FTP: <a href="#How%20to%20download">How to download</a>
<li>DJGPP, downloading with Gopher: <a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>
<li>DJGPP, downloading with WWW: <a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>
<li>DJGPP, history of the project: <a href="#WWW">WWW</a>
<li>DJGPP, how to get it: <a href="#Getting%20DJGPP">Getting DJGPP</a>
<li>DJGPP, sample code: <a href="#Packages">Packages</a>
<li>DJGPP, what it is: <a href="#DJGPP">DJGPP</a>
<li>DJGPP, where to download: <a href="#SimTel">SimTel</a>
<li>DJGPP-ANNOUNCE mailing list: <a href="#Subscribing">Subscribing</a>
<li>DJGPP-compiled programs can't find DPMI: <a href="#Distributing">Distributing</a>
<li>DJGPP-specific code: <a href="#DJGPP-specific">DJGPP-specific</a>
<li>DJGPP.ENV file causes GCC 2.8 to hang: <a href="#Programs%20hang">Programs hang</a>
<li>DJGPP.ENV syntax explained: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>DJGPP.ENV, compiler environment variables: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>DJGPP.ENV, trailing junk crashes Info: <a href="#Buggy%20DPMI">Buggy DPMI</a>
<li>djgpp_first_ctor, unresolved by linker: <a href="#djgpp_first_ctor">djgpp_first_ctor</a>
<li>djgpp_first_dtor, unresolved by linker: <a href="#djgpp_first_ctor">djgpp_first_ctor</a>
<li>DLLs, why doesn't DJGPP use them: <a href="#DJGPP%20and%20DLLs">DJGPP and DLLs</a>
<li>DMA, using from DJGPP programs: <a href="#DMA">DMA</a>
<li>Documentation, C<tt>++</tt> classes and STL library: <a href="#Cannot%20find%20docs">Cannot find docs</a>
<li>Documentation, converting to plain ASCII: <a href="#No%20Info">No Info</a>
<li>Documentation, converting to PostScript format: <a href="#Printed%20docs">Printed docs</a>
<li>Documentation, in HTML format: <a href="#Printed%20docs">Printed docs</a>
<li>Documentation, in man page format: <a href="#Man%20pages">Man pages</a>
<li>Documentation, in PostScript format: <a href="#Printed%20docs">Printed docs</a>
<li>Documentation, inside source distribution archives: <a href="#Cannot%20find%20docs">Cannot find docs</a>
<li>Documentation, reading: <a href="#Where%20is%20the%20docs">Where is the docs</a>
<li>DOS box properties, memory settings on Windows 98: <a href="#Windows%2098">Windows 98</a>
<li>DOS code, using with GCC: <a href="#16-bit%20code">16-bit code</a>
<li>DOS libraries, using with GCC: <a href="#OBJ%20and%20LIB">OBJ and LIB</a>
<li>DOS memory, allocating and freeing: <a href="#Pointer%20segment">Pointer segment</a>
<li>DOS memory, mapping into address space: <a href="#Above%201MB">Above 1MB</a>
<li>DOS Mode, disables long file names: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>DOS Mode, Windows suggests for graphics programs: <a href="#Graphics%20and%20Windows">Graphics and Windows</a>
<li>DOS object files, using with GCC: <a href="#OBJ%20and%20LIB">OBJ and LIB</a>
<li>DOS programs, converting to DJGPP: <a href="#Converting">Converting</a>
<li>DOS service calls: <a href="#int86">int86</a>
<li>DOS service calls which need buffers: <a href="#Pointer%20segment">Pointer segment</a>
<li>DOS versions supported by DJGPP: <a href="#Minimum">Minimum</a>
<li>DOSEmu, incompatibilities with DJGPP: <a href="#DOSEmu">DOSEmu</a>
<li>DOSEmu, slow response to interactive programs: <a href="#DOSEmu">DOSEmu</a>
<li>Double Fault message: <a href="#Crash%20dump">Crash dump</a>
<li>Downloading DJGPP: <a href="#SimTel">SimTel</a>
<li>Downloading DJGPP via e-mail: <a href="#How%20to%20download">How to download</a>
<li>Downloading DJGPP with FTP: <a href="#How%20to%20download">How to download</a>
<li>Downloading DJGPP with WWW: <a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>
<li>Downloading, individual DJGPP files: <a href="#What%20to%20download">What to download</a>
<li>DPMI host bugs, might crash DJGPP programs: <a href="#Buggy%20DPMI">Buggy DPMI</a>
<li>DPMI hosts, commercially available: <a href="#Environment">Environment</a>
<li>DPMI memory setting under Windows 9X: <a href="#Windows9X%20alloc">Windows9X alloc</a>
<li>DPMI services, problems with Novell NWDOS 7: <a href="#Minimum">Minimum</a>
<li>DPMI services, required to run DJGPP: <a href="#Minimum">Minimum</a>
<li>DPMI spec, where to get it: <a href="#DPMI%20Spec">DPMI Spec</a>
<li>DPMI, required to run DJGPP programs: <a href="#Distributing">Distributing</a>
<li>DPMI, what it is: <a href="#DPMI%20Spec">DPMI Spec</a>
<li>Drives, accessed by the linker: <a href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>
<li>Dual-monitor support in RHIDE, problems: <a href="#Debug%20graphics">Debug graphics</a>
<li>dup library function, maximum number of handles: <a href="#File%20handles">File handles</a>
<li>Duplicate versions of gxx.exe and cxxfilt.exe: <a href="#g++.exe">g++.exe</a>
<li>dwarf2 debugging format, how to compile: <a href="#How%20to%20debug">How to debug</a>
<li>DXE can be debugged with EDEBUG32: <a href="#How%20to%20debug">How to debug</a>
<li>DXE description: <a href="#DXE">DXE</a>
<li>DXE docs and examples: <a href="#DXE">DXE</a>
<li>DXE, undefined references: <a href="#DXE">DXE</a>
<li>Dynamically loaded code for DJGPP: <a href="#Packages">Packages</a>
<li>E-mail, downloading DJGPP: <a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>
<li>Editing AUTOEXEC.BAT: <a href="#Urgent">Urgent</a>
<li>EIP, converting to source lines: <a href="#Crash%20traceback">Crash traceback</a>
<li>ELF, switching DJGPP to: <a href="#ELF%20vs%20COFF">ELF vs COFF</a>
<li>ELF32, Binutils configured for: <a href="#ELF%20vs%20COFF">ELF vs COFF</a>
<li><code>emu387</code>, an environment variable: <a href="#Emulation">Emulation</a>
<li>Emulation, floating-point: <a href="#Floating%20point">Floating point</a>
<li>Emulation, hangs on Windows: <a href="#Emulation%20in%20Windows">Emulation in Windows</a>
<li>Emulator library: <a href="#Emulation">Emulation</a>
<li>Emulator, floating-point inaccuracies: <a href="#Emulator%20accuracy">Emulator accuracy</a>
<li>Environment size affects spawning child programs: <a href="#How%20long">How long</a>
<li>Environment variable DJGPP is not defined message: <a href="#Internal%20error">Internal error</a>
<li>Environment variable DJGPP point to file which does not exist message: <a href="#Internal%20error">Internal error</a>
<li>Environment variable DJGPP points to a wrong or corrupt file message: <a href="#Internal%20error">Internal error</a>
<li>Environment variables, DJGPP: <a href="#Optimal%20hardware">Optimal hardware</a>
<li>Environment variables, linker: <a href="#Libraries%20order">Libraries order</a>
<li>EOF from stdin, immediate exit: <a href="#Input%20EOF">Input EOF</a>
<li>Error messages, redirecting to a file: <a href="#Redirect">Redirect</a>
<li>Exception stack in DJGPP: <a href="#Crash%20dump">Crash dump</a>
<li>Exceptions, C<tt>++</tt>, support by GCC: <a href="#C++%20exceptions">C++ exceptions</a>
<li>Exceptions, with -fsjlj-exceptions: <a href="#C++%20exceptions">C++ exceptions</a>
<li>Excessive paging, tuning CWSDPMI: <a href="#Config">Config</a>
<li>EXE compressor for DJGPP: <a href="#Large%20executable">Large executable</a>
<li>Executable size, how to make smaller: <a href="#Large%20executable">Large executable</a>
<li>Executable, bloated by static array: <a href="#Large%20image">Large image</a>
<li>Executable, how to strip off debugging symbols: <a href="#Large%20executable">Large executable</a>
<li>Exit due to EOF from stdin: <a href="#Input%20EOF">Input EOF</a>
<li>extern "C" qualifier: <a href="#Still%20unresolved">Still unresolved</a>
<li><code>extern "C"</code>, use with assembly and C code: <a href="#ASM%20and%20C">ASM and C</a>
<li>FAQ, conversion to different formats: <a href="#FAQ%20format">FAQ format</a>
<li>Far pointer memory access: <a href="#Direct%20access">Direct access</a>
<li>far, declaration, porting to DJGPP: <a href="#NEAR%20and%20FAR">NEAR and FAR</a>
<li>Farptr str* and mem* functions for DJGPP: <a href="#Packages">Packages</a>
<li>FAT32 support under DOSEmu: <a href="#DOSEmu">DOSEmu</a>
<li>File format not recognized by GCC: <a href="#Which%20language">Which language</a>
<li>File handles, under Windows: <a href="#File%20handles">File handles</a>
<li>File handles, with SHARE: <a href="#File%20handles">File handles</a>
<li>File I/O, compared with Linux: <a href="#IO%20speed">IO speed</a>
<li>File I/O, DJGPP optimization: <a href="#IO%20speed">IO speed</a>
<li>Filename globbing: <a href="#Filename%20globbing">Filename globbing</a>
<li>Filename globbing, disabling: <a href="#Disable%20globbing">Disable globbing</a>
<li>Filename wildcards expansion: <a href="#Filename%20globbing">Filename globbing</a>
<li>Filename wildcards, disabling expansion: <a href="#Disable%20globbing">Disable globbing</a>
<li>Files to be distributed with DJGPP programs: <a href="#Distributing">Distributing</a>
<li>Files, max open simultaneously: <a href="#File%20handles">File handles</a>
<li>Files, minimum set to download: <a href="#What%20to%20download">What to download</a>
<li>Files, missing, where to download: <a href="#What%20to%20download">What to download</a>
<li>Files, reading and writing: <a href="#File%20data%20corrupted">File data corrupted</a>
<li>Files, required disk space: <a href="#Disk%20space">Disk space</a>
<li>FILES= directive: <a href="#File%20handles">File handles</a>
<li>FIND: Parameter format not correct, error message: <a href="#What%20to%20download">What to download</a>
<li>First C program, how to write: <a href="#Urgent">Urgent</a>
<li>Fixed or forbidden register spilled, GCC error message: <a href="#Allegro%20and%20GRX">Allegro and GRX</a>
<li>Flex programs, linking: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Floating Point exception message: <a href="#Crash%20dump">Crash dump</a>
<li>Floating-point emulation: <a href="#Floating%20point">Floating point</a>
<li>Floating-point emulation doesn't work: <a href="#Emulation">Emulation</a>
<li>Floating-point emulation under debugger: <a href="#Debugging%20woes">Debugging woes</a>
<li>Floating-point emulator, distributing with DJGPP programs: <a href="#Distributing">Distributing</a>
<li>Floating-point instructions and GNU Make: <a href="#DOSEmu">DOSEmu</a>
<li>Floating-point issues: <a href="#Floating%20point">Floating point</a>
<li>Floating-point math functions, standard and high-quality: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Floating-point, debugger support: <a href="#How%20to%20debug">How to debug</a>
<li>FNCASE variable and wildcard expansion: <a href="#Filename%20globbing">Filename globbing</a>
<li>Fortran compiler: <a href="#What%20to%20download">What to download</a>
<li>FP emulation on NT: <a href="#WindowsNT">WindowsNT</a>
<li>FP_SEG and FP_OFF, porting to DJGPP: <a href="#NEAR%20and%20FAR">NEAR and FAR</a>
<li>FPU emulation slows down programs: <a href="#Slow-down">Slow-down</a>
<li>free doesn't change virtual memory: <a href="#Confusing%20alloc">Confusing alloc</a>
<li>free function, crashes with SIGSEGV: <a href="#malloc%20crash">malloc crash</a>
<li>Freeing DOS memory: <a href="#Pointer%20segment">Pointer segment</a>
<li>fstream truncates files open for read/write: <a href="#File%20data%20corrupted">File data corrupted</a>
<li>fstream, and binary files: <a href="#File%20data%20corrupted">File data corrupted</a>
<li>FTP, downloading DJGPP: <a href="#How%20to%20download">How to download</a>
<li>FTP, downloading DJGPP in batch mode: <a href="#DJGPP%20Fatware">DJGPP Fatware</a>
<li>Function alignment, effect on program speed: <a href="#Older%20is%20faster">Older is faster</a>
<li><code>function.h</code> header, in RSXNTDJ: <a href="#Windows%20apps">Windows apps</a>
<li>functions, under BSD copyright: <a href="#Application%20distribution">Application distribution</a>
<li>Functions, which is in what library: <a href="#Which%20library">Which library</a>
<li>Game programming, libraries and techniques for DJGPP: <a href="#Packages">Packages</a>
<li>Garbage at end of number, GCC message: <a href="#0xfe+0x20">0xfe+0x20</a>
<li>GCC aborts with "Installation problem, cannot exec as": <a href="#Missing%20subprograms">Missing subprograms</a>
<li>GCC aborts with "Installation problem, cannot exec cc1plus": <a href="#Missing%20subprograms">Missing subprograms</a>
<li>GCC aborts with "Installation problem, cannot exec cpp": <a href="#Missing%20subprograms">Missing subprograms</a>
<li>GCC aborts with "Internal compiler error": <a href="#Internal%20error">Internal error</a>
<li>GCC can't recognize file format: <a href="#Which%20language">Which language</a>
<li>GCC can't recognize source language: <a href="#Which%20language">Which language</a>
<li>GCC crashes, which subprogram of: <a href="#General%20trouble">General trouble</a>
<li>GCC hangs/crashes under Make: <a href="#Make%20hangs">Make hangs</a>
<li>GCC says "Abort!" during compilation: <a href="#Internal%20error">Internal error</a>
<li>General Protection Fault message: <a href="#Crash%20dump">Crash dump</a>
<li>Getting DJGPP: <a href="#Getting%20DJGPP">Getting DJGPP</a>
<li>Getting DJGPP on a CD-ROM: <a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>
<li>Getting documentation: <a href="#Where%20is%20the%20docs">Where is the docs</a>
<li>Getting more help: <a href="#Help">Help</a>
<li>Globbing and file name letter-case: <a href="#Filename%20globbing">Filename globbing</a>
<li>Globbing in filenames: <a href="#Filename%20globbing">Filename globbing</a>
<li>Globbing in filenames, disabling: <a href="#Disable%20globbing">Disable globbing</a>
<li>gmon.out: no such file, profiler message: <a href="#No%20profile">No profile</a>
<li>GNU Copyleft, effect on DJGPP: <a href="#Application%20distribution">Application distribution</a>
<li>GNU development utilities, port to DJGPP: <a href="#Packages">Packages</a>
<li>GNU News groups, don't post DJGPP problems: <a href="#DJGPP%20is%20not%20GNU">DJGPP is not GNU</a>
<li>GNU packages, how to change: <a href="#Changing">Changing</a>
<li>Gopher, downloading DJGPP: <a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>
<li>gotoxy doesn't work with `printf': <a href="#Screen%20IO">Screen IO</a>
<li>GPF with an error code: <a href="#Crash%20dump">Crash dump</a>
<li>GPL, effect on DJGPP: <a href="#Application%20distribution">Application distribution</a>
<li>granularity, in time-related functions: <a href="#usleep">usleep</a>
<li>Graphics driver setup: <a href="#GRX%20driver">GRX driver</a>
<li>Graphics issues: <a href="#Graphics">Graphics</a>
<li>Graphics packages: <a href="#What%20to%20download">What to download</a>
<li>Graphics print-out, using GRX: <a href="#What%20to%20download">What to download</a>
<li>Graphics program debugging on Windows: <a href="#Debug%20graphics">Debug graphics</a>
<li>Graphics programs, and Windows DOS Mode: <a href="#Graphics%20and%20Windows">Graphics and Windows</a>
<li>Graphics programs, cannot switch with Alt-TAB: <a href="#Graphics%20and%20Windows">Graphics and Windows</a>
<li>Graphics programs, debugging: <a href="#Debug%20graphics">Debug graphics</a>
<li>Graphics screen messed up under Windows: <a href="#Graphics%20and%20Windows">Graphics and Windows</a>
<li>Graphics, direct video access: <a href="#Direct%20access">Direct access</a>
<li>Graphics, limitations on Windows/NT: <a href="#WindowsNT">WindowsNT</a>
<li>graphics.h, where to find: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>GUI libraries for DJGPP: <a href="#Packages">Packages</a>
<li>Gurus, asking for help: <a href="#Totally%20lost">Totally lost</a>
<li>Handles, maximum available number: <a href="#File%20handles">File handles</a>
<li>Hang, all DJGPP programs: <a href="#Buggy%20DPMI">Buggy DPMI</a>
<li>Hang, DJGPP programs: <a href="#Trouble">Trouble</a>
<li>harderr function, emulating under DJGPP: <a href="#Int%2024h">Int 24h</a>
<li>Hardware interrupt handler crashes: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Hardware interrupts, hooking: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Hardware interrupts, subtleties: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Hardware requirements: <a href="#Requirements">Requirements</a>
<li>Hardware requirements, minimal: <a href="#Minimum">Minimum</a>
<li>Hardware-oriented programming: <a href="#Low-level">Low-level</a>
<li>Header files, C<tt>++</tt>, GCC can't find: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>Header files, GCC can't find: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Header files, long file names destroyed: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>Header files, problems with RSXNTDJ: <a href="#Windows%20apps">Windows apps</a>
<li>Help, asking for: <a href="#Totally%20lost">Totally lost</a>
<li>High-frequency interrupts, writing handlers for: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>History of DJGPP: <a href="#WWW">WWW</a>
<li>How to install RSXNTDJ: <a href="#Windows%20apps">Windows apps</a>
<li>How to unzip DJGPP with Aladdin Expander: <a href="#Urgent">Urgent</a>
<li>How to unzip DJGPP with WinZip: <a href="#Urgent">Urgent</a>
<li>How to write programs, introduction: <a href="#Urgent">Urgent</a>
<li>HTML docs, for the DJGPP library: <a href="#No%20Info">No Info</a>
<li>HTML format, DJGPP documentation: <a href="#Printed%20docs">Printed docs</a>
<li>huge, declaration, porting to DJGPP: <a href="#NEAR%20and%20FAR">NEAR and FAR</a>
<li>I/O speed, DJGPP programs: <a href="#IO%20speed">IO speed</a>
<li>I/O-bound programs, how to recognize: <a href="#IO%20bound%20programs">IO bound programs</a>
<li>i286: <a href="#i286">i286</a>
<li>i386SX: <a href="#Minimum">Minimum</a>
<li>ifstream, and binary files: <a href="#File%20data%20corrupted">File data corrupted</a>
<li>Inaccuracies, using emulator: <a href="#Emulator%20accuracy">Emulator accuracy</a>
<li>Including source code, problems with debugging: <a href="#Included%20source">Included source</a>
<li>Incompatibilities, i286: <a href="#i286">i286</a>
<li>Incompatibilities, Linux DOSEmu: <a href="#DOSEmu">DOSEmu</a>
<li>Incompatibilities, OS/2: <a href="#OS2">OS2</a>
<li>Incompatibilities, Warp: <a href="#OS2">OS2</a>
<li>Incompatibilities, Windows/NT: <a href="#WindowsNT">WindowsNT</a>
<li>Info hangs for non-existent topics: <a href="#Info%20cannot%20find%20Top">Info cannot find Top</a>
<li>Info viewer crashes at startup: <a href="#Info%20crashes">Info crashes</a>
<li>Info waits for 15 seconds: <a href="#Info%20cannot%20find%20Top">Info cannot find Top</a>
<li>Info won't display a file: <a href="#Info%20cannot%20find%20Top">Info cannot find Top</a>
<li>Inheritance, file handles: <a href="#File%20handles">File handles</a>
<li>Inline assembly, how to write: <a href="#Inline%20Asm">Inline Asm</a>
<li>Inline assembly, inaccurate SYMIFY output: <a href="#Crash%20traceback">Crash traceback</a>
<li>Inline functions, linker won't find: <a href="#Still%20unresolved">Still unresolved</a>
<li>Inlining, and code speed: <a href="#Older%20is%20faster">Older is faster</a>
<li>Installation of Info docs, a utility: <a href="#What%20to%20download">What to download</a>
<li>Installation problem, cannot exec..., GCC message: <a href="#Missing%20subprograms">Missing subprograms</a>
<li>Installation, dual, DOS/Windows: <a href="#Dual%20DOS%2fWindows">Dual DOS/Windows</a>
<li>Installing a disk cache: <a href="#Config">Config</a>
<li>Installing DJGPP on networked drives: <a href="#Config">Config</a>
<li>Int 24h crashes DJGPP programs: <a href="#Int%2024h">Int 24h</a>
<li>int86 crashes program: <a href="#int86">int86</a>
<li>int86, problems with mouse interface: <a href="#int86">int86</a>
<li>int86/intdos, garbled results in registers: <a href="#int86">int86</a>
<li>int86/intdos, registers' width: <a href="#int86">int86</a>
<li>int86x/intdosx, how to pass a buffer: <a href="#Pointer%20segment">Pointer segment</a>
<li>intdos crashes program: <a href="#int86">int86</a>
<li>Intel assembly syntax, accepted by Gas: <a href="#Syntax">Syntax</a>
<li>Intel vs AT&amp;T assembly syntax: <a href="#Syntax">Syntax</a>
<li>Intel-style assembly code, using with DJGPP: <a href="#Converting%20ASM">Converting ASM</a>
<li>Interactive programs, screen I/O: <a href="#Screen%20IO">Screen IO</a>
<li>Interface with Windows, library of functions: <a href="#Packages">Packages</a>
<li>Internal compiler error, when compiling C<tt>++</tt> programs: <a href="#Internal%20error">Internal error</a>
<li>Interrupt 24h handling: <a href="#Int%2024h">Int 24h</a>
<li>Interrupt chaining: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Interrupt frequency, maximum: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Interrupt handler, class member function: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Interrupt handler, speeding up: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Interrupt handlers, locking memory: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Interrupt handlers, on Windows 9X: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Interrupt handling, samples and packages: <a href="#Packages">Packages</a>
<li><code>interrupt</code> keyword, DJGPP replacement: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Interrupt List, by Ralf Brown: <a href="#DPMI%20Spec">DPMI Spec</a>
<li>Interrupt reflection: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Interrupt reflection overhead: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Interrupts 1Ch, 23h, 24h: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Interrupts handlers in DJGPP: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Invalid TSS in RMCB message: <a href="#Crash%20dump">Crash dump</a>
<li>Invoking v2 programs from v1.x programs: <a href="#go32-v2">go32-v2</a>
<li>iostream functions, linker can't find: <a href="#Still%20unresolved">Still unresolved</a>
<li>iostream library, why use it: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>iostream.h, GCC can't find: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>iostreamP.h, GCC can't find: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>IPC facility for DJGPP: <a href="#Packages">Packages</a>
<li>IPX network library: <a href="#Packages">Packages</a>
<li>Jargon, used by DJGPP documentation: <a href="#Lexicon">Lexicon</a>
<li>Jump alignment, effect on program speed: <a href="#Older%20is%20faster">Older is faster</a>
<li>K6, alignment effects on program speed: <a href="#Older%20is%20faster">Older is faster</a>
<li>Keyboard interrupt cannot be hooked under debugger: <a href="#Debugging%20woes">Debugging woes</a>
<li>Keystrokes don't get to keyboard handler: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Known bugs in DJGPP, how to browse: <a href="#Changing">Changing</a>
<li>Language of messaged posted to DJGPP news group: <a href="#Languages">Languages</a>
<li>Languages, foreign, translating: <a href="#Languages">Languages</a>
<li>Legal aspects of DJGPP programming: <a href="#Legalese">Legalese</a>
<li>Legal restrictions on DJGPP apps: <a href="#Application%20distribution">Application distribution</a>
<li>Legal restrictions, DJGPP utilities: <a href="#DJGPP%20redistribution">DJGPP redistribution</a>
<li>Legal terms for using DJGPP, precise definition: <a href="#Application%20distribution">Application distribution</a>
<li>Length of command line: <a href="#How%20long">How long</a>
<li>Letter case in filenames submitted to GCC: <a href="#Which%20language">Which language</a>
<li>Lexicon for DJGPP documentation: <a href="#Lexicon">Lexicon</a>
<li>LFN API, not supported by Windows/NT: <a href="#WindowsNT">WindowsNT</a>
<li>LFN driver for NT, alpha version: <a href="#WindowsNT">WindowsNT</a>
<li>LFN problems, in DJGPP v2.0: <a href="#LFN">LFN</a>
<li>LGPL, effect on DJGPP: <a href="#Application%20distribution">Application distribution</a>
<li>libc for DJGPP, patched version: <a href="#Latest%20DJGPP">Latest DJGPP</a>
<li>libc2.tex, missing file: <a href="#Printed%20docs">Printed docs</a>
<li>libg++ library: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>libgcc.a, should be in sync with the compiler: <a href="#Still%20unresolved">Still unresolved</a>
<li>libgpp library: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>libgpp.a, legal restrictions: <a href="#Application%20distribution">Application distribution</a>
<li>Libraries, converting to DJGPP: <a href="#Converting">Converting</a>
<li>Libraries, creating with RHIDE: <a href="#Libraries">Libraries</a>
<li>Libraries, GCC can't find: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Libraries, object, how to create/update: <a href="#Libraries">Libraries</a>
<li>Libraries, optional, how to link: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Libraries, order on compilation/link command line: <a href="#Libraries%20order">Libraries order</a>
<li>Libraries, searching for functions: <a href="#Which%20library">Which library</a>
<li>Library docs in HTML format: <a href="#No%20Info">No Info</a>
<li>Library docs, missing libc2.tex: <a href="#Printed%20docs">Printed docs</a>
<li>Library docs, problems in generating printed version: <a href="#Printed%20docs">Printed docs</a>
<li>Library functions, linker won't find: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Library functions, linker won't find in non-default directories: <a href="#Libraries%20order">Libraries order</a>
<li>Library functions, linker won't find, libraries' order: <a href="#Libraries%20order">Libraries order</a>
<li>Library, floating-point emulation: <a href="#Emulation">Emulation</a>
<li>Library, updated, where to get: <a href="#Latest%20DJGPP">Latest DJGPP</a>
<li>libstdc++ standard templates library: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Linear frame buffer access: <a href="#Direct%20access">Direct access</a>
<li>Linear frame buffer, problems in DR-DOS: <a href="#Minimum">Minimum</a>
<li>Link errors, when linking assembly modules: <a href="#ASM%20and%20C">ASM and C</a>
<li>Link-time problems: <a href="#Compiling">Compiling</a>
<li>Linker can't find library functions: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Linker cannot find -lstdcx: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Linker fails to find crt0.o under Novell: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Linker fails to produce executable: <a href="#No%20EXE">No EXE</a>
<li>Linker speed: <a href="#Compiler%20performance">Compiler performance</a>
<li>Linker won't find djgpp_first_dtor symbol: <a href="#djgpp_first_ctor">djgpp_first_ctor</a>
<li>Linker, accesses random drives: <a href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>
<li>Linker, accesses the network: <a href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>
<li>Linker, from RSXNTDJ, and unresolved externals: <a href="#Windows%20apps">Windows apps</a>
<li>Linking against optional libraries: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Linking C and C<tt>++</tt> modules: <a href="#ASM%20and%20C">ASM and C</a>
<li>Linking C functions with C<tt>++</tt> programs: <a href="#Still%20unresolved">Still unresolved</a>
<li>Linking C<tt>++</tt> programs, use the GXX driver: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Linking Flex programs: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Linking programs, unresolved library functions: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Linking programs, unresolved library functions, libraries' order: <a href="#Libraries%20order">Libraries order</a>
<li>Linking speed, improve by stub-editing ld.exe: <a href="#Slow%20linker">Slow linker</a>
<li>Linking with Allegro: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Linking with GRX library: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Links, symbolic, simulation with DJGPP: <a href="#Symlinks">Symlinks</a>
<li>Lint clone for DJGPP: <a href="#Packages">Packages</a>
<li>Linux-to-DOS cross-compiling with DJGPP: <a href="#Cross-DJGPP">Cross-DJGPP</a>
<li>List of DJGPP packages: <a href="#What%20to%20download">What to download</a>
<li>Listing, assembly and source code: <a href="#Assembly%20output">Assembly output</a>
<li>Load error--no DPMI: <a href="#No%20DPMI">No DPMI</a>
<li>Load error: no DPMI, on NT: <a href="#No%20DPMI">No DPMI</a>
<li>Loading HIGH, device drivers and TSRs: <a href="#Config">Config</a>
<li>Locking C<tt>++</tt> functions: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Locking DOS memory: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Locking memory for hardware interrupt handlers: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Locking memory for interrupt handlers: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Locking memory, silent failure: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Locking only part of memory: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Long command lines: <a href="#Long%20commands">Long commands</a>
<li>Long command lines, from Makefile: <a href="#Makefiles">Makefiles</a>
<li>Long command lines, maximum length: <a href="#How%20long">How long</a>
<li>Long command lines, problems with RHIDE: <a href="#Makefiles">Makefiles</a>
<li>Long file name, problems on a RAM disk: <a href="#Config">Config</a>
<li>Long file names, destroyed by disk editing: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>Long file names, disabled by DOS Mode: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>long filename support, bugs in DJGPP v2.0: <a href="#LFN">LFN</a>
<li>Long Filenames aren't supported on Windows/NT: <a href="#WindowsNT">WindowsNT</a>
<li>Long filenames in setting DJGPP env. variable: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Loop alignment, effect on program speed: <a href="#Older%20is%20faster">Older is faster</a>
<li>Low-level programming issues: <a href="#Low-level">Low-level</a>
<li>Machines with low extended RAM, tuning CWSDPMI: <a href="#Config">Config</a>
<li>Mailslot API for DJGPP: <a href="#Packages">Packages</a>
<li>Makefile, converting spaces to TABs: <a href="#Missing%20separator">Missing separator</a>
<li>Makefile, first character of every command must be TAB: <a href="#Missing%20separator">Missing separator</a>
<li>Makefile, passing long command lines: <a href="#Makefiles">Makefiles</a>
<li>Makefiles with long command lines: <a href="#Long%20commands">Long commands</a>
<li>MAKESHELL environment variable: <a href="#Makefiles">Makefiles</a>
<li>malloc doesn't change virtual memory: <a href="#Confusing%20alloc">Confusing alloc</a>
<li>malloc fails under EMM386 or HIMEM: <a href="#EMM386%20alloc">EMM386 alloc</a>
<li>malloc fails under QDPMI or Windows: <a href="#QDPMI%20alloc">QDPMI alloc</a>
<li>malloc fails under Windows 3.X: <a href="#Windows%20alloc">Windows alloc</a>
<li>malloc fails under Windows 9X: <a href="#Windows9X%20alloc">Windows9X alloc</a>
<li>malloc function, crashes with SIGSEGV: <a href="#malloc%20crash">malloc crash</a>
<li>malloc in small chunks fails: <a href="#QDPMI%20alloc">QDPMI alloc</a>
<li>malloc, debugging: <a href="#Packages">Packages</a>
<li>malloc, effect on "Fat DS": <a href="#Fat%20DS">Fat DS</a>
<li>Man pages, how to read: <a href="#Man%20pages">Man pages</a>
<li>Mangling C<tt>++</tt> identifiers, GNU style: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li>Mapping memory below 1MB mark: <a href="#Above%201MB">Above 1MB</a>
<li>Math library, default ANSI/ISO and high-quality functions: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>math.h, conflicts with C<tt>++</tt> programs: <a href="#C++%20exceptions">C++ exceptions</a>
<li>Maximum interrupt frequency: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Maximum length of command line: <a href="#How%20long">How long</a>
<li>Memory access, Windows 98 complains: <a href="#Windows%2098">Windows 98</a>
<li>Memory allocation fails under EMM386 or HIMEM: <a href="#EMM386%20alloc">EMM386 alloc</a>
<li>Memory allocation fails under QDPMI or Windows 9X: <a href="#QDPMI%20alloc">QDPMI alloc</a>
<li>Memory allocation fails under Windows 3.X: <a href="#Windows%20alloc">Windows alloc</a>
<li>Memory allocation fails under Windows 9X: <a href="#Windows9X%20alloc">Windows9X alloc</a>
<li>Memory allocation in small chunks fails: <a href="#QDPMI%20alloc">QDPMI alloc</a>
<li>Memory allocations, debugging packages: <a href="#Packages">Packages</a>
<li>Memory at run time: <a href="#Memory">Memory</a>
<li>Memory locking for hardware interrupt handlers: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Memory locking, silent failure: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Memory manager, settings for optimal performance: <a href="#Config">Config</a>
<li>Memory managers, recommended for use with DJGPP: <a href="#Config">Config</a>
<li>Memory setting under Windows 9X: <a href="#Windows9X%20alloc">Windows9X alloc</a>
<li>Memory settings for DOS box on Windows 98: <a href="#Windows%2098">Windows 98</a>
<li>Memory size reported by go32-v2: <a href="#Disk%20space">Disk space</a>
<li>Memory usage by "gcc -Wall": <a href="#GCC%20optimizations">GCC optimizations</a>
<li>Memory, how much is left for spawned programs: <a href="#Swap%20out">Swap out</a>
<li>Memory, virtual, failure to allocate: <a href="#QDPMI%20VM">QDPMI VM</a>
<li>Memory, virtual, free doesn't change: <a href="#Confusing%20alloc">Confusing alloc</a>
<li>Memory, virtual, malloc doesn't change: <a href="#Confusing%20alloc">Confusing alloc</a>
<li>Memory, virtual, maximum available: <a href="#How%20much%20memory">How much memory</a>
<li>Memory, virtual, QDPMI failure: <a href="#QDPMI%20VM">QDPMI VM</a>
<li>memory-allocation bugs, debugging with YAMD: <a href="#malloc%20crash">malloc crash</a>
<li>Memory-mapped devices above 1MB: <a href="#Above%201MB">Above 1MB</a>
<li>Memory-mapped devices, accessing with dedicated selector: <a href="#Xfer">Xfer</a>
<li>Memory-mapped devices, fast access: <a href="#Fat%20DS">Fat DS</a>
<li>Memory-mapped devices, moving data to/from: <a href="#Xfer">Xfer</a>
<li>Mesa programming: <a href="#Packages">Packages</a>
<li>Method name in C<tt>++</tt>, how to pass to GDB: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li>Minimal hardware requirements: <a href="#Minimum">Minimum</a>
<li>Minimum DOS version supported by DJGPP: <a href="#Minimum">Minimum</a>
<li>Minimum system RAM: <a href="#Minimum">Minimum</a>
<li>Minimum system RAM, CWSDPMI: <a href="#Minimum">Minimum</a>
<li>Missing C<tt>++</tt> header files: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>Missing crt0.o: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Missing files from DJGPP, where to download: <a href="#What%20to%20download">What to download</a>
<li>Missing header files: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Missing libraries: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Missing separator, Make error message: <a href="#Missing%20separator">Missing separator</a>
<li>Mixing v2.0 GCC with CC1PLUS from v1.x: <a href="#Unknown%20filetype">Unknown filetype</a>
<li>Mixing v2.x Make with v1.x programs hangs the machine: <a href="#Make%20hangs">Make hangs</a>
<li>MK_FP macro, porting to DJGPP: <a href="#NEAR%20and%20FAR">NEAR and FAR</a>
<li>Mode switches, effect on program speed: <a href="#How%20fast">How fast</a>
<li>Modification time in the future, message from Make: <a href="#Modification%20time">Modification time</a>
<li>Monochrome display and profiling: <a href="#Profiled%20crash">Profiled crash</a>
<li>Monochrome monitor device driver: <a href="#Debug%20graphics">Debug graphics</a>
<li>Monochrome monitor, redirecting screen output: <a href="#Debug%20graphics">Debug graphics</a>
<li>Monochrome monitor, support in RHIDE: <a href="#Debug%20graphics">Debug graphics</a>
<li>More help, how to get: <a href="#Help">Help</a>
<li>Motherboard setup, a cause for GCC crashes: <a href="#Internal%20error">Internal error</a>
<li>Motorola 68K targets, cross-compiling with DJGPP: <a href="#Cross-DJGPP">Cross-DJGPP</a>
<li>Mouse callback crashes with Page Fault in RMCB: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Mouse handler, how to install with DJGPP: <a href="#RMCB">RMCB</a>
<li>Mouse interface, problems with int86: <a href="#int86">int86</a>
<li>Mouse usage crashes RHIDE on DOSEmu: <a href="#DOSEmu">DOSEmu</a>
<li>Mouse, problems in RHIDE on NT: <a href="#WindowsNT">WindowsNT</a>
<li>movedata.h header, compilation problems: <a href="#movedata.h">movedata.h</a>
<li>Moving data to and from conventional memory: <a href="#Xfer">Xfer</a>
<li>Moving data to and from transfer buffer: <a href="#Xfer">Xfer</a>
<li>Moving DJGPP: <a href="#DJGPP%20Fatware">DJGPP Fatware</a>
<li>MS-Windows programming under DJGPP: <a href="#Windows%20apps">Windows apps</a>
<li>multiple-precision library: <a href="#Packages">Packages</a>
<li>Multitasking packages for DJGPP: <a href="#Packages">Packages</a>
<li>NameNumericTail: <a href="#Dual%20DOS%2fWindows">Dual DOS/Windows</a>
<li>near, declaration, porting to DJGPP: <a href="#NEAR%20and%20FAR">NEAR and FAR</a>
<li>Nearptr functions: <a href="#Fat%20DS">Fat DS</a>
<li>nearptr method of direct memory access: <a href="#Xfer">Xfer</a>
<li>Nested DJGPP programs, and DOSEmu: <a href="#DOSEmu">DOSEmu</a>
<li>Nested programs, how much memory is left: <a href="#Swap%20out">Swap out</a>
<li>NetBIOS interface for DJGPP: <a href="#Packages">Packages</a>
<li>Network installation: <a href="#Config">Config</a>
<li>Network installation makes linking slow: <a href="#Slow%20linker">Slow linker</a>
<li>Network interface libraries for DJGPP: <a href="#Packages">Packages</a>
<li>Network, accessed during linking: <a href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>
<li>New features in v2: <a href="#New%20and%20improved">New and improved</a>
<li>no DOS memory, error message: <a href="#WindowsNT">WindowsNT</a>
<li>No DPMI error message: <a href="#No%20DPMI">No DPMI</a>
<li>no DPMI selectors, error message: <a href="#WindowsNT">WindowsNT</a>
<li>no DPMI selectors, on Linux: <a href="#DOSEmu">DOSEmu</a>
<li>No free XMS memory when NOEMS parameter is used: <a href="#Swap%20out">Swap out</a>
<li>No input files, GCC message: <a href="#No%20input%20files">No input files</a>
<li>Not COFF error message from DJGPP programs: <a href="#Unknown%20filetype">Unknown filetype</a>
<li>Novell NDOS, buggy DPMI services crash DJGPP: <a href="#Buggy%20DPMI">Buggy DPMI</a>
<li>Novell, linker or STUBIFY don't produce executable: <a href="#No%20EXE">No EXE</a>
<li>NULL pointer: <a href="#Crash%20dump">Crash dump</a>
<li>Null pointer dereference crashes v2.0 programs: <a href="#v2%20crash">v2 crash</a>
<li>NULL, redefinition in C<tt>++</tt> header files: <a href="#NULL%20redefined">NULL redefined</a>
<li>Numeric tails, created by PKUNZIP v2.50: <a href="#Dual%20DOS%2fWindows">Dual DOS/Windows</a>
<li>Numeric tails, turning off: <a href="#Dual%20DOS%2fWindows">Dual DOS/Windows</a>
<li>Object libraries, creating with RHIDE: <a href="#Libraries">Libraries</a>
<li>Object libraries, how to create/update: <a href="#Libraries">Libraries</a>
<li>Objective C, compiling: <a href="#Objective%20C">Objective C</a>
<li>obstack package: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>ofstream, and binary files: <a href="#File%20data%20corrupted">File data corrupted</a>
<li>OpenGL programming: <a href="#Packages">Packages</a>
<li>Optimal performance, CWSDPMI tuning: <a href="#Config">Config</a>
<li>Optimal performance, disk cache settings: <a href="#Config">Config</a>
<li>Optimal performance, RAM disk settings: <a href="#Config">Config</a>
<li>Optimal performance, system configuration: <a href="#Config">Config</a>
<li>Optimization bugs, in PGCC with -O7 and higher: <a href="#Older%20is%20faster">Older is faster</a>
<li>Optimization crashes GCC: <a href="#GCC%20optimizations">GCC optimizations</a>
<li>Optimization, GCC switches: <a href="#Older%20is%20faster">Older is faster</a>
<li>Optimizing DJGPP programs: <a href="#How%20to%20profile">How to profile</a>
<li>OS/2 supports up to 512MB of DPMI memory: <a href="#More%20than%2064MB">More than 64MB</a>
<li>Overclocking the CPU, compiler crashes: <a href="#Internal%20error">Internal error</a>
<li>Overhead, interrupt reflection to protected mode: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Packages, DJGPP, list of: <a href="#What%20to%20download">What to download</a>
<li>Packages, ported to DJGPP: <a href="#Packages">Packages</a>
<li>Packages, required disk space: <a href="#Disk%20space">Disk space</a>
<li>Packages, which to download: <a href="#What%20to%20download">What to download</a>
<li>Packed structs, C<tt>++</tt> bug: <a href="#Struct%20packing">Struct packing</a>
<li>Packing the structs: <a href="#Struct%20size">Struct size</a>
<li>Page fault error message from CWSDPMI: <a href="#v2%20crash">v2 crash</a>
<li>Page Fault in RMCB message: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Page Fault message: <a href="#Crash%20dump">Crash dump</a>
<li>Page Fault, in GCC on Windows 3.X: <a href="#Internal%20error">Internal error</a>
<li>Paging starts before all RAM is used: <a href="#EMM386%20alloc">EMM386 alloc</a>
<li>Paging, how to disable: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Pascal to C translator: <a href="#Packages">Packages</a>
<li>Patched libc, where to find: <a href="#Latest%20DJGPP">Latest DJGPP</a>
<li>Patches for DJGPP, how to submit: <a href="#Changing">Changing</a>
<li>PATH, non-DJGPP binaries can crash GCC: <a href="#Make%20hangs">Make hangs</a>
<li>Pause key, on OS/2: <a href="#OS2">OS2</a>
<li>Pause key, on Windows/NT: <a href="#WindowsNT">WindowsNT</a>
<li>PCMCIA drivers on ThinkPad, crash DJGPP: <a href="#ThinkPad">ThinkPad</a>
<li>Peek/poke absolute address: <a href="#Xfer">Xfer</a>
<li>Pentium-optimized code: <a href="#Pentium">Pentium</a>
<li>Performance issues: <a href="#Performance">Performance</a>
<li>Peripheral devices above 1MB: <a href="#Above%201MB">Above 1MB</a>
<li>Peripheral devices, fast access: <a href="#Fat%20DS">Fat DS</a>
<li>Peripherals, moving data to/from: <a href="#Xfer">Xfer</a>
<li>PerVMFiles= directive: <a href="#File%20handles">File handles</a>
<li>Physical address mapping, below 1MB mark: <a href="#Above%201MB">Above 1MB</a>
<li>Physical memory, more than 64MB: <a href="#More%20than%2064MB">More than 64MB</a>
<li>Pi, accurate computation: <a href="#Emulator%20accuracy">Emulator accuracy</a>
<li>Pipe errors in shell scripts: <a href="#Bash%20crashes">Bash crashes</a>
<li>Platform SDK, for RSXNTDJ: <a href="#Windows%20apps">Windows apps</a>
<li>Ported programs run much slower: <a href="#Slow-down">Slow-down</a>
<li>Posting problems, not to GNU News groups: <a href="#DJGPP%20is%20not%20GNU">DJGPP is not GNU</a>
<li>Posting to DJGPP mailing list: <a href="#How%20to%20post">How to post</a>
<li>Posting to DJGPP news group, what language: <a href="#Languages">Languages</a>
<li>PostScript documentation: <a href="#Printed%20docs">Printed docs</a>
<li>Pre-processor symbols, DJGPP-specific: <a href="#DJGPP-specific">DJGPP-specific</a>
<li>printf cannot print color text: <a href="#Screen%20IO">Screen IO</a>
<li>Printing DJGPP documentation: <a href="#Printed%20docs">Printed docs</a>
<li>Printing graphics, using GRX: <a href="#What%20to%20download">What to download</a>
<li>Problems with DJGPP programs: <a href="#Trouble">Trouble</a>
<li>Problems, asking for help: <a href="#Totally%20lost">Totally lost</a>
<li>Problems, searching for solution in DJGPP archives: <a href="#Archive%20search">Archive search</a>
<li>Profiled program, garbled profile: <a href="#Garbled%20profile">Garbled profile</a>
<li>Profiled programs crash under debugger: <a href="#Debugging%20woes">Debugging woes</a>
<li>Profiler produces no output: <a href="#No%20profile">No profile</a>
<li>Profiling DJGPP programs: <a href="#How%20to%20profile">How to profile</a>
<li>Profiling issues: <a href="#Profiling">Profiling</a>
<li>Profiling programs that terminate abnormally: <a href="#No%20profile">No profile</a>
<li>Profiling shows 100% of CPU in one function: <a href="#Garbled%20profile">Garbled profile</a>
<li>Profiling, library routines: <a href="#IO%20bound%20programs">IO bound programs</a>
<li>Profiling, problems on Windows/NT: <a href="#WindowsNT">WindowsNT</a>
<li>Profiling, program crashes or runs slowly: <a href="#Profiled%20crash">Profiled crash</a>
<li>Program accessed memory in use, Windows message: <a href="#Windows%2098">Windows 98</a>
<li>Program counter, converting to source lines: <a href="#Crash%20traceback">Crash traceback</a>
<li>Program crashes accessing empty floppy/CD-ROM drives: <a href="#Int%2024h">Int 24h</a>
<li>Program crashes because of Int 24h: <a href="#Int%2024h">Int 24h</a>
<li>Program crashes in int86/intdos: <a href="#int86">int86</a>
<li>Program crashes in v2.0, but not in v1.x: <a href="#v2%20crash">v2 crash</a>
<li>Program crashes while allocating memory: <a href="#QDPMI%20alloc">QDPMI alloc</a>
<li>Programs crash when compiled for profiling: <a href="#Profiled%20crash">Profiled crash</a>
<li>Programs crash with SIGSEGV due to small stack size: <a href="#Stack%20size">Stack size</a>
<li>Programs crash, general troubleshooting: <a href="#General%20trouble">General trouble</a>
<li>Programs crash, saving debugging output: <a href="#Redirect">Redirect</a>
<li>Programs crash, searching DJGPP archives: <a href="#Archive%20search">Archive search</a>
<li>Programs run slowly when compiled with -pg: <a href="#Profiled%20crash">Profiled crash</a>
<li>Programs that exit abnormally, how to profile: <a href="#No%20profile">No profile</a>
<li>Programs using nearptr fail on Windows/NT: <a href="#WindowsNT">WindowsNT</a>
<li>Prompt, printed too late: <a href="#Screen%20IO">Screen IO</a>
<li>Protected mode and converted assembly code: <a href="#ASM%20GPF">ASM GPF</a>
<li>Protected-mode interrupt vector: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Pseudo-random numbers: <a href="#Random%20numbers">Random numbers</a>
<li>Pseudo-register variables, porting to DJGPP: <a href="#Pseudo-registers">Pseudo-registers</a>
<li>Quotes, how to pass them to programs: <a href="#Special%20chars">Special chars</a>
<li>Ralf Brown's Interrupt List: <a href="#DPMI%20Spec">DPMI Spec</a>
<li>RAM disk, influence on compilation speed: <a href="#Slow%20compiler">Slow compiler</a>
<li>RAM disk, recommended settings: <a href="#Config">Config</a>
<li>RAM disk, when compiling large programs: <a href="#Reasonable%20hardware">Reasonable hardware</a>
<li><code>rand</code> and <code>random</code> functions, comparison: <a href="#Random%20numbers">Random numbers</a>
<li>Random numbers from an interval: <a href="#Random%20numbers">Random numbers</a>
<li>Random numbers, how to produce: <a href="#Random%20numbers">Random numbers</a>
<li>RCS port to DJGPP: <a href="#Packages">Packages</a>
<li>Read DJGPP traffic via WWW: <a href="#Unsubscribing">Unsubscribing</a>
<li>Reading an int from a binary file: <a href="#Struct%20size">Struct size</a>
<li>Reading documentation: <a href="#Where%20is%20the%20docs">Where is the docs</a>
<li>Reading documentation with a Web browser: <a href="#No%20Info">No Info</a>
<li>Reading documentation with text editor/viewer: <a href="#No%20Info">No Info</a>
<li>Reading documentation, converting to plain ASCII: <a href="#No%20Info">No Info</a>
<li>Reading structs from disk files: <a href="#Struct%20size">Struct size</a>
<li>Real-mode call-back: <a href="#RMCB">RMCB</a>
<li>Real-mode callbacks written in C<tt>++</tt>: <a href="#RMCB">RMCB</a>
<li>Real-mode functions, how to call: <a href="#Move%20structs">Move structs</a>
<li>Real-mode interrupt vector: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Real-mode services, calling DJGPP functions: <a href="#RMCB">RMCB</a>
<li>realloc, effect on "Fat DS": <a href="#Fat%20DS">Fat DS</a>
<li>Reboot, every DJGPP program: <a href="#Buggy%20DPMI">Buggy DPMI</a>
<li>Reboot, when running DJGPP programs: <a href="#Trouble">Trouble</a>
<li>Rebooting the PC, from a program: <a href="#Reboot%20the%20PC">Reboot the PC</a>
<li>Recommended system RAM, for C programs compilation: <a href="#Minimum">Minimum</a>
<li>Recommended system RAM, for C<tt>++</tt> programs compilation: <a href="#Minimum">Minimum</a>
<li>Recompiling GCC: <a href="#Changing">Changing</a>
<li>Redefinition of class exception, compiler message: <a href="#C++%20exceptions">C++ exceptions</a>
<li>Redefinition of NULL in C<tt>++</tt> headers: <a href="#NULL%20redefined">NULL redefined</a>
<li>Redirecting GCC messages to a file: <a href="#Redirect">Redirect</a>
<li>Redirection in Makefile, effect on long command lines: <a href="#Makefiles">Makefiles</a>
<li>Redirection, and Caldera's DR-DOS: <a href="#Minimum">Minimum</a>
<li>regex package from GNU: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Regex.h, GCC can't find: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>Register-opcode mismatch, while building Allegro: <a href="#Allegro%20and%20GRX">Allegro and GRX</a>
<li>Registers, which ones to preserve in assembly code: <a href="#ASM%20and%20C">ASM and C</a>
<li>Registry, changing from a file: <a href="#Dual%20DOS%2fWindows">Dual DOS/Windows</a>
<li>Release schedule, how to influence: <a href="#Slow%20development">Slow development</a>
<li>Removing a package: <a href="#Uninstall">Uninstall</a>
<li>removing parts of startup code: <a href="#Large%20executable">Large executable</a>
<li>Required hardware, general: <a href="#Requirements">Requirements</a>
<li>Resource compiler, doesn't work in RSXNTDJ: <a href="#Windows%20apps">Windows apps</a>
<li>Response file, passing long command lines: <a href="#Long%20commands">Long commands</a>
<li>Return value of <code>main</code> in C<tt>++</tt> programs: <a href="#void%20main">void main</a>
<li>Run-time environment in v2.x: <a href="#Environment">Environment</a>
<li>Run-time performance: <a href="#Performance">Performance</a>
<li>Run-time problems: <a href="#Running">Running</a>
<li>Runtime speed, slower in v2.x: <a href="#Older%20is%20faster">Older is faster</a>
<li>sbrk algorithm and QDPMI: <a href="#QDPMI%20VM">QDPMI VM</a>
<li>sbrk, effect on "Fat DS": <a href="#Fat%20DS">Fat DS</a>
<li>sbrk, Unix-like algorithm is incompatible with HW interrupts: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Screen contents not restored under Windows: <a href="#Graphics%20and%20Windows">Graphics and Windows</a>
<li>Screen I/O: <a href="#Screen%20IO">Screen IO</a>
<li>Script for building GCC as Linux-to-DOS cross-compiler: <a href="#Cross-DJGPP">Cross-DJGPP</a>
<li>Scripting engine for DJGPP: <a href="#Packages">Packages</a>
<li>SDK, for RSXNTDJ: <a href="#Windows%20apps">Windows apps</a>
<li>Searching DJGPP archives: <a href="#Archive%20search">Archive search</a>
<li>Seed for random numbers: <a href="#Random%20numbers">Random numbers</a>
<li>Segment and offset of a buffer: <a href="#NEAR%20and%20FAR">NEAR and FAR</a>
<li>segread function, how to port to DJGPP: <a href="#Pointer%20segment">Pointer segment</a>
<li>Serial ports, on NT: <a href="#WindowsNT">WindowsNT</a>
<li>Setting up DJGPP with EMM386: <a href="#Config">Config</a>
<li>setvbuf, effect on I/O speed: <a href="#IO%20speed">IO speed</a>
<li>Shell scripts, failures and crashes: <a href="#Bash%20crashes">Bash crashes</a>
<li>SHELL= variable in Makefile, effect on long command lines: <a href="#Makefiles">Makefiles</a>
<li>SIGINT, and OS/2: <a href="#OS2">OS2</a>
<li>Signals in debugged programs: <a href="#Debugging%20woes">Debugging woes</a>
<li>Signals, problems on Windows/NT: <a href="#WindowsNT">WindowsNT</a>
<li>SIGSEGV, in GCC on Windows 3.X: <a href="#Internal%20error">Internal error</a>
<li>SIGSEGV, in malloc/calloc/free functions: <a href="#malloc%20crash">malloc crash</a>
<li>SimTel mirrors' list: <a href="#SimTel">SimTel</a>
<li>Single-stepping doesn't work in GDB on Windows 3.X: <a href="#Debugging%20woes">Debugging woes</a>
<li>Single-stepping doesn't work in RHIDE on Windows 3.X: <a href="#Debugging%20woes">Debugging woes</a>
<li>Size of a struct under DJGPP: <a href="#Struct%20size">Struct size</a>
<li>sizeof, result when called on a structure: <a href="#Struct%20size">Struct size</a>
<li>sleeping, for short periods of time: <a href="#usleep">usleep</a>
<li>Slow code, due to bad alignment by GAS: <a href="#Pentium">Pentium</a>
<li>Slow compilation: <a href="#Slow%20compiler">Slow compiler</a>
<li>Slow compilation, tuning CWSDPMI: <a href="#Config">Config</a>
<li>Slow linking, possible reasons: <a href="#Slow%20linker">Slow linker</a>
<li>Slow program, due to DOS/BIOS calls: <a href="#Slow-down">Slow-down</a>
<li>Slow program, due to FP emulation: <a href="#Slow-down">Slow-down</a>
<li>Slow program, due to library inefficiency: <a href="#Slow-down">Slow-down</a>
<li>Slow program, due to paging: <a href="#Slow-down">Slow-down</a>
<li>Slow-down, programs ported from other compilers: <a href="#Slow-down">Slow-down</a>
<li>Slow-down, when resident software uses XMS: <a href="#Slow-down">Slow-down</a>
<li>socket.h, where to find: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li>Software interrupts, need zero SS, SP and FLAGS: <a href="#Zero%20SP">Zero SP</a>
<li>Solved problems, searching in DJGPP archives: <a href="#Archive%20search">Archive search</a>
<li>Sound Blaster code for DJGPP: <a href="#Packages">Packages</a>
<li>Source file in the wrong directory, RHIDE: <a href="#RHIDE">RHIDE</a>
<li>Source files, GCC cannot find: <a href="#No%20input%20files">No input files</a>
<li>Source files, using as the best docs: <a href="#Last%20resort">Last resort</a>
<li>Source language is not recognized by GDB in C<tt>++</tt> programs: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li>Source line from the EIP, using GDB: <a href="#Crash%20traceback">Crash traceback</a>
<li>Spawned programs, how much memory is left: <a href="#Swap%20out">Swap out</a>
<li>Spawning child processes, OS/2: <a href="#OS2">OS2</a>
<li>Spawning child programs on Windows/NT and 9X: <a href="#WindowsNT">WindowsNT</a>
<li>Spawning programs, effect of environment size: <a href="#How%20long">How long</a>
<li>Spawning v2 programs from v1.x programs: <a href="#go32-v2">go32-v2</a>
<li>Spawning v2.x programs from v1.x programs doesn't work: <a href="#Make%20hangs">Make hangs</a>
<li>Speed of array-based programs: <a href="#Older%20is%20faster">Older is faster</a>
<li>Speed of code, recommended GCC switches: <a href="#Older%20is%20faster">Older is faster</a>
<li>Speed of compilation: <a href="#Slow%20compiler">Slow compiler</a>
<li>sqrt, problems under FP emulator: <a href="#Emulator%20accuracy">Emulator accuracy</a>
<li>stabs debug format, not supported by some utilities: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li>stabs debugging format, how to compile: <a href="#How%20to%20debug">How to debug</a>
<li>Stack alignment: <a href="#Older%20is%20faster">Older is faster</a>
<li>Stack dump, how to read: <a href="#Crash%20traceback">Crash traceback</a>
<li>Stack Fault message: <a href="#Crash%20dump">Crash dump</a>
<li>Stack limits, in crash dump: <a href="#Crash%20dump">Crash dump</a>
<li>Stack overflow under debugger: <a href="#Stack%20size">Stack size</a>
<li>Stack size under DJGPP: <a href="#Stack%20size">Stack size</a>
<li>Stack size, in RSXNTDJ programs: <a href="#Windows%20apps">Windows apps</a>
<li>Stack size, insufficient, causes programs to crash: <a href="#Stack%20size">Stack size</a>
<li>Stack size, under a debugger: <a href="#Stack%20size">Stack size</a>
<li>Stack, misalignment causes slow-down: <a href="#Older%20is%20faster">Older is faster</a>
<li>Stand-alone DJGPP programs that don't need DPMI: <a href="#Distributing">Distributing</a>
<li>Standard output/error stream, redirecting to a file: <a href="#Redirect">Redirect</a>
<li>startup code, removing parts of it: <a href="#Large%20executable">Large executable</a>
<li>Static array enlarges C<tt>++</tt> executable: <a href="#Large%20image">Large image</a>
<li>Static uninitialized variables, failure debugging: <a href="#Static%20vars">Static vars</a>
<li>stdiostream.h, GCC can't find: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>STL library, not in lgp271b distribution: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>STL, documentation: <a href="#Cannot%20find%20docs">Cannot find docs</a>
<li>streambuf.h, GCC can't find: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>String class, cannot be compiled: <a href="#Still%20unresolved">Still unresolved</a>
<li>String.h, GCC can't find: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li>Struct declaration, for real-mode services: <a href="#Move%20structs">Move structs</a>
<li>struct reading from a disk file: <a href="#Struct%20size">Struct size</a>
<li>Struct, size in bytes under DJGPP: <a href="#Struct%20size">Struct size</a>
<li>Structure packing, C<tt>++</tt> bug: <a href="#Struct%20packing">Struct packing</a>
<li>Structure padding: <a href="#Struct%20size">Struct size</a>
<li>Subscription to DJGPP mailing list: <a href="#Subscribing">Subscribing</a>
<li>Subsidiary programs, how much memory is left: <a href="#Swap%20out">Swap out</a>
<li>SVGA types supported by GRX: <a href="#GRX%20driver">GRX driver</a>
<li>Symbolic links, simulation with DJGPP: <a href="#Symlinks">Symlinks</a>
<li>SYMIFY output points to a closing brace of a function: <a href="#Crash%20dump">Crash dump</a>
<li>sys/movedata.h header, compilation errors: <a href="#movedata.h">movedata.h</a>
<li>System configuration, the best: <a href="#Optimal%20hardware">Optimal hardware</a>
<li><code>system</code> function doesn't call COMMAND.COM: <a href="#Long%20commands">Long commands</a>
<li>System hardware diagnostics: <a href="#Packages">Packages</a>
<li>System RAM, minimum: <a href="#Minimum">Minimum</a>
<li>Systems programming issues: <a href="#Low-level">Low-level</a>
<li>TAB, must be the first character of every command: <a href="#Missing%20separator">Missing separator</a>
<li>TABs replaced with spaces by a text editor: <a href="#Missing%20separator">Missing separator</a>
<li>Taking DJGPP with you: <a href="#DJGPP%20Fatware">DJGPP Fatware</a>
<li>TCP/IP libraries for DJGPP: <a href="#Packages">Packages</a>
<li>Terminology in DJGPP: <a href="#Lexicon">Lexicon</a>
<li>Text-mode video memory access: <a href="#Direct%20access">Direct access</a>
<li>ThinkPad, DJGPP programs crash: <a href="#ThinkPad">ThinkPad</a>
<li>Timer interrupts code for DJGPP: <a href="#Packages">Packages</a>
<li>TMPDIR variable, when running DJGPP from a CD: <a href="#Urgent">Urgent</a>
<li>Traceback points to a closing brace of a function: <a href="#Crash%20dump">Crash dump</a>
<li>Traceback, how to read: <a href="#Crash%20traceback">Crash traceback</a>
<li>Traceback, number of levels: <a href="#Crash%20dump">Crash dump</a>
<li>Tracing compilation progress with -Q: <a href="#GCC%20optimizations">GCC optimizations</a>
<li>Tracing into functions in <code>#include</code>d files: <a href="#Included%20source">Included source</a>
<li>Transfer buffer, maximum possible size: <a href="#IO%20speed">IO speed</a>
<li>Transfer buffer, moving data: <a href="#Xfer">Xfer</a>
<li>Transfer buffer, using to call DOS/BIOS: <a href="#Pointer%20segment">Pointer segment</a>
<li>Transfer buffer, what it is: <a href="#IO%20speed">IO speed</a>
<li>Translation from/to foreign languages: <a href="#Languages">Languages</a>
<li>Truncation of files when using fstream: <a href="#File%20data%20corrupted">File data corrupted</a>
<li>Tuning CWSDPMI for optimal performance: <a href="#Config">Config</a>
<li>Turbo Vision, DJGPP port: <a href="#Packages">Packages</a>
<li>Tutorials on AT&amp;T syntax and NASM: <a href="#Syntax">Syntax</a>
<li>TZ database updates, where to get: <a href="#Zoneinfo">Zoneinfo</a>
<li>TZ variable, how to set: <a href="#Zoneinfo">Zoneinfo</a>
<li>Undefined reference to _streamv: <a href="#Still%20unresolved">Still unresolved</a>
<li>Undefined references to __EH_FRAME_BEGIN__: <a href="#C++%20exceptions">C++ exceptions</a>
<li>Undefined references, and the RSXNTDJ linker: <a href="#Windows%20apps">Windows apps</a>
<li>Undefined references, in a DXE: <a href="#DXE">DXE</a>
<li>Undefined references, when linking Flex programs: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Undefined references, with stdio functions and RSXNTDJ: <a href="#Windows%20apps">Windows apps</a>
<li>Uninitialized memory crashes v2.0 programs: <a href="#v2%20crash">v2 crash</a>
<li>Uninstalling a package: <a href="#Uninstall">Uninstall</a>
<li>Unix-like sbrk algorithm considered harmful for HW interrupts: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li>Unix-to-DOS cross-compiling with DJGPP: <a href="#Cross-DJGPP">Cross-DJGPP</a>
<li>Unknown filetype, GCC message: <a href="#Unknown%20filetype">Unknown filetype</a>
<li>Unresolved externals: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Unresolved externals in C<tt>++</tt> programs, use GXX: <a href="#Unresolved%20externals">Unresolved externals</a>
<li>Unresolved externals, djgpp_first_ctor: <a href="#djgpp_first_ctor">djgpp_first_ctor</a>
<li>Unsubscribing from the DJGPP mailing list: <a href="#Unsubscribing">Unsubscribing</a>
<li>Unsupported DOS request message: <a href="#int86">int86</a>
<li>Unsupported INT message: <a href="#int86">int86</a>
<li>Unzipping and running g++.exe produces an error message: <a href="#g++.exe">g++.exe</a>
<li>Unzipping DJGPP with Aladdin Expander: <a href="#Urgent">Urgent</a>
<li>Unzipping DJGPP with WinZip: <a href="#Urgent">Urgent</a>
<li>Uploading DJGPP software: <a href="#Upload">Upload</a>
<li>v2 code slower than v1.x: <a href="#Older%20is%20faster">Older is faster</a>
<li>V2, new features and bug fixes: <a href="#New%20versions">New versions</a>
<li>v2.0, program crashes: <a href="#v2%20crash">v2 crash</a>
<li>v2.01 code slower than v2.0: <a href="#Older%20is%20faster">Older is faster</a>
<li>V2.x, new environment: <a href="#Environment">Environment</a>
<li>VBE 2.0 linear frame buffer access: <a href="#Direct%20access">Direct access</a>
<li>VBE services, struct declaration: <a href="#Move%20structs">Move structs</a>
<li>VBE/AF driver for DJGPP: <a href="#Packages">Packages</a>
<li>VDM Redirector already loaded, Windows/NT message: <a href="#WindowsNT">WindowsNT</a>
<li>VDS, not supported by CWSDPMI (yet): <a href="#DMA">DMA</a>
<li>VDS, not supported by Windows/NT: <a href="#DMA">DMA</a>
<li>VESA not available, Allegro message: <a href="#WindowsNT">WindowsNT</a>
<li>VESA support by GRX: <a href="#GRX%20driver">GRX driver</a>
<li>VFAT32 support under DOSEmu: <a href="#DOSEmu">DOSEmu</a>
<li>VGA Mode-X graphics for DJGPP: <a href="#Packages">Packages</a>
<li>Video memory, direct access: <a href="#Direct%20access">Direct access</a>
<li>Virtual memory: <a href="#Memory">Memory</a>
<li>Virtual memory exhausted, during compilation: <a href="#GCC%20optimizations">GCC optimizations</a>
<li>Virtual memory under Windows 9X: <a href="#Windows9X%20alloc">Windows9X alloc</a>
<li>Virtual memory, bugs in CWSDPMI r4: <a href="#More%20than%2064MB">More than 64MB</a>
<li>Virtual memory, disabling with startup flags: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li>Virtual memory, failure to allocate: <a href="#QDPMI%20VM">QDPMI VM</a>
<li>Virtual memory, free doesn't change: <a href="#Confusing%20alloc">Confusing alloc</a>
<li>Virtual memory, how to disable it for CWSDPMI: <a href="#Slow%20compiler">Slow compiler</a>
<li>Virtual memory, malloc doesn't change: <a href="#Confusing%20alloc">Confusing alloc</a>
<li>Virtual memory, maximum available: <a href="#How%20much%20memory">How much memory</a>
<li>Virtual memory, QDPMI failure: <a href="#QDPMI%20VM">QDPMI VM</a>
<li>Virus infection cause "Not COFF" message: <a href="#Unknown%20filetype">Unknown filetype</a>
<li>Virus infection in DJGPP programs: <a href="#Virus">Virus</a>
<li>void main, in a C/C++ program: <a href="#void%20main">void main</a>
<li>Watchpoints don't work in GDB under Windows: <a href="#Debugging%20woes">Debugging woes</a>
<li>Web site for DJGPP: <a href="#WWW">WWW</a>
<li>Weekly digest, problems in receiving: <a href="#Subscribing">Subscribing</a>
<li>Whitespace in wildcards: <a href="#Special%20chars">Special chars</a>
<li>Wildcards expansion: <a href="#Filename%20globbing">Filename globbing</a>
<li>Wildcards expansion, disabling: <a href="#Disable%20globbing">Disable globbing</a>
<li>Wildcards, and letter-case in file names: <a href="#Filename%20globbing">Filename globbing</a>
<li>Wildcards, and whitespace in file names: <a href="#Special%20chars">Special chars</a>
<li>Win32 API docs, where to find: <a href="#Windows%20apps">Windows apps</a>
<li>Win32 programming with GCC: <a href="#Windows%20apps">Windows apps</a>
<li>Win32 programming, recommended books: <a href="#Windows%20apps">Windows apps</a>
<li>Windows 9X/NT programming with Cygnus GCC port: <a href="#Windows%20apps">Windows apps</a>
<li>Windows applications with DJGPP: <a href="#Windows%20apps">Windows apps</a>
<li>Winsock interface for DJGPP: <a href="#Packages">Packages</a>
<li>WWW services for DJGPP: <a href="#WWW">WWW</a>
<li>WWW, downloading DJGPP: <a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>
<li>X emulation for DJGPP: <a href="#Packages">Packages</a>
<li>X-Mode package: <a href="#Packages">Packages</a>
<li>Zip drive, accessed by the linker: <a href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>
<li>Zoneinfo directory: <a href="#Zoneinfo">Zoneinfo</a>
</ul>
<p><hr>
Node:&nbsp;<a name="Program%20Index">Program Index</a>,
Previous:&nbsp;<a rel=previous href="#Topic%20Index">Topic Index</a>,
Up:&nbsp;<a rel=up href="#Top">Top</a>
<br>

<h1>25 Program Index</h1>

<p>This index lists the problems and solutions by the program/package to
which they pertain.  If you know what program or package gives you the
trouble, look it up here.

<ul compact>
<li><code>386Max, how to ensure virtual memory</code>: <a href="#QDPMI%20VM">QDPMI VM</a>
<li><code>386Max, speeding up DJGPP start-up</code>: <a href="#QDPMI%20VM">QDPMI VM</a>
<li><code>4DOS, redirecting GCC messages to a file</code>: <a href="#Redirect">Redirect</a>
<li><code>Aladdin Expander, unzipping DJGPP</code>: <a href="#Urgent">Urgent</a>
<li><code>Allegro, a graphics and gaming package</code>: <a href="#What%20to%20download">What to download</a>
<li><code>Allegro, compilation speed</code>: <a href="#Slow%20compiler">Slow compiler</a>
<li><code>Allegro, compiling on DOSEmu</code>: <a href="#DOSEmu">DOSEmu</a>
<li><code>Allegro, linker switch</code>: <a href="#Unresolved%20externals">Unresolved externals</a>
<li><code>Allegro, problems on Windows/NT</code>: <a href="#WindowsNT">WindowsNT</a>
<li><code>ATT2INTL, a converter from AT&amp;T to Intel assembly</code>: <a href="#Converting%20ASM">Converting ASM</a>
<li><code>Bash crashes</code>: <a href="#Bash%20crashes">Bash crashes</a>
<li><code>Bash hangs on Windows 9X</code>: <a href="#Programs%20hang">Programs hang</a>
<li><code>BatchFTP, automated downloading from a Unix box</code>: <a href="#DJGPP%20Fatware">DJGPP Fatware</a>
<li><code>BCC2GRX, porting Borland graphics</code>: <a href="#What%20to%20download">What to download</a>
<li><code>BCCBGI (from BCC2GRX) crashes with the default stack</code>: <a href="#Stack%20size">Stack size</a>
<li><code>BCSERIO, async communications package for DJGPP</code>: <a href="#Packages">Packages</a>
<li><code>Binutils configured for ELF32</code>: <a href="#ELF%20vs%20COFF">ELF vs COFF</a>
<li><code>Binutils, incompatibilities with DJP</code>: <a href="#Large%20executable">Large executable</a>
<li><code>Bison doesn't imply GPL/LGPL</code>: <a href="#Application%20distribution">Application distribution</a>
<li><code>Bison, debugging generated code</code>: <a href="#Included%20source">Included source</a>
<li><code>Boot loader for an operating system</code>: <a href="#Packages">Packages</a>
<li><code>byacc, a DJGPP port</code>: <a href="#Packages">Packages</a>
<li><code>bzip2, a DJGPP port</code>: <a href="#Packages">Packages</a>
<li><code>Caldera's DR-DOS, and redirection</code>: <a href="#Minimum">Minimum</a>
<li><code>Caldera's DR-DOS, and RHIDE</code>: <a href="#Minimum">Minimum</a>
<li><code>Cawf, using to read man pages</code>: <a href="#Man%20pages">Man pages</a>
<li><code>CC1PLUS crashes with SIGSEGV</code>: <a href="#Stack%20size">Stack size</a>
<li><code>Cdecl, ported to DJGPP</code>: <a href="#Packages">Packages</a>
<li><code>CHCP DOS command might prevent MSHELL from working</code>: <a href="#Debug%20graphics">Debug graphics</a>
<li><code>collect2, accesses the network</code>: <a href="#Linker%20accesses%20other%20drives">Linker accesses other drives</a>
<li><code>collect2</code>, slow operation on Windows 9X<code></code>: <a href="#Slow%20linker">Slow linker</a>
<li><code>CPP, compiling, memory requirements</code>: <a href="#Reasonable%20hardware">Reasonable hardware</a>
<li><code>CPP, compiling, RAM disk</code>: <a href="#Config">Config</a>
<li><code>CWSDPMI allows ``Fat DS''</code>: <a href="#Fat%20DS">Fat DS</a>
<li><code>CWSDPMI crashes programs allocating memory is small chunks</code>: <a href="#QDPMI%20alloc">QDPMI alloc</a>
<li><code>CWSDPMI crashes programs which dereference NULL pointers</code>: <a href="#v2%20crash">v2 crash</a>
<li><code>CWSDPMI doesn't support hooking Int 24h</code>: <a href="#Int%2024h">Int 24h</a>
<li><code>CWSDPMI r4, bugs with lots of virtual memory</code>: <a href="#More%20than%2064MB">More than 64MB</a>
<li><code>CWSDPMI runs out of virtual memory</code>: <a href="#Internal%20error">Internal error</a>
<li><code>CWSDPMI, alternative DPMI hosts</code>: <a href="#Environment">Environment</a>
<li><code>CWSDPMI, disabling virtual memory</code>: <a href="#Slow%20compiler">Slow compiler</a>
<li><code>CWSDPMI, legal restrictions</code>: <a href="#DJGPP%20redistribution">DJGPP redistribution</a>
<li><code>CWSDPMI, maximum available virtual memory</code>: <a href="#How%20much%20memory">How much memory</a>
<li><code>CWSDPMI, memory usage for nested programs</code>: <a href="#Swap%20out">Swap out</a>
<li><code>CWSDPMI, minimum required system RAM</code>: <a href="#Minimum">Minimum</a>
<li><code>CWSDPMI, pages too early under EMM386</code>: <a href="#EMM386%20alloc">EMM386 alloc</a>
<li><code>CWSDPMI, setting parameters for optimal performance</code>: <a href="#Config">Config</a>
<li><code>CWSDPMI, should be distributed with DJGPP programs</code>: <a href="#Distributing">Distributing</a>
<li><code>CWSDPR0 reduces interrupt reflection overhead</code>: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li><code>CWSDPR0, use for testing HW interrupt handlers</code>: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li><code>CWSPARAM, a program to tune CWSDPMI performance</code>: <a href="#Config">Config</a>
<li><code>cxxfilt.exe, duplicate versions</code>: <a href="#g++.exe">g++.exe</a>
<li><code>DISPLAY.SYS and EMM386, conflict with Info</code>: <a href="#Info%20crashes">Info crashes</a>
<li><code>DJGPP.ENV, linker environment variables</code>: <a href="#Libraries%20order">Libraries order</a>
<li><code>DJP compressor supports DLM</code>: <a href="#Large%20executable">Large executable</a>
<li><code>DJP, an executable compressor for DJGPP</code>: <a href="#Large%20executable">Large executable</a>
<li><code>DJP, incompatibilities with Binutils</code>: <a href="#Large%20executable">Large executable</a>
<li><code>DLM compression, with DJP</code>: <a href="#Large%20executable">Large executable</a>
<li><code>DLM, a facility to load code at run time</code>: <a href="#Packages">Packages</a>
<li><code>DOSEMU doesn't allow ``Fat DS''</code>: <a href="#Fat%20DS">Fat DS</a>
<li><code>DOSEmu, and recursive Make invocation</code>: <a href="#DOSEmu">DOSEmu</a>
<li><code>DOSEmu, leaks DPMI selectors</code>: <a href="#DOSEmu">DOSEmu</a>
<li><code>DOSEmu, problems with FAT32 volumes</code>: <a href="#DOSEmu">DOSEmu</a>
<li><code>DOSEmu, RHIDE conflicts with mouse support</code>: <a href="#DOSEmu">DOSEmu</a>
<li><code>DR-DOS, Ctrl-BREAK crashes</code>: <a href="#Minimum">Minimum</a>
<li><code>DR-DOS, problems with linear frame buffer</code>: <a href="#Minimum">Minimum</a>
<li><code>DXEGEN, undefined references</code>: <a href="#DXE">DXE</a>
<li><code>EDEBUG32 can debug a DXE</code>: <a href="#How%20to%20debug">How to debug</a>
<li><code>Emacs hangs on Windows 9X</code>: <a href="#Programs%20hang">Programs hang</a>
<li><code>Emacs, reading docs</code>: <a href="#Where%20is%20the%20docs">Where is the docs</a>
<li><code>Emacs, reading Info files</code>: <a href="#Where%20is%20the%20docs">Where is the docs</a>
<li><code>Emacs, using to read man pages</code>: <a href="#Man%20pages">Man pages</a>
<li><code>EMM386 and DISPLAY.SYS, conflict with Info</code>: <a href="#Info%20crashes">Info crashes</a>
<li><code>EMM386, cannot use all free memory</code>: <a href="#EMM386%20alloc">EMM386 alloc</a>
<li><code>EMM386, conflicts with dual-monitor systems</code>: <a href="#Debug%20graphics">Debug graphics</a>
<li><code>EMM386, effect on max interrupt frequency</code>: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li><code>EMM386, getting the most memory</code>: <a href="#Config">Config</a>
<li><code>EMM386, how to get more than 32MB of memory</code>: <a href="#More%20than%2064MB">More than 64MB</a>
<li><code>EMM386, malloc/calloc fails</code>: <a href="#EMM386%20alloc">EMM386 alloc</a>
<li><code>EMM386, settings for optimal performance</code>: <a href="#Config">Config</a>
<li><code>emTeX, printing the docs</code>: <a href="#Printed%20docs">Printed docs</a>
<li><code>emu387.dxe, distribution with DJGPP programs</code>: <a href="#Emulation">Emulation</a>
<li><code>F2C, debugging generated code</code>: <a href="#Included%20source">Included source</a>
<li><code>FIND.EXE, incompatible with GNU Find</code>: <a href="#What%20to%20download">What to download</a>
<li><code>Flex doesn't imply GPL/LGPL</code>: <a href="#Application%20distribution">Application distribution</a>
<li><code>Flex, debugging generated code</code>: <a href="#Included%20source">Included source</a>
<li><code>Flex, undefined references</code>: <a href="#Unresolved%20externals">Unresolved externals</a>
<li><code>FORTIFY, a malloc debugger</code>: <a href="#Packages">Packages</a>
<li><code>FreeBE/AF, 2D accelerator</code>: <a href="#Packages">Packages</a>
<li><code>FSDB, the full-screen debugger</code>: <a href="#How%20to%20debug">How to debug</a>
<li><code>g++ compilation driver, alternative names on DOS</code>: <a href="#Libraries%20order">Libraries order</a>
<li><code>g++.exe, unzip complains on DOS</code>: <a href="#g++.exe">g++.exe</a>
<li><code>Gas, accepts Intel assembly syntax</code>: <a href="#Syntax">Syntax</a>
<li><code>GCC 2.95, slower compilation than old GCC versions</code>: <a href="#Slow%20compiler">Slow compiler</a>
<li><code>GCC aborts or crashes during compilation</code>: <a href="#Internal%20error">Internal error</a>
<li><code>GCC can't find C<tt>++</tt> headers</code>: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li><code>GCC can't find crt0.o</code>: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li><code>GCC can't find headers</code>: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li><code>GCC can't find libraries</code>: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li><code>GCC cannot resolve djgpp_first_ctor symbol when linking</code>: <a href="#djgpp_first_ctor">djgpp_first_ctor</a>
<li><code>GCC crashes due to CPU overclocking</code>: <a href="#Internal%20error">Internal error</a>
<li><code>GCC crashes due to incorrect CMOS setup</code>: <a href="#Internal%20error">Internal error</a>
<li><code>GCC crashes during optimization</code>: <a href="#GCC%20optimizations">GCC optimizations</a>
<li><code>GCC crashes with Page Fault on Windows 3.X</code>: <a href="#Internal%20error">Internal error</a>
<li><code>GCC crashes, which subprogram of</code>: <a href="#General%20trouble">General trouble</a>
<li><code>GCC doesn't pack structs in C<tt>++</tt> programs</code>: <a href="#Struct%20packing">Struct packing</a>
<li><code>GCC doesn't recognize .lib libraries</code>: <a href="#OBJ%20and%20LIB">OBJ and LIB</a>
<li><code>GCC doesn't recognize .obj object files</code>: <a href="#OBJ%20and%20LIB">OBJ and LIB</a>
<li><code>GCC doesn't recognize file format</code>: <a href="#Which%20language">Which language</a>
<li><code>GCC exhausts virtual memory</code>: <a href="#GCC%20optimizations">GCC optimizations</a>
<li><code>GCC from v2.x crashes under v1.x Make</code>: <a href="#Make%20hangs">Make hangs</a>
<li><code>GCC hangs under Make</code>: <a href="#Make%20hangs">Make hangs</a>
<li><code>GCC says ``garbage at end of number''</code>: <a href="#0xfe+0x20">0xfe+0x20</a>
<li><code>GCC won't compile C<tt>++</tt>-style comments in C programs</code>: <a href="#C++%20comments">C++ comments</a>
<li><code>GCC won't find inline functions without -O</code>: <a href="#Still%20unresolved">Still unresolved</a>
<li><code>GCC, -fconserve-space switch</code>: <a href="#Large%20image">Large image</a>
<li><code>GCC, <code>-v</code> switch shows the compilation passes</code>: <a href="#Which%20language">Which language</a>
<li><code>GCC, assumes C<tt>++</tt> source is <code>.cc</code></code>: <a href="#GDB%20and%20C++%20source">GDB and C++ source</a>
<li><code>GCC, code efficiency</code>: <a href="#How%20fast">How fast</a>
<li><code>GCC, compiling for debugging</code>: <a href="#How%20to%20debug">How to debug</a>
<li><code>GCC, compiling, memory requirements</code>: <a href="#Reasonable%20hardware">Reasonable hardware</a>
<li><code>GCC, compiling, RAM disk</code>: <a href="#Config">Config</a>
<li><code>GCC, environment variables</code>: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li><code>GCC, file source language recognition</code>: <a href="#Which%20language">Which language</a>
<li><code>GCC, I/O speed</code>: <a href="#IO%20speed">IO speed</a>
<li><code>GCC, inline assembly facilities</code>: <a href="#Inline%20Asm">Inline Asm</a>
<li><code>GCC, maximum length of command line in Makefiles</code>: <a href="#How%20long">How long</a>
<li><code>GCC, passing long command lines via Makefile</code>: <a href="#Makefiles">Makefiles</a>
<li><code>GCC, recompiling</code>: <a href="#Changing">Changing</a>
<li><code>GCC, redirecting messages to a file</code>: <a href="#Redirect">Redirect</a>
<li><code>GCC, slow compilation</code>: <a href="#Slow%20compiler">Slow compiler</a>
<li><code>GCC, uses lots of memory with -Wall</code>: <a href="#GCC%20optimizations">GCC optimizations</a>
<li><code>GDB causes stack overflow in a debuggee</code>: <a href="#Stack%20size">Stack size</a>
<li><code>GDB doesn't pass command-line arguments to debuggee</code>: <a href="#How%20to%20debug">How to debug</a>
<li><code>GDB doesn't recognize source language</code>: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li><code>GDB fails to set or display static variables</code>: <a href="#Static%20vars">Static vars</a>
<li><code>GDB GP Faults on breakpoint/watchpoint under Windows</code>: <a href="#Debugging%20woes">Debugging woes</a>
<li><code>GDB, conflicts with file redirection</code>: <a href="#How%20to%20debug">How to debug</a>
<li><code>GDB, debugging DJGPP programs</code>: <a href="#How%20to%20debug">How to debug</a>
<li><code>GDB, debugging graphics programs</code>: <a href="#Debug%20graphics">Debug graphics</a>
<li><code>GDB, how is it different on MS-DOS</code>: <a href="#How%20to%20debug">How to debug</a>
<li><code>GDB, how to use C<tt>++</tt> class variables' names</code>: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li><code>GDB, how to use C<tt>++</tt> method names</code>: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li><code>GDB, init file name</code>: <a href="#How%20to%20debug">How to debug</a>
<li><code>GDB, name of the READLINE init file</code>: <a href="#How%20to%20debug">How to debug</a>
<li><code>GDB, slow loading of symbols and sources</code>: <a href="#How%20to%20debug">How to debug</a>
<li><code>GLUT for DJGPP</code>: <a href="#OpenGL">OpenGL</a>
<li><code>GMP library</code>: <a href="#Packages">Packages</a>
<li><code>go32-v2 reports the amount of memory and swap space</code>: <a href="#Disk%20space">Disk space</a>
<li><code>go32-v2 usage</code>: <a href="#go32-v2">go32-v2</a>
<li><code>go32-v2, use to find out how much memory is available to DJGPP</code>: <a href="#EMM386%20alloc">EMM386 alloc</a>
<li><code>Gprof produces garbled profile</code>: <a href="#Garbled%20profile">Garbled profile</a>
<li><code>gprof produces no output</code>: <a href="#No%20profile">No profile</a>
<li><code>Gprof shows 100% of time in one function</code>: <a href="#Garbled%20profile">Garbled profile</a>
<li><code>Gprof, documentation</code>: <a href="#Cannot%20find%20docs">Cannot find docs</a>
<li><code>Gprof, the GNU profiler</code>: <a href="#How%20to%20profile">How to profile</a>
<li><code>Groff, port to DJGPP</code>: <a href="#Man%20pages">Man pages</a>
<li><code>Groff, using to read man pages</code>: <a href="#Man%20pages">Man pages</a>
<li><code>GRX, a graphics package</code>: <a href="#What%20to%20download">What to download</a>
<li><code>GRX, failure to compile inline assembly</code>: <a href="#Allegro%20and%20GRX">Allegro and GRX</a>
<li><code>GRX, latest versions, where to find</code>: <a href="#What%20to%20download">What to download</a>
<li><code>GRX, linker switch</code>: <a href="#Unresolved%20externals">Unresolved externals</a>
<li><code>GRX, supported SVGA types</code>: <a href="#GRX%20driver">GRX driver</a>
<li><code>gsymify, a substitute for SYMIFY for stabs debugging</code>: <a href="#C++%20classes%20in%20GDB">C++ classes in GDB</a>
<li><code>gxx driver, not in gcc272b distribution</code>: <a href="#Unresolved%20externals">Unresolved externals</a>
<li><code>gxx driver, searches C<tt>++</tt> libraries automatically</code>: <a href="#Unresolved%20externals">Unresolved externals</a>
<li><code>gxx.exe, duplicate versions</code>: <a href="#g++.exe">g++.exe</a>
<li><code>HIMEM, malloc/calloc fails</code>: <a href="#EMM386%20alloc">EMM386 alloc</a>
<li><code>INFNG, produces the FAQ in Norton Guides format</code>: <a href="#FAQ%20format">FAQ format</a>
<li><code>Info crashes due to ^Z or whitespace at end of DJGPP.ENV</code>: <a href="#Info%20crashes">Info crashes</a>
<li><code>Info crashes immediately upon startup</code>: <a href="#Info%20crashes">Info crashes</a>
<li><code>Info crashes under QDPMI</code>: <a href="#Buggy%20DPMI">Buggy DPMI</a>
<li><code>Info hangs on Windows 9X</code>: <a href="#Programs%20hang">Programs hang</a>
<li><code>Info won't display a file</code>: <a href="#Info%20cannot%20find%20Top">Info cannot find Top</a>
<li><code>Info, a stand-alone docs browser</code>: <a href="#Where%20is%20the%20docs">Where is the docs</a>
<li><code>Info, conflicts with DISPLAY.SYS, EMM386</code>: <a href="#Info%20crashes">Info crashes</a>
<li><code>Info, using to read man pages</code>: <a href="#Man%20pages">Man pages</a>
<li><code>InfView, an Info browser</code>: <a href="#Where%20is%20the%20docs">Where is the docs</a>
<li><code>install-info, a program to install Info docs</code>: <a href="#What%20to%20download">What to download</a>
<li><code>Intel2gas, a converter from Intel to AT&amp;T assembly syntax</code>: <a href="#Converting%20ASM">Converting ASM</a>
<li><code>Internet Explorer, downloading DJGPP</code>: <a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>
<li><code>JAS, a free assembler with Intel-like syntax</code>: <a href="#Converting%20ASM">Converting ASM</a>
<li><code>Jlib, a gaming library</code>: <a href="#Packages">Packages</a>
<li><code>JPTUI, a text user interface library</code>: <a href="#Packages">Packages</a>
<li><code>LaTeX, printing the docs</code>: <a href="#Printed%20docs">Printed docs</a>
<li><code>lcc-win32, a free compiler for Windows</code>: <a href="#Windows%20apps">Windows apps</a>
<li><code>LCLINT, a Lint clone for DJGPP</code>: <a href="#Packages">Packages</a>
<li><code>LD linker, linker script defines djgpp_first_ctor</code>: <a href="#djgpp_first_ctor">djgpp_first_ctor</a>
<li><code>ld</code>, how to improve linking speed<code></code>: <a href="#Slow%20linker">Slow linker</a>
<li><code>ld.exe, from RSXNTDJ</code>: <a href="#Windows%20apps">Windows apps</a>
<li><code>Less hangs on Windows 9X</code>: <a href="#Programs%20hang">Programs hang</a>
<li><code>Less, using to read man pages</code>: <a href="#Man%20pages">Man pages</a>
<li><code>Lex, debugging generated code</code>: <a href="#Included%20source">Included source</a>
<li><code>libemu.a FP emulation library</code>: <a href="#Emulation">Emulation</a>
<li><code>LibINI, Windows .ini files handling</code>: <a href="#Packages">Packages</a>
<li><code>libmslot, a Windows Mailslot library</code>: <a href="#Packages">Packages</a>
<li><code>libwin, a library for interfacing with Windows</code>: <a href="#Packages">Packages</a>
<li><code>Linker can't find library functions in non-default directories</code>: <a href="#Libraries%20order">Libraries order</a>
<li><code>Linker, environment variables</code>: <a href="#Libraries%20order">Libraries order</a>
<li><code>Linker, order of libraries in the command line</code>: <a href="#Libraries%20order">Libraries order</a>
<li><code>Linux doesn't allow ``Fat DS''</code>: <a href="#Fat%20DS">Fat DS</a>
<li><code>Linux, compatibility</code>: <a href="#Minimum">Minimum</a>
<li><code>Linux, needs a patch to run nested programs</code>: <a href="#DOSEmu">DOSEmu</a>
<li><code>Linux, slow response to interactive programs</code>: <a href="#DOSEmu">DOSEmu</a>
<li><code>LWP multitasking for DJGPP</code>: <a href="#Packages">Packages</a>
<li><code>Make crashes on DOSEmu</code>: <a href="#DOSEmu">DOSEmu</a>
<li><code>Make crashes on OS/2</code>: <a href="#OS2">OS2</a>
<li><code>Make error message ``missing separator''</code>: <a href="#Missing%20separator">Missing separator</a>
<li><code>Make requires floating point</code>: <a href="#Changing">Changing</a>
<li><code>Make, can be built to not issue FP instructions</code>: <a href="#DOSEmu">DOSEmu</a>
<li><code>Make, GCC hangs when invoked from it</code>: <a href="#Make%20hangs">Make hangs</a>
<li><code>Make, maximum length of command line to pass to GCC</code>: <a href="#How%20long">How long</a>
<li><code>Make, passing long command lines via Makefile</code>: <a href="#Makefiles">Makefiles</a>
<li><code>Make, warning ``file modification time in the future''.</code>: <a href="#Modification%20time">Modification time</a>
<li><code>Makeinfo, using to convert Info files to plain ASCII</code>: <a href="#No%20Info">No Info</a>
<li><code>MAKERTF, produces the FAQ in RTF format</code>: <a href="#FAQ%20format">FAQ format</a>
<li><code>Man program for DJGPP docs</code>: <a href="#Man%20pages">Man pages</a>
<li><code>MDA device driver for redirecting debug output</code>: <a href="#Debug%20graphics">Debug graphics</a>
<li><code>MESA for DJGPP</code>: <a href="#OpenGL">OpenGL</a>
<li><code>MESA is under LGPL</code>: <a href="#OpenGL">OpenGL</a>
<li><code>MGL for DJGPP</code>: <a href="#OpenGL">OpenGL</a>
<li><code>MGUI, a cross-platform GUI library</code>: <a href="#Packages">Packages</a>
<li><code>Midnight Commander port to DJGPP</code>: <a href="#Packages">Packages</a>
<li><code>Mingw32 port of GCC</code>: <a href="#Windows%20apps">Windows apps</a>
<li><code>More, using to read man pages</code>: <a href="#Man%20pages">Man pages</a>
<li><code>MSHELL fails because of TSR programs</code>: <a href="#Debug%20graphics">Debug graphics</a>
<li><code>MSHELL, redirecting screen output</code>: <a href="#Debug%20graphics">Debug graphics</a>
<li><code>MSS, a malloc debugger</code>: <a href="#Packages">Packages</a>
<li><code>NASM, a portable assembler with Intel syntax support</code>: <a href="#Converting%20ASM">Converting ASM</a>
<li><code>NASM, a tutorial on usage with DJGPP</code>: <a href="#Syntax">Syntax</a>
<li><code>NC clone, ported to DJGPP</code>: <a href="#Packages">Packages</a>
<li><code>Netscape, downloading DJGPP</code>: <a href="#DJGPP%20by%20WWW">DJGPP by WWW</a>
<li><code>NM, printing library contents</code>: <a href="#Which%20library">Which library</a>
<li><code>Notepad, appends .txt to source files</code>: <a href="#No%20input%20files">No input files</a>
<li><code>Novell NWDOS 7, buggy DPMI services</code>: <a href="#Minimum">Minimum</a>
<li><code>Novell NWDOS 7, compatibility</code>: <a href="#Minimum">Minimum</a>
<li><code>Novell VLM causes slow-down of DJGPP programs</code>: <a href="#Slow-down">Slow-down</a>
<li><code>NWDOS, buggy DPMI services crash DJGPP</code>: <a href="#Buggy%20DPMI">Buggy DPMI</a>
<li><code>OBJ2BFD converter from .obj to COFF format</code>: <a href="#OBJ%20and%20LIB">OBJ and LIB</a>
<li><code>OBJ2COFF converter from .obj to COFF format</code>: <a href="#OBJ%20and%20LIB">OBJ and LIB</a>
<li><code>OBJ2COFF, commercial use is prohibited</code>: <a href="#OBJ%20and%20LIB">OBJ and LIB</a>
<li><code>Objective C, compilation problems</code>: <a href="#Objective%20C">Objective C</a>
<li><code>OpenDOS, bug in DPMI services crash DJGPP</code>: <a href="#Buggy%20DPMI">Buggy DPMI</a>
<li><code>OpenGL for DJGPP</code>: <a href="#OpenGL">OpenGL</a>
<li><code>OpenGL, what it is</code>: <a href="#OpenGL">OpenGL</a>
<li><code>OS/2 and RHIDE</code>: <a href="#OS2">OS2</a>
<li><code>OS/2 Warp allows ``Fat DS''</code>: <a href="#Fat%20DS">Fat DS</a>
<li><code>OS/2, and _go32_remaining_physical_memory</code>: <a href="#Confusing%20alloc">Confusing alloc</a>
<li><code>OS/2, and <code>delay</code> function</code>: <a href="#OS2">OS2</a>
<li><code>OS/2, compatibility</code>: <a href="#Minimum">Minimum</a>
<li><code>OS/2, Ctrl-C aborts programs</code>: <a href="#OS2">OS2</a>
<li><code>OS/2, incompatibilities</code>: <a href="#OS2">OS2</a>
<li><code>OS/2, SIGINT cannot be caught</code>: <a href="#OS2">OS2</a>
<li><code>Palantir, a multitasking kernel for Allegro</code>: <a href="#Packages">Packages</a>
<li><code>PDMLWP, a multithreading package</code>: <a href="#Packages">Packages</a>
<li><code>PGCC exhausts virtual memory</code>: <a href="#GCC%20optimizations">GCC optimizations</a>
<li><code>PGCC, bugs with optimization levels -O7 and higher</code>: <a href="#Older%20is%20faster">Older is faster</a>
<li><code>PKUNZIP v2.50, creates numeric tails</code>: <a href="#Dual%20DOS%2fWindows">Dual DOS/Windows</a>
<li><code>PMODE/DJ reduces interrupt reflection overhead</code>: <a href="#HW%20Int%20pitfalls">HW Int pitfalls</a>
<li><code>PMODE/DJ, can be used to produce stand-alone programs</code>: <a href="#Distributing">Distributing</a>
<li><code>Pthreads for DJGPP</code>: <a href="#Packages">Packages</a>
<li><code>QDPMI allows ``Fat DS''</code>: <a href="#Fat%20DS">Fat DS</a>
<li><code>QDPMI and _crt0_startup_flags settings</code>: <a href="#QDPMI%20VM">QDPMI VM</a>
<li><code>QDPMI crashes DJGPP programs when they cause Int 24h</code>: <a href="#Int%2024h">Int 24h</a>
<li><code>QDPMI crashes Info and debuggers</code>: <a href="#Buggy%20DPMI">Buggy DPMI</a>
<li><code>QDPMI fails to provide virtual memory</code>: <a href="#QDPMI%20VM">QDPMI VM</a>
<li><code>QDPMI, malloc/calloc failure</code>: <a href="#QDPMI%20alloc">QDPMI alloc</a>
<li><code>QDPMI, memory usage for nested programs</code>: <a href="#Swap%20out">Swap out</a>
<li><code>QEMM, how to get more than 64MB of memory</code>: <a href="#More%20than%2064MB">More than 64MB</a>
<li><code>QEMM386, settings for optimal performance</code>: <a href="#Config">Config</a>
<li><code>RAMDRIVE.SYS, problems with long file names</code>: <a href="#Config">Config</a>
<li><code>RCS port to DJGPP</code>: <a href="#Packages">Packages</a>
<li><code>REDIR, problems on Windows/NT</code>: <a href="#WindowsNT">WindowsNT</a>
<li><code>REDIR, redirecting GCC messages to a file</code>: <a href="#Redirect">Redirect</a>
<li><code>REDIR, redirecting stack dump to a file</code>: <a href="#Crash%20traceback">Crash traceback</a>
<li><code>REDIR, use to get redirection and long command lines</code>: <a href="#Makefiles">Makefiles</a>
<li><code>REGEDIT, running from an input file</code>: <a href="#Dual%20DOS%2fWindows">Dual DOS/Windows</a>
<li><code>RHGDB fails to set or display static variables</code>: <a href="#Static%20vars">Static vars</a>
<li><code>RHIDE aborts on OS/2</code>: <a href="#OS2">OS2</a>
<li><code>RHIDE debugger GP Faults on breakpoints under Windows</code>: <a href="#Debugging%20woes">Debugging woes</a>
<li><code>RHIDE fails to set or display static variables</code>: <a href="#Static%20vars">Static vars</a>
<li><code>RHIDE hangs on Windows 9X</code>: <a href="#Programs%20hang">Programs hang</a>
<li><code>RHIDE puts files in the wrong directory</code>: <a href="#RHIDE">RHIDE</a>
<li><code>RHIDE, and Caldera's DR-DOS</code>: <a href="#Minimum">Minimum</a>
<li><code>RHIDE, and monochrome display</code>: <a href="#Debug%20graphics">Debug graphics</a>
<li><code>RHIDE, debugging graphics programs on Windows</code>: <a href="#Debug%20graphics">Debug graphics</a>
<li><code>RHIDE, display problems</code>: <a href="#RHIDE">RHIDE</a>
<li><code>RHIDE, includes an integrated debugger</code>: <a href="#How%20to%20debug">How to debug</a>
<li><code>RHIDE, long command lines</code>: <a href="#Makefiles">Makefiles</a>
<li><code>RHIDE, mouse problems on DOSEmu</code>: <a href="#DOSEmu">DOSEmu</a>
<li><code>RHIDE, problems on NT</code>: <a href="#WindowsNT">WindowsNT</a>
<li><code>RHIDE, problems with using</code>: <a href="#RHIDE">RHIDE</a>
<li><code>RHIDE, reading Info docs</code>: <a href="#Where%20is%20the%20docs">Where is the docs</a>
<li><code><small>RHIDE</small>, where to find the latest version</code>: <a href="#What%20to%20download">What to download</a>
<li><code>RSXIDE, where to download</code>: <a href="#Windows%20apps">Windows apps</a>
<li><code>RSXNTDJ include files, mixing with DJGPP</code>: <a href="#Still%20unresolved">Still unresolved</a>
<li><code>RSXNTDJ toolkit for developing Win32 applications</code>: <a href="#Windows%20apps">Windows apps</a>
<li><code>RSXNTDJ, how to install</code>: <a href="#Windows%20apps">Windows apps</a>
<li><code>RSXNTDJ, MS Platform SDK</code>: <a href="#Windows%20apps">Windows apps</a>
<li><code>RSXNTDJ, problems with header files</code>: <a href="#Windows%20apps">Windows apps</a>
<li><code>RSXNTDJ, using with GCC 2.8.1 and later</code>: <a href="#Windows%20apps">Windows apps</a>
<li><code>SCRIPT, redirecting GCC messages to a file</code>: <a href="#Redirect">Redirect</a>
<li><code>Sed requires floating point</code>: <a href="#Changing">Changing</a>
<li><code>Sed script to convert ASM to AT&amp;T syntax</code>: <a href="#Converting%20ASM">Converting ASM</a>
<li><code>Sed, documentation</code>: <a href="#Cannot%20find%20docs">Cannot find docs</a>
<li><code>Sed, using to convert formatted man pages to plain text</code>: <a href="#Man%20pages">Man pages</a>
<li><code>SeeR, a scripting engine</code>: <a href="#Packages">Packages</a>
<li><code>SETEdit, where to download</code>: <a href="#Man%20pages">Man pages</a>
<li><code>setitimer, bugs</code>: <a href="#Garbled%20profile">Garbled profile</a>
<li><code>SHARE, limits available file handles</code>: <a href="#File%20handles">File handles</a>
<li><code>SmartDrv, installation</code>: <a href="#Config">Config</a>
<li><code>STRIP makes executables smaller</code>: <a href="#Large%20executable">Large executable</a>
<li><code>STUBEDIT, changing stack size</code>: <a href="#Stack%20size">Stack size</a>
<li><code>STUBEDIT, effect on memory left to spawned programs</code>: <a href="#Swap%20out">Swap out</a>
<li><code>STUBIFY fails to produce .EXE</code>: <a href="#No%20EXE">No EXE</a>
<li><code>STUBIFY, not found during compilation</code>: <a href="#No%20stubify">No stubify</a>
<li><code>STUBIFY.EXE, infected by a virus</code>: <a href="#Unknown%20filetype">Unknown filetype</a>
<li><code>SWORD, GUI environment</code>: <a href="#Packages">Packages</a>
<li><code>SYMIFY, a program to read crash traceback</code>: <a href="#Crash%20traceback">Crash traceback</a>
<li><code>SYMIFY, inaccurate report for inline assembly</code>: <a href="#Crash%20traceback">Crash traceback</a>
<li><code>SYSINFO package</code>: <a href="#Packages">Packages</a>
<li><code>TA2AS, a converter from Intel to AT&amp;T assembly syntax</code>: <a href="#Converting%20ASM">Converting ASM</a>
<li><code>TeX, printing the docs</code>: <a href="#Printed%20docs">Printed docs</a>
<li><code>TEXI2PS, converting docs to crude PostScript</code>: <a href="#Printed%20docs">Printed docs</a>
<li><code>TkInfo, a Win32 tool to read Info files</code>: <a href="#Where%20is%20the%20docs">Where is the docs</a>
<li><code>UNIVBE, software VESA 2.0 emulation</code>: <a href="#GRX%20driver">GRX driver</a>
<li><code>UPX, an excutable compressor for DJGPP</code>: <a href="#Large%20executable">Large executable</a>
<li><code>usleep, insufficient resolution</code>: <a href="#usleep">usleep</a>
<li><code>VDISK from Caldera's DR-DOS</code>: <a href="#Minimum">Minimum</a>
<li><code>VIM, a Vi clone for DJGPP</code>: <a href="#Packages">Packages</a>
<li><code>Warp, compatibility</code>: <a href="#Minimum">Minimum</a>
<li><code>Warp, incompatibilities</code>: <a href="#OS2">OS2</a>
<li><code>WATTCP</code>: <a href="#Packages">Packages</a>
<li><code>Windows 3.X allows ``Fat DS''</code>: <a href="#Fat%20DS">Fat DS</a>
<li><code>Windows 3.X, compatibility</code>: <a href="#Minimum">Minimum</a>
<li><code>Windows 3.X, malloc/calloc fails</code>: <a href="#Windows%20alloc">Windows alloc</a>
<li><code>Windows 98 complains about memory access</code>: <a href="#Windows%2098">Windows 98</a>
<li><code>Windows 9X allows ``Fat DS''</code>: <a href="#Fat%20DS">Fat DS</a>
<li><code>Windows 9X doesn't allow more than 16MB virtual memory</code>: <a href="#Windows9X%20alloc">Windows9X alloc</a>
<li><code>Windows 9X DPMI server loses selectors calling spawnXX</code>: <a href="#WindowsNT">WindowsNT</a>
<li><code>Windows 9X long filenames and C<tt>++</tt> headers</code>: <a href="#Missing%20C++%20headers">Missing C++ headers</a>
<li><code>Windows 9X, calls both PM and RM interrupt handlers</code>: <a href="#Hardware%20interrupts">Hardware interrupts</a>
<li><code>Windows 9X, compatibility</code>: <a href="#Minimum">Minimum</a>
<li><code>Windows 9X, how to get more than 64MB of DPMI memory</code>: <a href="#More%20than%2064MB">More than 64MB</a>
<li><code>Windows 9X, setting DJGPP environment variable</code>: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li><code>Windows messes up graphics screen</code>: <a href="#Graphics%20and%20Windows">Graphics and Windows</a>
<li><code>Windows, FP emulator hangs</code>: <a href="#Emulation%20in%20Windows">Emulation in Windows</a>
<li><code>Windows, malloc/calloc failure</code>: <a href="#QDPMI%20alloc">QDPMI alloc</a>
<li><code>Windows, memory usage for nested programs</code>: <a href="#Swap%20out">Swap out</a>
<li><code>Windows, setting memory parameters for DJGPP</code>: <a href="#Config">Config</a>
<li><code>Windows, stack size control</code>: <a href="#Stack%20size">Stack size</a>
<li><code>Windows, wants to run graphics programs in DOS Mode</code>: <a href="#Graphics%20and%20Windows">Graphics and Windows</a>
<li><code>Windows/NT and <code>delay</code> function</code>: <a href="#WindowsNT">WindowsNT</a>
<li><code>Windows/NT doesn't allow ``Fat DS''</code>: <a href="#Fat%20DS">Fat DS</a>
<li><code>Windows/NT doesn't allow port I/O</code>: <a href="#WindowsNT">WindowsNT</a>
<li><code>Windows/NT DPMI server loses selectors calling spawnXX</code>: <a href="#WindowsNT">WindowsNT</a>
<li><code>Windows/NT LFN driver</code>: <a href="#WindowsNT">WindowsNT</a>
<li><code>Windows/NT, bug in handling signals</code>: <a href="#WindowsNT">WindowsNT</a>
<li><code>Windows/NT, compatibility</code>: <a href="#Minimum">Minimum</a>
<li><code>Windows/NT, Ctrl-C aborts DJGPP programs</code>: <a href="#WindowsNT">WindowsNT</a>
<li><code>Windows/NT, profiled programs crash</code>: <a href="#WindowsNT">WindowsNT</a>
<li><code>WindowsNT doesn't support VDS</code>: <a href="#DMA">DMA</a>
<li><code>WindowsNT, setting DJGPP environment variable</code>: <a href="#Missing%20headers%20or%20libraries">Missing headers or libraries</a>
<li><code>WinZip, how to unzip DJGPP</code>: <a href="#Urgent">Urgent</a>
<li><code>WMEMU causes undefined references when linking</code>: <a href="#Emulation">Emulation</a>
<li><code>WMEMU, an alternative floating-point emulator</code>: <a href="#Emulation">Emulation</a>
<li><code>WMEMU, use when debugging FP programs on non-FPU machine</code>: <a href="#Debugging%20woes">Debugging woes</a>
<li><code>Yacc, debugging generated code</code>: <a href="#Included%20source">Included source</a>
<li><code>YAMD, a malloc debugger</code>: <a href="#Packages">Packages</a>
<li><code>YAMD, debugging buffer overruns</code>: <a href="#malloc%20crash">malloc crash</a>
<li><code>ZipMagic, disable to unzip DJGPP</code>: <a href="#Urgent">Urgent</a>
</ul>


<hr><h4>Footnotes</h4>
<ol type="1">
<li><a name="fn-1"></a>
<p>
Please report any issues that couldn't be found via the indices to the
maintainer of this FAQ, whose name and e-mail address can be found near
the end of the FAQ.</p>

<li><a name="fn-2"></a>
<p>
<dfn>Posix</dfn> is an international standard for a portable operating
system.  It specifies facilities of a compiler, its libraries, and the
basic set of development tools.  Posix was originally modeled on Unix
systems, but is currently supported by most modern operating systems.</p>

<li><a name="fn-3"></a>
<p>
For example, the DOS version of the well-known game <code>Quake</code> by id
Software was compiled with DJGPP.</p>

<li><a name="fn-4"></a>
<p>
The typo in the word <code>Exception</code> is in the actual message popped by
Linux.</p>

<li><a name="fn-5"></a>
<p>
This was reported for DOSEmu version 0.66.7; the format of
<code>dosemu.conf</code> might be different in version 0.9x.</p>

<li><a name="fn-6"></a>
<p>
But the development environment will only run on Windows 9X/NT.</p>

<li><a name="fn-7"></a>
<p>
This DLL can be stripped off the debugging symbols using the
<code>strip</code> utility, which leaves a much smaller--about
500KB--file.</p>

<li><a name="fn-8"></a>
<p>
The <code>BUFFERS=40,8</code> setting defines a primary cache of 40 512-byte
blocks and a secondary cache of 8 blocks.  The primary cache is used by
DOS to store the data actually read by a program, in case it is re-read
shortly afterwards; while the secondary cache is used to read data ahead
of the requests, which is optimized towards sequential reads.</p>

<li><a name="fn-9"></a>
<p>
ftp.simtel.net is actually several ftp sites arranged in a rotating pattern
of IP addresses to help balance the load and to avoid access problems
due to network outages and simultaneous user limits.</p>

<li><a name="fn-10"></a>
<p>
The version numbers of the packages listed here might not be up to date
by the time you read this.  For the latest versions, check out the DJGPP
Mini-FAQ posted weekly to the the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a>.  The file
LISTINGS.zip available on every DJGPP site includes one file for every
zip that lists all the files inside that zip; download and unzip it on
your machine, and you've got a set of files you can search for
substrings.  Another place where you can look for the latest versions of
all files is <a href="http://www.delorie.com/djgpp/dl/ofc/">on the DJGPP server</a>,
which is also a convenient way of downloading individual files if you
have lost them somehow.</p>

<li><a name="fn-11"></a>
<p>
Like its name suggests, <code>texi2html</code> converts a Texinfo source to
HTML.</p>

<li><a name="fn-12"></a>
<p>
You will need to install the port of Bash and some auxiliary utilities
to be able to run shell scripts; <code>texi2dvi</code> itself is part of the
GNU Texinfo distribution and comes with the <code>v2gnu/txiNNNb.zip</code>
archive.</p>

<li><a name="fn-13"></a>
<p>
The example uses Unix-style forward slashes, but DOS-style backslashes
can also be used.</p>

<li><a name="fn-14"></a>
<p>
While admittedly perverse, this little monstrosity was written with
the sole purpose of demonstrating that C and C<tt>++</tt> have quite different
semantics under certain circumstances.  Some people think that C is a
proper subset of C<tt>++</tt>; the above example shows that this is
<em>not</em> true.</p>

<li><a name="fn-15"></a>
<p> If you define an empty
substitute for <code>__crt0_setup_arguments</code>, you don't need to define a
substitute for <code>__crt0_glob_function</code>.</p>

<li><a name="fn-16"></a>
<p>
In particular, running <code>strip</code> on a program and then compressing it
with <small>DJP</small> would produce a program that crashes upon startup.</p>

<li><a name="fn-17"></a>
<p>
Those who want <em>all</em> the details should consult a good book about
DOS internals, such as <cite>Undocumented DOS, 2nd ed.</cite> by Andrew
Schullman, or Geoff Chappel's <cite>DOS Internals</cite>.</p>

<li><a name="fn-18"></a>
<p>
All DOS programs get the default 20-handle table when they start; DOS
only copies the first 20 handles into the child, so it is not possible
to inherit more than 20 handles.  The expansion of the default 20-handle
table to 255 handles is a special feature of the DJGPP library, and it
only happens when the programs exhausts all of the 20 handles while it
runs.  Therefore, when all of the first 20 handles are taken up by files
inherited from the parent program, the child program can fail to start
because the DJGPP stub loader needs one free handle to open and read the
COFF executable into memory.  The stub cannot use the enlarged
255-handle table, since it cannot call the DJGPP library.  Such problems
indeed happen in programs compiled with DJGPP v2.01; v2.02 fixes this
bug.</p>

<li><a name="fn-19"></a>
<p>
Each handle created by a call to <code>open</code> uses up one slot in the
SFT, whereas a handle created by <code>dup</code> just increments the use
count of a slot that was already in use.</p>

<li><a name="fn-20"></a>
<p>
That's the program being debugged, in case you didn't know.</p>

<li><a name="fn-21"></a>
<p>
Programs that create machine code in <code>malloc</code>ed storage and then
jump into it could have their <small>EIP</small> above <small>EBP</small>.  The Allegro
library utilizes this technique in some of its functions (specifically,
compiled sprites and stretched blits are normally performed in this
way).</p>

<li><a name="fn-22"></a>
<p>
If you absolutely need to call <code>ld.exe</code> directly, invoke <code>gcc</code>
once with a <code>-v</code> switch and you will see what are the arguments
that you should pass to the linker in your case.</p>

<li><a name="fn-23"></a>
<p>
Here's a more detailed explanation.  DOS cannot access memory above 1MB
mark, where your DJGPP program lives, since real-mode addresses are
20-bit wide, and 20-bit addresses cover only the first megabyte.  So,
each time a DJGPP program needs to call a DOS function (or any other
real-mode service, like some BIOS interrupt) and needs to pass data to
or from that service, we must use some buffer in conventional memory to
communicate with DOS and BIOS.  The transfer buffer is a block of
conventional memory that the DJGPP startup code allocates for this
purpose.  When a real-mode service is called, the data that needs to be
submitted to it is copied to the transfer buffer, and the address of the
transfer buffer is passed to the real-mode service.  If the service
returns some data (e.g., if you want to read a portion of a file), data
is copied from the transfer buffer when the service returns.

<p>The transfer buffer primarily exists for library functions, but it can
also be used by an application, if it needs to invoke real-mode
services.</p>

<li><a name="fn-24"></a>
<p>
Actually, the maximum possible value is FEF0h, or 65254 in decimal,
because the transfer buffer is created by the startup code by resizing
the PSP memory block.  Since the resized block needs to leave 256 bytes
for the PSP, and needs to be aligned on a 16-byte boundary, you cannot
have the entire 65535 bytes for the transfer buffer.  In DJGPP v2.01, if
you invoke <code>stubedit</code> with a <code>bufsize=64k</code> parameter, what you
actually get is a 2KB buffer, since the combined size of the PSP and the
transfer buffer will wrap around in a 16-bit variable when the startup
code computes it.  The versions of <code>stubedit</code> which will come with
DJGPP v2.02 and later explicitly warn you about this case and will reset
any value that is too large to the maximum allowed size of FE00h (65024
decimal) bytes--this is less than FEF0h because the latter is not
aligned on the 512-byte DOS sector size, which could slow down disk
I/O.</p>

<li><a name="fn-25"></a>
<p>
Without a real x87 FPU, an exception is generated by the CPU each time a
floating-point instruction is seen in the code. 
<code>__djgpp_exception_processor</code> is called for each such exception and
services it by calling the emulator, <code>emu387.dxe</code>, or functions
from the emulator library <code>libemu.a</code> (if the program was linked
with <code>-lemu</code>), to emulate the instruction.  Since exception
processing incurs a lot of overhead, this emulation is slow.</p>

<li><a name="fn-26"></a>
<p>
The DPMI 0.9 spec does not provide any means for the application to
control where in the address space will the DPMI server allocate a
particular chunk of memory.  The application asks the DPMI server for
whatever amount of memory it needs, and gets a chunk of that size whose
address can be anywhere.  Since the stack must be contiguous and expands
downwards, growing it during program's run would require a very
complicated code, unless it is pre-allocated at startup.</p>

<li><a name="fn-27"></a>
<p>
In case you wonder, the name <code>!proxy</code> comes from the string
which identifies the use of this method: instead of getting the actual
command line, the program gets <code>!proxy</code> followed by the address of
the actual command line.</p>

<li><a name="fn-28"></a>
<p>If you use <small>MASM</small> or <small>LIB32</small>, please post your
experiences to the <a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp news group</a>, so that I can make the above
instructions less vague.</p>

<li><a name="fn-29"></a>
<p>
Note that mixing object files from different compilers generally doesn't
work at all, even if all the object files are in <code>.obj</code> format.</p>

<li><a name="fn-30"></a>
<p>
This function calls the video BIOS interrupt 10h to allow bright
background colors to be used instead of blinking characters.  DJGPP has
a library function, called <code>intensevideo</code>, to do that, but for the
purpose of this example, let's assume we have reasons not to use it.</p>

<li><a name="fn-31"></a>
<p> The DPMI spec indicates
that you should <em>not</em> use the default stack if your
procedure/interrupt handler uses more that 60 bytes, or 1/8 of the total
stack space available by default.</p>

<li><a name="fn-32"></a>
<p>
DJGPP v2.01 makes the limit of <code>_dos_ds</code> be 4GB, which effectively
disables memory protection when you use that selector.  However, since
no memory outside the first 1MB is properly mapped into your program's
address space without additional DPMI calls, and the DPMI host is then
free to put memory-mapped devices, such as Weitek I/O space or the
linear frame buffer of an SVGA, on any address it sees fit, that huge
limit is an unjustified security hole.  DJGPP v2.02 will really be
limited by 1MB+64KB.</p>

<li><a name="fn-33"></a>
<p>
If you want to decipher the 8-byte structure that is passed to
<code>__dpmi_set_descriptor</code> in this example, read the documentation of
the <code>__dpmi_get_descriptor</code> library function in the library
reference.  This structure is the descriptor maintained by the processor
for each protected-mode segment, such as those loaded into the <small>CS</small>
and <small>DS</small> registers.</p>

<li><a name="fn-34"></a>
<p>
If you are using this example in your program, don't forget to disable
the handler at program's exit by calling the same function 0Ch of Int
33h with a zero mask in the CX register, and then deallocate the
callback by calling the <code>_go32_dpmi_free_real_mode_callback</code>
library function.  Also, remember that all code and data touched by the
handler must be locked, otherwise it will crash under some DPMI servers,
such as CWSDPMI.</p>

<li><a name="fn-35"></a>
<p>
Locking a region of memory means that this region should be always
present in RAM.  Usually, the virtual-memory mechanism is allowed to
page regions out of RAM when it needs to load another region that is not
loaded.  This happens if the program uses more memory than what is
physically available to it.  When a program needs to access an address
that isn't currently in RAM, the operating system will look for some
memory region that wasn't accessed for quite some time, and replace it
with the block that needs to be accessed now.  Locking a region prevents
that region to be paged out, for as long as the program runs.</p>

<li><a name="fn-36"></a>
<p>
This discussion does <strong>not</strong> pertain to the <code>__dpmi_int</code>
function as opposed to the <code>_go32_dpmi_simulate_int</code> function.  On
the contrary, you will be much better off using <code>__dpmi_int</code>, since
it automatically zeroes out some of the members of the real-mode
registers structure, while with <code>_go32_dpmi_simulate_int</code> you need
to do that by hand.</p>

<li><a name="fn-37"></a>
<p>
Actually, it is possible to avoid reentrancy problems in
interrupt-driven programs: programs known as TSRs (<dfn>Terminate and
Stay Resident</dfn>) have been doing that for years.  But doing so requires
hooking and monitoring many DOS and BIOS interrupts, to know when it is
safe to page.  If CWSDPMI would use these techniques, it would take
much more DOS memory to load and run.  It would also need to be updated
with every new DOS release, since some of the internal DOS structures it
would need to monitor change their address and/or layout with new
versions of DOS.</p>

<li><a name="fn-38"></a>
<p> CWSDPMI has an
experimental VDS support in its sources, but the distributed binary was
compiled without it.  Contact <a href="mailto:sandmann@clio.rice.edu">Charles Sandmann</a> if you want to try to enable VDS
support in CWSDPMI.</p>

<li><a name="fn-39"></a>
<p>In case somebody thinks there is a contradiction here:
I don't consider a requirement to provide information to be a
restriction.</p>

<li><a name="fn-40"></a>
<p>
Note that this still allows the struct to be padded at the end.</p>

<li><a name="fn-41"></a>
<p>
For some reason, Microsoft doesn't like it when users disable numeric
tails.  Several Microsoft publications warn against doing that, and I'm
told that Windows 98 has made it harder to disable them.  I'm not sure
why do they object so much.  Presumably, some programs rely on certain
directories to have numeric tails, so that they could be found even in
plain DOS mode.  Apparently, some of those programs have short aliases
such as <code>PROGRA~1</code> (the short version of the <code>Program Files</code>
directory) hard-wired into them, and Microsoft is afraid you could
reinstall or move those directories when numeric tails are disabled, and
thus cause such programs not to find their "home". 
It is obvious that such programs are badly broken (e.g., the short alias
could easily be <code>PROGRA~2</code>), and you have every right to yell at
the vendor who sells them to you.  But even if you have no other way
than to live with them, my experience shows that you have nothing real
to worry about.  Remember: numeric tails only have effect when files are
created or renamed.  So, if you want to be on the safe side, re-enable
them before installing Windows software, especially if the programs you
install need to run in DOS mode as well (a typical example would be a
disk-recovery package such as Norton Utilities).  Then disable numeric
tails again, once the installation is over.

<p>For what it's worth, I always run my system with numeric tails disabled,
and I have yet to see a single real problem.</p>

<li><a name="fn-42"></a>
<p>
If you need Binutils configured for <code>elf32-i386</code> target that can be
used with DJGPP, you can find it at
<a href="http://www.multimania.com/~placr/">http://www.multimania.com/~placr/</a>.</p>

<li><a name="fn-43"></a>
<p>
Since these series are computed using a deterministic algorithm, they
are not <em>really</em> random.  Real random numbers can only be a result
of unpredictable physical processes such as radioactive decay etc. 
However, a good algorithm for pseudo-random numbers produces a series of
numbers that pass many tests for randomality.</p>

</ol><hr>

</body></html>

