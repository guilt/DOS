3D Programming Code Description .
By : Karthik Kumar V .

Some amount of 3D has been put into these Programs .Basically ,3D Surfaces are
drawn using the equation of the shape ,such as surfaces .For having solid
shapes ,than contoured ,use plot() ,than conplot() and sconplot() .Function
sconplot() has been written to show the curvature with angles theta and phi ,
in spherical coordinates .Translation (linear movement) and Scaling are
pretty easy ,though the code isn't given here .They use :

x' = x + v(x).t + (1/2)a(x).t²
y' = y + v(y).t + (1/2)a(y).t²
z' = z + v(z).t + (1/2)a(z).t²

x' = a.x
y' = b.y
z' = c.z

The rotation ,however derives it's formula from polar coordinates .
where in a 2D System of x and y ,

R = r cos (theta) i^ + r sin (theta) j^

is replaced by

R = r cos (theta + R) i^ + r sin (theta + R) j^

and the formulae are applied for  cos (theta + R) and sin (theta + R) ,giving
the expressions user in rtrans() ,where

x  = r cos (theta)
y  = r sin (theta)
x' = r cos (theta + R)
y' = r sin (theta + R)

The default xyz System is drawn as :

	Y
	|
	|_____X
       /
      /
     Z

which isn't isometric .

There is yet another Engine ,which functions differently .This is the Isometric Engine
,where the octent is drawn as :

	Y
	|
	|
       / \
      /   \
     Z     X

The Objects are drawn as follows :

Choose the number of vertices of the Object 'n' .Then Plot them as per
the shape of the object .Name the vertices as 0 ,1 ,2 ..... n-1 .
Then write out the 'l' lines that are to be joined in terms of the endpoints
,such as 1,2 (line joining vertex 1 and vertex 2) .Now after all the l
lines are completed ,do the File ,whose format is :

n
x(0),y(0),z(0)
x(1),y(1),z(2)
.
.
.
x(n-1),y(n-1),z(n-1)
l
v(0)1,v(0)2
v(1)1,v(1)2
.
.
.
v(l-1)1,v(l-1)2

The Textured Objects have a small Change :

The Lines are replaced by Textured Triangles ,whose elements are written as :

v(0)1,v(0)2,v(0)3:t(0)

Where t(0) is the Texture Number as in the NEW.TEX File :

nt
t(0)
t(1)
.
.
.
t(nt-1)

Of Course ,you can use your own textures !

This covers Basic 3D ,But more graphics code will have to go into it ,to get
a swell 3D Rendering program .You can extend this library to support Lighting ,
by making use of the 24-Bit Reduction System in the Extended Hierarchy .

The Graphics Library used was first the BGI .Now this is a somewhat
Independent VGA library .Backward Compatibility with the BGI is Provided .
But "Some" Features of the Library may be "Unusable" if the BGI is used .

Read The FUNC.TXT File for Help on the Library Architecture ,and the
DESC.TXT File for where ,what files can be found .

Please Read the README.TXT ,for the Legal Stuff .

ACKNOWLEDGMENTS
---------------

I thank Mr.David Brackeen and Mr.Johan Peitz for their help on VGA Programming .
I thank Mr.Jerome St - Louis For Immense Help on the Triangle Filling ,HSR and 
Z-Buffering Algorithms .Full Credits go to Jordan Hargraphix Software for their
SVGA Driver .I would also like to thank Mrs.Diana Gruber ,for her Good Book -
"Action Arcade Adventure Set" .

I thank my Mathematics Tutors for their Invaluable Guidance and Support .
A Special mention here must be made of my Computer Science Teacher
Mrs.K.N.Rukmini ,for making me go through the Oceans of C and C++ with ease .

I also thank you for getting this Code .