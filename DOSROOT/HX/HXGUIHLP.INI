
;--- hxguihlp will try to load up to 3 fonts found in [boot]
;--- and add them to the GDI font pool by AddFontResource()

[boot]
;oemfonts.fon=8514oem.fon
;fixedfon.fon=8514fix.fon
;fonts.fon=8514sys.fon

;--- hxguihlp will try to load any fonts in the [fonts] section

;[fonts]
;sserif=sserif.fon

;--- hxguihlp will read the entries in [display] and try to
;--- set an appropriate video mode with ChangeDisplaySettings().
;--- mode=xxx will select a VESA mode directly. Else hxguihlp will try
;--- to find a matching mode by using VESA video mode enumeration (which
;--- may not work for all VESA BIOSes).
;--- with entries xmax + ymax one can restrict the video resolution.

[display]
xres=1600
yres=1200
bpp=32
;mode=0x114
;xmax=1024
;ymax=768

;--- wait=1 will cause hxguihlp to wait for a RETURN key press
;--- before the old video mode is restored

;--- save=1 will make hxguihlp to save/restore the video state using
;--- VESA functions. This function is not always implemented properly
;--- or may even cause the system to hang/crash, so set this value to
;--- 0 in case of problems.

;--- clear=1 will cause hxguihlp to clear the screen after switching
;--- to a graphics mode. Usually this is done by the vidoe BIOS, but
;--- one cannot rely on this.

;--- menu=0: no menu
;--- menu=1: menu by pressing APPS key (default)
;--- menu=2: menu by pressing Ctrl+Break (old behaviour)
;--- menu=3: menu by pressing either APPS or Ctrl+Break
;---  Ctrl+Break is signaled asynchronously and may therefore work even
;---  if the application is not responding (anymore). OTOH the signal
;---  may have been intercepted by other code and not reach hxguihlp.
;---  Furthermore activating Ctrl+Break will cause an additional thread
;---  to be created.

;--- stderr=<filename> will redirect output to standard error to <filename>.

[options]
wait=0
save=1
clear=0
;menu=2
stderr=.\hxstderr.log

;--- NoVsyncWait [VESA32]: with 1, function SetVesaDisplayStart
;--- will ignore requests for vsync waits. SetVesaDisplayStart is called by
;--- IDirectDrawSurface::Flip(). Setting this option is not recommended.

;--- UsePMTab [VESA32]: If set to 1, the protected mode table
;--- defined by VESA 2.0 will be used to set display start and palette.

;--- FlipStatus [VESA32]: 1 indicates that the VESA BIOS supports
;--- querying the flip status. Many BIOSes do not!

;--- DirectDACAccess [VESA32]: with 1 the VESA palette functions are not used,
;--- the DAC is accessed directly. Works with old 6-bit DACs (262.144 colors).

;NoVsyncWait=1
;UsePMTab=1
;FlipStatus=1
;DirectDACAccess=1
